[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* For the detailed documentation of this project, see the ChopChop Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "Trav1sT": 15,
      "seowalex": 2,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "mainClassName \u003d \u0027chopchop.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // showStandardStreams \u003d true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027java.awt.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027glass.platform\u0027: \u0027monocle\u0027,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027monocle.platform\u0027: \u0027headless\u0027,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u0027prism.verbose\u0027: \u0027true\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "tasks.withType(JavaCompile) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    options.compilerArgs \u003c\u003c \"-Xdiags:verbose\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    options.compilerArgs \u003c\u003c \"-Xlint:unchecked\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    String testFxVersion \u003d \u00274.0.16-alpha\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    archiveFileName \u003d \u0027chopchop.jar\u0027"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "run {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 8,
      "Trav1sT": 2,
      "-": 73,
      "fall9x": 28
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "-": 403
    }
  },
  {
    "path": "config/checkstyle/suppressions.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE suppressions PUBLIC"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD SuppressionFilter Configuration 1.2//EN\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/suppressions_1_2.dtd\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csuppressions\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"JavadocType\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003csuppress checks\u003d\"MissingJavadocMethodCheck\" files\u003d\".*Test\\.java\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"CustomImportOrder\" files\u003d\"[\\\\/]chopchop[\\\\/]logic[\\\\/]parser\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"CustomImportOrder\" files\u003d\"[\\\\/]chopchop[\\\\/]model[\\\\/]attributes\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"CustomImportOrder\" files\u003d\"[\\\\/]chopchop[\\\\/]commons[\\\\/]util\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"CustomImportOrder\" files\u003d\"[\\\\/]src[\\\\/]test\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"SingleSpaceSeparator\" files\u003d\"[\\\\/]chopchop[\\\\/]logic[\\\\/]parser\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"SingleSpaceSeparator\" files\u003d\"[\\\\/]chopchop[\\\\/]model[\\\\/]attributes\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"SingleSpaceSeparator\" files\u003d\"[\\\\/]chopchop[\\\\/]commons[\\\\/]util\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "  \u003csuppress checks\u003d\"SingleSpaceSeparator\" files\u003d\"[\\\\/]src[\\\\/]test\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/suppressions\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 8,
      "-": 10
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Ng Zhia Yang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/zhiayang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "[[github](http://github.com/zhiayang)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Role: Technical Lead"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Responsibilities: Command UI and Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "### Seow Alex"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cimg src\u003d\"images/seowalex.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "[[github](http://github.com/seowalex)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* Role: Code quality/Integration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### Travis Toh"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cimg src\u003d\"images/trav1st.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[github](http://github.com/trav1st)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* Role: Testing / Deliverables and Deadlines"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### Teh Xue Yong"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/fall9x.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "[[github](http://github.com/fall9x)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* Role: Testing / Documentation"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "### He Jialei"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/hjl99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "[[github](http://github.com/hjl99)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* Role: Deliverables and Deadlines / Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "hjl99": 4,
      "zhiayang": 5,
      "Trav1sT": 5,
      "seowalex": 4,
      "-": 34,
      "fall9x": 4
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103T-T10-3/tp/tree/master/src/main/java/chopchop/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "-": 77
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-----------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For more information on the ChopChop application itself, read the [_User Guide_](UserGuide.md) instead."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This developer guide specifies the design architecture and details some of the software design decisions in the implementation of the ChopChop application. It is intended to be read by contributors, testers, and future maintainers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## **Setting Up**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To setup the development environment, refer to [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This section of the developer guide details the overall design of ChopChop, including the various subcomponents and how they fit together."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Component Architecture"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 1: \u003ci\u003eThe architecture diagram of ChopChop\u003c/i\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T10-3/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/java/chopchop/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/java/chopchop/MainApp.java). It is responsible for:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* During launch: initialising the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* During shutdown: shutting down the components and invoking cleanup methods where necessary."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The rest of the App broadly consists of these four components:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* [**`UI`**](#ui-component): The user interface (UI)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* [**`Model`**](#model-component): The in-memory data manager."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* [**`Storage`**](#storage-component): The on-disk data manager."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Each of these components:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* defines its *API* in an `interface` with the same name as the component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class, implementing the corresponding `interface`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, the `Logic` component defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements said interface."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete recipe #1`:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 2: \u003ci\u003eA sequence diagram showing the execution of \u003ccode\u003edelete recipe #1\u003c/code\u003e\u003c/i\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The following sections break down the various components in greater detail."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "----------------"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### UI Component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The *UI* component is responsible for all the user-facing views in the graphical user interface. This includes displaying recipes and ingredients, receiving command input from the user, and printing command results to the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The class diagram of the UI component is shown below:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/UiClassDiagram.png\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 3: \u003ci\u003eThe class diagram of the UI component\u003c/i\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Interface**: [`Ui.java`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/java/chopchop/ui/Ui.java)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`HelpWindow`, `PinBox`, `CommandOutput`, `DisplayController`. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The graphical user interface is built using the JavaFX UI framework. The layout of these parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/java/chopchop/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-------------------"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Logic Component"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The *Logic* component is responsible for parsing command input, executing commands, and updating the Model component of any changes to data caused by running a command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The class diagram of the Logic component is shown below:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/LogicClassDiagram.png\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 4: \u003ci\u003eThe class diagram of the Logic component\u003c/i\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Interface**: [`Logic.java`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/java/chopchop/logic/Logic.java)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This is the general flow of events when a command is executed:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. `Logic` uses its `CommandParser` to parse the user command."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. After command execution, the command is saved by the `HistoryManager` to keep track of command history, and to allow for undoing/redoing of commands."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, this is a sequence diagram showing the deletion of a recipe:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/DeleteSequenceDiagram.png\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 5: \u003ci\u003eA sequence diagram showing the execution of \u003ccode\u003edelete recipe #1\u003c/code\u003e in the Logic component\u003c/i\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-------------------"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Model Component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The *Model* component is responsible for holding the data of the application (eg. the recipes and ingredients) in-memory during execution, and mediating access to this data for each of the other components of the system."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The class diagram of the *Model* component is shown below:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ModelClassDiagram.png\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6: \u003ci\u003eThe class diagram of the Model component\u003c/i\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Interface**: [`Model.java`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/java/chopchop/model/Model.java)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The Model component:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Stores the recipe and ingredient book data."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Exposes an `ObservableList` of both `Recipe` and `Ingredient`, for UI component to observe and update its graphical interface."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Of note in the Model component are the `Recipe` and `Ingredient` classes; below is the class diagram for both:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch2 style\u003d\"background-color: pink\"\u003eTODO: class diagram for Recipe and Ingredient\u003c/h2\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 7: \u003ci\u003eThe class diagram for Recipes and Ingredients\u003c/i\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Note that an instance of `Recipe` only stores `IngredientReferences` to the ingredients it uses, and not the actual `Ingredients` themselves — since the actual instance of the ingredient that will be used by the recipe is indeterminate."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only when a recipe is made are the references are resolved to their actual ingredient."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "---------------------"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Storage Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "The storage component is responsible for the saving and loading of the usage data for recipe and ingredient, the user preferences, and more importantly the recipe and ingredient data, to and from disk. Both pieces of data are stored in Javascript Object Notation (JSON) files, which is a human-readable (and editable) plain-text format."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Currently, the Jackson library is used for (de)serialisation."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The class diagram of the *Storage* component is shown below:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/StorageClassDiagram.png\"\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 8: \u003ci\u003eThe class diagram of the Storage component\u003c/i\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Interface**: [`Storage.java`](https://github.com/AY2021S1-CS2103T-T10-3/tp/blob/master/src/main/java/chopchop/storage/Storage.java)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "As mentioned above, the `Storage` component:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Saves and loads `UserPref`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Saves and loads the *Recipe Book* and the *Ingredient Book*."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* Saves and loads the *Recipe Usage List* and the *Ingredient Usage List*."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Each component is saved in a separate file with its file path specified in UserPref."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Each entity (eg. `Recipe`, `IngredientSet`) that needs to be saved has a corresponding `JsonAdapted{X}` class in the `chopchop.storage` package. This adapter class is responsible for converting, using Jackson, the \u0027normal\u0027 objects to a string representation (or to another adapter class), and to convert this string representation back to a \u0027normal\u0027 object."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, the `Ingredient` class has a corresponding `JsonAdaptedIngredient` that saves and loads the ingredient\u0027s name, quantities, and expiry dates."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "It can also be multi-level."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For example, the `JsonSerializableIngredientUsageList` contains `JsonAdaptedUsageList` and `JsonAdaptedUsageList` in turn contains a list of `JsonAdaptedIngredientUsage`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "------------------"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Utility Classes"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "While not itself a component, various utility types are placed in the `chopchop.commons` package; these are used by all the components in ChopChop, and comprise three sub-parts in their respective packages:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. `core` contains classes to handle GUI settings, logging, and versioning."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "2. `exceptions` contains exception types common across ChopChop."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "3. `util` contains utility classes for file IO and argument validation, as well as functional types."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-----------------------------"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## **Implementation Details**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This section explains, in detail, the implementation of some noteworthy features."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Command Parser"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Main developer: **zhiayang**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The command parser is part of the *Logic* component, and is responsible for taking the input command as a string and either returning a valid `Command` to be executed, or a sensible error message. It was completely rewritten due to the requirement of different parsing semantics."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Shown below is the class diagram for the various Parser components:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch2 style\u003d\"background-color: pink\"\u003eTODO: class diagram for Parser stuff\u003c/h2\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 9: \u003ci\u003eThe class diagram for the parser\u003c/i\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Notably, there are various wrapper classes to ensure type safety, namely `CommandArguments`, `ArgName`, and `ItemReference`, used instead of passing raw strings around in an error-prone manner."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Furthermore, instead of pointlessly instantiating objects that do not store any state, all of the parsing work (save the main `CommandParser`) is done by static methods, in the various `_CommandParser` classes (eg. `AddCommandParser`, `ListCommandParser`)."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "One of the more complex commands to parse is the `add recipe` command; here is the sequence diagram detailing how it is parsed:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch2 style\u003d\"background-color: pink\"\u003eTODO: sequence diagram for \u003ccode\u003eadd recipe\u003c/code\u003e\u003c/h2\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 10: \u003ci\u003eA sequence diagram for parsing an \u003ccode\u003eadd recipe\u003c/code\u003e command\u003c/i\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch4\u003eDesign Considerations\u003c/h4\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**1. Use of exceptions**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The parser written in an exception-free manner, using monadic result types (`Result`, `Optional`) instead."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  - Option A: use exceptions"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Pros: easier interfacing with the rest of ChopChop and existing AB3 code"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Cons: harder to visualise error source and propagation"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  - **Option B (chosen)**: use monadic types"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Pros: more explicit, easier to visualise error source and propagation"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Cons: harder to write"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**2. Numbered vs named item references**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "ChopChop allows referring to items (recipes and ingredients) both by their full name, as well as by its index number (as in AB3)."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  - Option A: allow only numbers"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Pros: easier to implement"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Cons: less intuitive for the user, index number can change as views are updated"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  - Option B: allow only names"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Pros: easier to implement"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Cons: full name of the ingredient or recipe might be tedious to type out each time"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  - **Option C (chosen)**: allow both"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Pros: best of both worlds"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    - Cons: slightly more code to implement"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### Quantity and Unit Handling"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Main developer: **zhiayang**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "blah blah blah blah"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"height: 15em\"\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch2 style\u003d\"background-color: #1077ff\"\u003eTODO: stuff below isn\u0027t done\u003c/h2\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialised with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The following activity diagram summarises what happens when a user executes a new command:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Target user profile**: People that cook daily, who need a way to manage recipes and their fridge contents."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seowalex"
        },
        "content": "**Value proposition**: Manages recipes and fridge inventory/expiry, and automatically suggests recipes to cook."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| Priority | As a ...                              | I want to ...                                                                     | So that I can ...                                      |"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| -------- | ------------------------------------- | --------------------------------------------------------------------------------- | ------------------------------------------------------ |"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person learning how to cook           | view my recipes                                                                   | not get the instructions wrong                         |"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | forgetful home cook                   | record recipes that I learnt from my friends and television shows                 | try to cook them in the future                         |                                                                        |"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* * *`  | person that cannot decide             | select recipes to cook automatically based on the ingredients that i have         | eat a wider variety of meals                           |"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | home cook who buys a lot of groceries | Enter the long list of products that I have bought while referring to the receipt | I can easily enter a large number of groceries at once |"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `* *`    | person on a diet                      | sort recipes based on calorie count                                               | choose to cook lower-calorie meals                     |"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "seowalex"
        },
        "content": "| `*`      | busy mother                           | enter the list of recipes I want to cook for the week                             | find out which groceries I need to buy                 |"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hjl99"
        },
        "content": "(For all use cases below, the **System** is the `Food Recipe Management System (FRMS)` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U1 - Add recipe**"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add a recipe."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new recipe."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate recipe."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U2 - Delete recipe**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete a recipe."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the recipe name."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of recipe name."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U3 - View recipe**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all recipes."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User requests for the recipes."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS display all the recipes."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U4 - Filter recipes**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered recipes."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of recipes."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any recipes."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U5 - List ingredients**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "fall9x"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view all ingredients."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User inputs the command to request for the ingredients."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS shows the confirmation message and displays the complete list of ingredients."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "fall9x"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters data according to the correct format."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t     Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U6 - Add Ingredient**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to add an ingredient."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message with the new ingredient."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects a duplicate ingredient."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b1. FRMS displays error messages."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b2. User enters new data."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U7 - Delete Ingredient**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to delete an ingredient."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the details according to the format."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FRMS displays a confirmation message."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. FRMS detects invalid input of ingredient name."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. FRMS displays error messages."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2b. User enters new data."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U8 - View expiring ingredients**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of expiring ingredients."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the date range."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of expiring ingredients."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients in the date range."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Use case: U9 - Filter ingredients**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "hjl99"
        },
        "content": "1. User chooses to view a list of filtered ingredients."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hjl99"
        },
        "content": "2. User enters the filter conditions."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "hjl99"
        },
        "content": "3. FMRS displays a filtered list of ingredients."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "hjl99"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2a. FRMS detects invalid input format."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "hjl99"
        },
        "content": "* 2b. Filtered list does not contain any ingredients."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a1. FRMS displays error messages."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    * 2a2. User enters new data."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "hjl99"
        },
        "content": "      Steps a-b are repeated until the data entered are correct."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\t      User case resumes from step 3."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "seowalex"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "seowalex"
        },
        "content": "4. Should be able to add multiple recipes at once"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "seowalex"
        },
        "content": "5. Should have autocompletion for commands"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "seowalex"
        },
        "content": "6. Should be able to fuzzy search for recipes/food"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "seowalex"
        },
        "content": "7. Should be able to manage recipes in a interactive manner (like Google Assistant)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "seowalex"
        },
        "content": "8. Should have input sanitisation"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Mainstream OS:** Latest version of Windows, MacOS or any Linux distro"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "seowalex"
        },
        "content": "* **Recipe:** List of ingredients and steps needed to cook a dish"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "seowalex"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "seowalex"
        },
        "content": "1. _{ more test cases … }_"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "seowalex"
        },
        "content": "1. _{ more test cases … }_"
      }
    ],
    "authorContributionMap": {
      "hjl99": 130,
      "zhiayang": 208,
      "Trav1sT": 5,
      "seowalex": 22,
      "-": 270,
      "fall9x": 51
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If you plan to use Intellij IDEA:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   1. Run the `chopchop.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [ChopChop\u0027s architecture](DeveloperGuide.md#architecture)."
      }
    ],
    "authorContributionMap": {
      "zhiayang": 3,
      "-": 45
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   e.g. `chopchop.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   e.g. `chopchop.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "   e.g. `chopchop.logic.CommandParserTest`"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "---------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "ChopChop is a food recipe management system, which aims to make it easier for people to manage their recipes and ingredients in an easy and effective manner. It is a *desktop app*, optimised for use through typing textual commands; For fast typists, ChopChop will be able to manage your recipes more efficiently than other applications. Even so, it also features a graphical user interface (GUI) to display ingredients and recipes in an interactive form."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Furthermore, our command interface also features [tab completion](#TabCompletion), which will greatly increase the speed at which you can use ChopChop by reducing the amount of typing required."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 1.1. Navigating this Document"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "This user guide provides an in-depth guide about how to use ChopChop. Choose a topic from the Table of Contents to find answers, get step-by-step instructions. In addition, the quick start guide provides an end-to-end setup process to get you started on the ChopChop installation process."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Specifically, this document covers:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. The components of the user interface"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "2. The syntax and behaviour of the commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "3. Detailed usage examples, with step-by-step illustrated walkthroughs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "4. Other usage notes and features"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 1.2. Document Conventions"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "In this document, some elements are styled differently for emphasis. These include:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- :bulb: — This a useful piece of information that can make using ChopChop easier"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- :information_source: — This indicates something that you should pay attention to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `code` — Text styled in this font generally indicates commands that you will type into the \u003ci\u003ecommand box\u003c/i\u003e (see below)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- \u003ckbd\u003eenter\u003c/kbd\u003e — Text styled in this font indicates keys that you press on your keyboard"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "--------------"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To start using and experimenting with ChopChop, here are the steps you can follow:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "1. Ensure you have Java \u003cb\u003e11\u003c/b\u003e or above installed in your computer; it can be obtained from [AdoptOpenJDK](https://adoptopenjdk.net)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "2. Download the latest \u003ci\u003echopchop.jar\u003c/i\u003e from [here](https://github.com/AY2021S1-CS2103T-T10-3/tp/releases)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for your ChopChop."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. The app starts with some sample data for you to experiment with.\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/sample_data.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Figure 1.1: \u003ci\u003eThe initial state of ChopChop, including sample data\u003c/i\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Now that you have ChopChop installed, you can start to play around with the sample data — add recipes, ingredients, and more! Some commands you could try include:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `add ingredient milk /qty 500ml /expiry 2020-11-09` — to add some milk"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `add recipe milkshake /ingredient milk /qty 250ml /step Add milk /step Shake` — to add a recipe"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To exit ChopChop, you can either use the `quit` command, or simply close the application window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-----------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## 3. Overview"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "ChopChop manages two key components — ingredients and recipes — and they will be the main pieces you will interact with. Common to both are names and tags, the latter of which allow you to quickly group related ingredients or recipes together, or to organise them in any way you desire."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The names for both ingredients and recipes are case insensitive, so \u003ci\u003epAnCaKeS\u003c/i\u003e and \u003ci\u003ePancakes\u003c/i\u003e refer to the same recipe. Note that you cannot have duplicate recipes nor ingredients in ChopChop; items are duplicates if their names are the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 3.1. Ingredients"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "An ingredient consists of a quantity with an associated unit, and an optional expiry date. Each ingredient can have multiple *sets*, where each set is a given quantity of that ingredient, expiring on a certain date."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, you might have \u003ci\u003e500 mL\u003c/i\u003e of milk that you bought last week that expires tomorrow, while you have another \u003ci\u003e1.5 L\u003c/i\u003e of milk that you bought today, expiring two weeks from now. ChopChop will track both these *sets*, and will intelligently use the earliest-expiring set when doing its accounting."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For a more in-depth look at how ChopChop handles quantities, see [this section](#quantities-and-units)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 3.2. Recipes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "A recipe consists of a list of used ingredients (and their quantities), as well as a list of steps."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "--------------------------------"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## 4. Navigating the User Interface"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop\u0027s UI design allows users to view all of the information you need through mouse input over a few tabs. However, that might lead to a slightly steeper learning curve."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Hence, this section aims to give you a breakdown of the GUI\u0027s various components."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Specifically, this section covers:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "1. [Command Box](#CommandBox)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "2. [Command Output](#CommandOutput)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "3. [Recipe Button](#RecipeButton)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "4. [Ingredient Button](#IngredientButton)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "5. [Recommendation Button](#RecommendationButton)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "6. [Favourites Button](#FavouriteButton)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "7. [Statistics Box](#StatisticsBox)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "8. [Recipe Tile](#RecipeTiles)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "9. [Ingredient Tile](#IngredientTiles)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "10. [Recipe Name and Tags](#RecipeName)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "11. [Recipe Ingredients](#RecipeIngredients)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "12. [Recipe Steps](#RecipeSteps)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "13. [Menu Bar](#MenuBar)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/ug/recipe_panel_description.png\" width\u003d\"95%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Figure 1.2: \u003ci\u003eThe Recipe View Panel of ChopChop.\u003c/i\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/ug/ingredient_panel_description.png\" width\u003d\"95%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Figure 1.3: \u003ci\u003eThe Ingredient View Panel of ChopChop.\u003c/i\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"CommandBox\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.1 Command Box "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop does your bidding by listening to your commands — the `Command Box` is where you type your textual commands."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "After typing your commands, press \u003ckbd\u003eenter\u003c/kbd\u003e to input the command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "To learn about the commands you can perform, check out our [command summary](#CommandSummary) for a quick overview or our [commands](#Commands) for a detailed -."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "If you have yet to check out ChopChop\u0027s [tab completion](#TabCompletion) section, do drop by to learn this handy feature!"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"CommandOutput\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.2 Command Output"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop will always display textual responses to the commands you input — the `Command Output` is where you can view the responses."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"RecipeButton\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.3 Recipe Button"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop is able to display all of your recipes as [Recipe Tiles](#RecipeTiles) in the `Main Display Area` as shown in Figure 1.2 when you press the `Recipes` button. The 4 buttons at the bottom of our GUI will take on a darker shade when they are currently selected."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"IngredientButton\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.4 Ingredient Button"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop is able to display all of your ingredients as [Ingredient Tiles](#IngredientTiles) in the `Main Display Area` as shown in Figure 1.3 when you press the `Ingredients` button."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"RecommendationButton\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.5 Recommendation Button"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop is able to recommend you recipes to cook if you want it to! The recipes that are recommended will be display as [Recipe Tiles](#RecipeTiles) in the `Main Display Area` when you press the `Recommendations` button."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"FavouriteButton\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.6 Favourite Button"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop is able to save your favourite recipes — press the `Favourites` button to view them as [Recipe Tiles](#RecipeTiles)."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"StatisticsBox\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.7 Statistics Box"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop is able to produce statistics based on the food you make! -insert more info cause idk what stats does atm-"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"RecipeTiles\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.8 Recipe Tiles"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop is able to show you your recipes in the form of tiles — simply click on a tile to view the detailed information about the selected recipe in the `Main Display Area`, as shown in Figure 1.4."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"IngredientTiles\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.9 Ingredient Tiles"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop is able to show you your ingredients in the form of tiles, as shown in Figure 1.3. In each tile, there are 5 components:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fall9x"
        },
        "content": "1. The `Index` shows the index of the ingredient for easier referencing."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fall9x"
        },
        "content": "2. The `Expiry Date` of the ingredient."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fall9x"
        },
        "content": "3. The `Quantity` of the ingredient."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fall9x"
        },
        "content": "4. The `Ingredient Name` of the ingredient."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fall9x"
        },
        "content": "5. The `Tags` associated with the ingredient."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/ug/recipe_display_description.png\" width\u003d\"95%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Figure 1.4: \u003ci\u003eThe Recipe Display Panel of ChopChop.\u003c/i\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"RecipeName\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.10 Recipe Name and Tags"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop displays the name of the recipe, and the tags associated with it in this area. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"RecipeIngredients\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.11 Recipe Ingredients"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop displays the ingredients you need in the recipe here. The format of the display is the `Ingredient`, follow by the `(Quantity)`. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"RecipeSteps\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.12 Recipe Steps"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop lists down the steps you can take to create the dish here."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"MenuBar\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fall9x"
        },
        "content": "### 4.13 Menu Bar"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fall9x"
        },
        "content": "ChopChop provides two buttons here — `File` and `Help`. Click the `exit` option under `File` to exit ChopChop, and if you want to view this User Guide, you can click the `help` option under `Help`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-----------"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003ca name\u003d\"Commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## 5. Commands"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "While ChopChop has a graphical user interface, the main method of interaction is through the use of *typed commands*. Using these commands as described below, you can manipulate your recipes and ingredients without ever needing to move your mouse!"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Commands should be typed in the \u003ci\u003eCommand Box\u003c/i\u003e — you can refer to \u003ci\u003eFigure 1.2\u003c/i\u003e above if you get lost."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.1. Command Syntax"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fall9x"
        },
        "content": "To succinctly represent the syntax of the various commands, we adopt a simple notation in this User Guide, as shown below:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Words starting with a slash (`/`) denote named parameters; these names are case sensitive (eg. `/STEP` is not the same as `/step`). All the text following a named parameter *belong* to it, until either the end of the input, or the next named parameter. \u003cbr /\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, in `/param1 lorem ipsum /param2 dolor sit amet`, the parameter \u003ci\u003eparam1\u003c/i\u003e will have the value \u0026ldquo;\u003ci\u003elorem ipsum\u003c/i\u003e\u0026rdquo;, while the parameter \u003ci\u003eparam2\u003c/i\u003e will have the value \u0026ldquo;\u003ci\u003edolor sit amet\u003c/i\u003e\u0026rdquo;."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Words in angle brackets (eg. `\u003cname\u003e`) denote an input that is provided by *you*, the user. \u003cbr /\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, the \u003ci\u003eadd ingredient\u003c/i\u003e command is specified like this: `add ingredient \u003cname\u003e /qty \u003cquantity\u003e [/expiry \u003cexpiry-date\u003e]`; in this case, you would need to provide the \u003ci\u003ename\u003c/i\u003e, \u003ci\u003equantity\u003c/i\u003e, and \u003ci\u003eexpiry date\u003c/i\u003e."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Portions in square brackets (eg. `[/expiry \u003cexpiry-date\u003e]`) denote optional parts of the command. In this example, not all ingredients will expire, so the expiry date is optional."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* Portions with trailing ellipses (eg. `[/step \u003cstep\u003e]...`) denote commands accepting one or more of the given parameter. In this example, a recipe can have multiple steps, so you can specify multiple `/step` arguments."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* A `\u003c#REF\u003e` refers to an item reference, and is used to refer to either a recipe or an ingredient. It can either be the (case-insensitive) name of the item, or it can be a number prefixed with \u0027#\u0027, eg. `#3` to refer to the third item in the list. In the GUI, displayed items are numbered in the corner."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* In general, the order of arguments is important; for example, the order of `/step` determines the order of the steps in the recipe, while a `/qty` in an \u003ci\u003eadd recipe\u003c/i\u003e command must only appear after an `/ingredient`."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"HelpCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.2. Getting Help — **`help`**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command shows a message with a link to this user guide; you can use it to easily access this page from the application. The link can be clicked, and will open this page in your web browser."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Furthermore, you can also use this command to get help for specific commands. In that case, clicking the link will bring you to the corresponding section in the User Guide for that command."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `help [\u003ccommand-name\u003e [\u003ccommand-target\u003e]]`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `help` \u003cbr /\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This shows the link to bring you to this User Guide, as shown in figure 2.1 below."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  \u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  \u003cimg src\u003d\"images/ug/help_message_1.png\" width\u003d\"55%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  Figure 2.1: \u003ci\u003eThe help message, with a link to this User Guide\u003c/i\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `help add recipe` \u003cbr /\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This gives a brief description of the command provided, as well as a link to its section."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  \u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  \u003cimg src\u003d\"images/ug/help_message_2.png\" width\u003d\"55%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  Figure 2.2: \u003ci\u003eThe help message for a specific command\u003c/i\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"QuitCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.3. Quitting ChopChop — **`quit`**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command quits ChopChop. You can rest assured that your data is automatically saved whenever a command is executed, so you do not need to save it manually before quitting."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `quit`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"ViewCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.4. Viewing Recipes — **`view`**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command opens the detailed recipe view, allowing you to see the steps, ingredients, and tags of the recipe."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `view \u003c#REF\u003e`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fall9x"
        },
        "content": "- `view #4` \u003cbr /\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\tThis displays the fourth recipe currently shown in the GUI\u0027s recipe view."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fall9x"
        },
        "content": "- `view pancakes` \u003cbr /\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\tThis displays the recipe named \u0027pancakes\u0027. Note that the name here is case insensitive."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To illustrate, in the scenario below, both `#4` and `pancakes` will refer to the same recipe:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/ug/view_recipe_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 3.1: \u003ci\u003eThe recipe list view\u003c/i\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "After pressing \u003ckbd\u003eenter\u003c/kbd\u003e, you will see this view, showing the recipe you wish to view:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_recipe_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 3.2: \u003ci\u003eThe detailed recipe view\u003c/i\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"ListRecipeCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.5. Listing Recipes — **`list`**`recipes`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command shows a list of all recipes in ChopChop. You can use this to switch panes (between recipes and ingredients) without using the mouse, as well as to clear any filters that might have been applied due to previous commands (eg. `find` and `filter`)."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `list recipes`"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ":bulb: **Tip:** For convenience, you can use either `list recipes` or `list recipe`."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Executing this command simply brings you back to the recipe list view:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/list_recipe.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 4: \u003ci\u003eThe recipe list view\u003c/i\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"AddRecipeCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.6. Adding Recipes — **`add`**`recipe`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command adds a recipe to ChopChop, specifying zero or more ingredients, each with an optional quantity, and zero or more steps. After a recipe is added, you will be able to see it immediately in the application."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "add recipe \u003cname\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/ingredient \u003cingredient-name\u003e [/qty \u003cquantity\u003e]]..."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/step \u003cstep\u003e]..."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/tag \u003ctag-name\u003e]..."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- Recipe name should not be empty"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- Ingredient names should not be empty"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- Steps should not be empty"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- Tag names should not be empty"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If an ingredient is specified without a quantity, it is treated *as if* you used `/qty 1`. This works for counted ingredients (eg. eggs), but it will cause errors for other ingredients (eg. volume of milk)."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, suppose you wanted to add a recipe for pancakes using flour, eggs, and milk, you would type this:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "add recipe Pancakes"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/ingredient flour /qty 400g"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/ingredient egg /qty 3"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/ingredient milk /qty 250ml"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/step Mix ingredients together"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/step Bake for 30 minutes at 400 celsius"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/step Pour syrup and serve"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "(note that this is displayed on separate lines for clarity, but you should type this in one go)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_recipe_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 5.1: \u003ci\u003eThe add recipe command\u003c/i\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "After pressing \u003ckbd\u003eenter\u003c/kbd\u003e, you will see this view, showing your newly created recipe:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_recipe_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 5.2: \u003ci\u003eThe recipe detail view\u003c/i\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If you go back to the main recipe view (either by clicking on the tab at the bottom, or by using `list recipes`, you can see the new recipe in the list:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_recipe_3.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 5.3: \u003ci\u003eThe newly created recipe in the recipe list\u003c/i\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"EditRecipeCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.7. Editing Recipes — **`edit`**`recipe`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command edits a specific recipe in ChopChop. The `edit recipe` lets you perform different actions on the name, ingredients, steps, and tags, as specified below."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To accomodate the various different kinds of editing operations, ChopChop has special syntax for editing, known as *edit-arguments*, eg. `/step:add`. The component following the colon is the *ACTION*, which can take these values:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- For ingredients and steps, it can either be `add`, `edit`, or `delete`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- For tags, it can be either `add` or `delete`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch4\u003eName\u003c/h4\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If you want to edit a recipe\u0027s name, use `/name`, for example `/name new recipe name`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch4\u003eIngredients\u003c/h4\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If you want to edit a recipe\u0027s ingredients, use `/ingredient` with the corresponding action (eg. `/ingredient:add`)."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "When adding or editing ingredients, a `/qty` *must* be specified after the ingredient (similar to an `add recipe` command). Here are some examples:"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/ingredient:add milk /qty 500ml` \u003cbr /\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This makes the recipe require 500ml of milk; if the recipe already used milk, then an error is displayed — here, you should use `/ingredient:edit` instead."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/ingredient:edit beef /qty 200g` \u003cbr /\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This changes the quantity of beef used in the recipe from its previous value, to 200 grams. If the recipe did not use beef as an ingredient, an error is displayed — here, you should use `/ingredient:add` instead."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/ingredient:delete carrot` \u003cbr /\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This removes carrots from the recipe entirely. If the recipe did not use carrots, then an error is displayed."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch4\u003eTags\u003c/h4\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If you want to edit the tags for a recipe, use `/tag` with the corresponding action, which are either `add` or `delete`. For example:"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/tag:add vegetarian` \u003cbr /\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This adds the \u0027vegetarian\u0027 tag to the recipe. It is not an error if the recipe already contains this tag."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/tag:delete cold` \u003cbr /\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This removes the \u0027cold\u0027 tag from the recipe. If the recipe did not have this tag, an error is displayed."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch4\u003eSteps\u003c/h4\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Since steps have a fixed ordering in a recipe, editing them is slightly more involved; when editing or deleting steps, you are required to provide the step number as an additional component in the *edit-argument*, for example `/step:edit:3` edits the third step in the recipe."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "When adding a step, the step number is optional; if not specified, the new step will be added at the end. If it is specified, then the new step will be inserted at the corresponding position, and the following steps will be re-numbered."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/step:add Bake for 80 minutes at 400 C` \u003cbr /\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This adds a new step at the end of the existing steps of the recipe."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/step:edit:4 Bake for 50 minutes at 250 C` \u003cbr /\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This changes the content of step number 4, so the cake does not get burnt."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/step:delete:1` \u003cbr /\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  This deletes the first step of the recipe."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ch4\u003eUsage\u003c/h4\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Except `/name` (which can only appear once), all of the edit operations described above can appear multiple times, in any order, in a single `edit recipe` command. Each operation is processed sequentially from left-to-right, so if two operations modify the same item, then the second one will take precedence."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "(As an example, `/step:edit:3 Bake ... /step:edit:3 Fry` will cause step 3 to be \u0027Fry\u0027)"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**:"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "edit recipe \u003c#REF\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/name \u003cnew-recipe-name\u003e]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/ingredient:\u003caction\u003e \u003cingredient-name\u003e [/qty \u003cquantity\u003e]]..."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/step:\u003caction\u003e[:\u003cindex\u003e] \u003cstep\u003e]..."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/tag:\u003caction\u003e \u003ctag-name\u003e]...."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "seowalex"
        },
        "content": "- `edit recipe #4 /name soup` \u003cbr /\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\tThis changes the name of the fourth recipe currently shown in the GUI\u0027s view to \u0027soup\u0027."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "seowalex"
        },
        "content": "- `edit recipe pancakes /ingredient:add syrup /qty 500ml` \u003cbr /\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\tThis edits the recipe named \u0027pancakes\u0027 by adding 500ml of syrup to the recipe\u0027s ingredient list."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "seowalex"
        },
        "content": "- `edit recipe risotto /step:edit:1 In a saucepan, warm the broth over low heat` \u003cbr /\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    This edits the recipe named \u0027risotto\u0027 by changing the 1st step to the text above."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "seowalex"
        },
        "content": "- `edit recipe beef curry /ingredient:delete apple /step:delete:4` \u003cbr /\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    This edits the recipe named \u0027beef curry\u0027 to remove both the ingredient \u0027apple\u0027 as well as the 4th step."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To illustrate how to use this powerful command, let us recreate the Pancake recipe from above, but starting from a blank recipe. First, we make the empty recipe using `add recipe Pancakes`:"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c!-- to editors: don\u0027t mind the image names, i cut out some steps for brevity and i\u0027m lazy to rename the files. --\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.1: \u003ci\u003eThe empty recipe\u003c/i\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Now, let\u0027s add our ingredients. First, 400 grams of flour:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.2: \u003ci\u003eThe command to add a new ingredient to the recipe\u003c/i\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Next, adding the eggs and milk in one go:"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_4.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.3: \u003ci\u003eThe edit command supports multiple operations at once\u003c/i\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Oops, that\u0027s too many eggs, so let\u0027s edit the quantity:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_5.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.4: \u003ci\u003eEditing an ingredient to change its quantity\u003c/i\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_6.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.5: \u003ci\u003eThe recipe now uses only 3 eggs\u003c/i\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Now let\u0027s add the steps:"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_7.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.6: \u003ci\u003eAdding the first step\u003c/i\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_8.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.7: \u003ci\u003eAdding steps 2 and 3\u003c/i\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Oh no, if we bake the pancakes (are pancakes baked?) like that, they\u0027ll get burnt, so let\u0027s fix it:"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_10.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.8: \u003ci\u003eEditing the second step\u003c/i\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/edit_recipe_11.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 6.9: \u003ci\u003eThe actual completed recipe\u003c/i\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "And now the pancake recipe is complete!"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"DeleteRecipeCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.8. Deleting Recipes — **`delete`**`recipe`"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command deletes a specific recipe from ChopChop. Don\u0027t worry if you did this accidentally, because commands can be undone! (see: [undo](#UndoCommand))."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `delete recipe \u003c#REF\u003e`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `delete recipe #4` \u003cbr /\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\tThis deletes the fourth recipe currently shown in the GUI\u0027s view."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `delete recipe pancakes` \u003cbr /\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\tThis deletes the recipe named \u0027pancakes\u0027. Note that the name here is case insensitive."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"FindRecipeCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.9. Finding Recipes — **`find`**`recipe`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command finds all recipes containing the given keywords in the name."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `find recipe \u003ckeyword\u003e [\u003ckeyword\u003e]...`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- At least one search keyword must be given"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Only the recipe name is searched, and only full words are matched, case-insensitively. In the case of multiple search keywords, recipes containing any of those words will be returned."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `find recipe cake` will match **Chocolate Cake** and **Strawberry Cake**, but *not* **Pancakes**."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `find recipe milk cake` will match **Milk Tea** and **Carrot Cake**."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To illustrate, suppose you want to search for recipes with names containing \u0027cake\u0027, you would use `find recipe cake`:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/find_recipe_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 8.1: \u003ci\u003eThe starting state of the application\u003c/i\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "After executing the command, note how the recipe list has changed, showing only the matching recipes, and that item number in the corners have changed as well. As explained above, the \u0027Pancakes\u0027 recipe was not included in this list:"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/find_recipe_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 8.2: \u003ci\u003eThe recipes containing \u0027cake\u0027\u003c/i\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To go back to the full recipe view (resetting the search filter), you can either click the Recipes button at the bottom, or run the `list recipes` command:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/find_recipe_3.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 8.3: \u003ci\u003eBack to the main recipe list\u003c/i\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"FilterRecipeCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.10. Filtering Recipes — **`filter`**`recipe`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "hjl99"
        },
        "content": "This command filters all recipes and lists those containing all ingredients and tags specified in the command."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**:"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "filter recipe"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/tag \u003ctag-keywords\u003e...]..."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/ingredient \u003cingredient-keywords\u003e...]..."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- Keywords do not have to be complete to match the \u0027tag\u0027 or \u0027ingredient\u0027 names."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- Multiple search terms from the same category are allowed. e.g. `/tag movie /tag family`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- Search terms can be placed in any order."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- The filtering is case-insensitive and allows spaces between keywords in a single search term. e.g. `/tag family favourite` is allowed."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "hjl99"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- At least one search term must be given, and they should be either `/tag` `/ingredient`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- Search terms must not be empty."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter recipe /tag family reunion` will match **Spring Rolls** and **Hot Pot**, the only recipes with \u0027tag\u0027 **family reunion**."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter recipe /tag snacks /tag sweet` will match **Chocolate Cookie** and **Gummy Bears**, the only recipes with \u0027tag\u0027 **snacks** and \u0027tag\u0027 **sweet**."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter recipe /ingredient egg` will match **Egg Tart** and **Scrambled Eggs**, the only recipes using the \u0027ingredient\u0027 **egg**."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter recipe /ingredient chicken /ingredient cheese /ingredient pineapple` will match **Chicken Quesadilla**, the only recipe containing \u0027ingredient\u0027 **chicken**, **cheese**, and **pineapple**."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter recipe /tag local dish /ingredient chicken /ingredient white rice /tag family favourite` will match **Chicken Rice**, the only recipe that matches all criteria specified."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "hjl99"
        },
        "content": "To illustrate, suppose you want to search for recipes with \u0027tags\u0027 **Christmas** and **home baked** that use the \u0027ingredient\u0027 **Ginger Root**, **Honey** and **Molasses**, you could use `filter recipe /tag christmas /ingredient ginger root /tag home baked /ingredient honey /ingredient molasses`:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/ug/filter_recipe_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 8.1: \u003ci\u003eThe starting state of the application\u003c/i\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "hjl99"
        },
        "content": "After executing the command, similar to the effect of **find recipe** command, the recipe list has changed, showing only the matching recipe, **gingerbread man**."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/ug/filter_recipe_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 8.2: \u003ci\u003eThe recipe matching all criteria provided\u003c/i\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "hjl99"
        },
        "content": "Again, to reset the search filter or go back to the full recipe view, you can click the Recipes button or run the `list recipes` command."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"ListIngredientCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.11. Listing Ingredients — **`list`**`ingredients`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command shows a list of all recipes in ChopChop. As with the `list recipes` command, you can use this command to switch between panes without clicking, or to reset any filters."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `list ingredients`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ":bulb: **Tip:** For convenience, you can use either `list ingredients` or `list ingredient`."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/list_ingredient.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 9: \u003ci\u003eThe ingredient list view\u003c/i\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"AddIngredientCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.12. Adding Ingredients — **`add`**`ingredient`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command adds an ingredient to ChopChop, with an optional quantity and expiry date:"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- If the quantity is not specified, ChopChop will infer a counted quantity, like eggs."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- If the expiry date is not specified, it is assumed that the ingredient (eg. salt) does not expire."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "As mentioned in the overview above, an ingredient can consist of multiple sets; the `add ingredient` command will intelligently *combine* ingredients as appropriate."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ":information_source: **Note:** Ingredients need to have compatible units in order to be combined; see [this section](#quantities-and-units) for how it works."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If the new ingredient has `/tag` options that are not present in the existing ingredient, then they are added as well."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**:"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "add ingredient \u003cname\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/qty \u003cquantity\u003e]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/expiry \u003cexpiry-date\u003e]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  [/tag \u003ctag-name\u003e]..."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `add ingredient milk /qty 1l /expiry 2020-11-09` adds one litre of milk that expires on the 9th of November."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `add ingredient egg /expiry 2020-12-25` adds one egg that expires on Christmas day."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Suppose you just finished a grocery run, and want to add the items to ChopChop. First, you have 2 cartons of milk:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_ingredient_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 10.1: \u003ci\u003eAdding 2 litres of milk\u003c/i\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Since ChopChop did not know about \u0027milk\u0027 previously, a new ingredient entry is created for it:"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_ingredient_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 10.2: \u003ci\u003eThe newly added milk ingredient\u003c/i\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Next, suppose you also bought 24 blueberries:"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_ingredient_3.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 10.3: \u003ci\u003eAdding 24 blueberries\u003c/i\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This time, since ChopChop already knew about blueberries, our previous 5 blueberries now become 29:"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_ingredient_4.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 10.4: \u003ci\u003eYou now have 29 blueberries\u003c/i\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If you try to add an ingredient with incompatible quantities (for example, suppose you did not want to count the blueberries individually, and you only know that you bought a 400 gram box), ChopChop will display an error message, and not update the ingredient:"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/add_ingredient_5.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 10.5: \u003ci\u003eIngredients must have compatible units to be combined\u003c/i\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"DeleteIngredientCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.13. Deleting Ingredients — **`delete`**`ingredient`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command deletes a specific ingredient from ChopChop. Similar to the `add ingredient` command, this command also allows you to delete quantities of ingredients instead of the whole ingredient. In this scenario, ChopChop will intelligently remove the earliest-expiring ingredients first."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "If `/qty` is not specified, then the behaviour of this command is to completely remove the ingredient from ChopChop. Worry not: if you accidentally delete something, you can always `undo` it."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "seowalex"
        },
        "content": ":information_source: **Note:** If specified, the quantity needs to have compatible units with the existing ingredient; see [this section](#quantities-and-units) for how it works."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `delete ingredient \u003c#REF\u003e [/qty \u003cquantity\u003e]`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `delete ingredient #4` \u003cbr /\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\tThis deletes the fourth ingredient currently shown in the GUI\u0027s view."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "seowalex"
        },
        "content": "- `delete ingredient milk /qty 500ml` \u003cbr /\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\tThis removes 500ml of milk from ChopChop\u0027s inventory."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "To illustrate, suppose that you poured yourself a glass of cold milk to drink, without making a recipe. To tell ChopChop that there is less milk in the fridge, you would use this command:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/delete_ingredient_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 11.1: \u003ci\u003eRemoving 250ml of milk\u003c/i\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Notice how the amount of milk decreased from 2 litres to 1.75 litres:"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/delete_ingredient_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 11.2: \u003ci\u003eYou now only have 1.75 litres of milk left\u003c/i\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"FindIngredientCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.14. Finding Ingredients — **`find`**`ingredient`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "This command finds all ingredients containing the given keywords in the name, and it works identically to the `find recipe` command [above](#FindRecipeCommand)."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- At least one search keyword must be given"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `find ingredient \u003ckeyword\u003e [\u003ckeyword\u003e]...`"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For example, suppose you wanted to find all ingredients containing fish (not in the literal sense, but only in their name):"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/find_ingredient_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 12.1: \u003ci\u003eThe complete ingredient list\u003c/i\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Now, only the matching ingredients are shown:"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cimg src\u003d\"images/ug/find_ingredient_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 12.2: \u003ci\u003eOnly ingredients containing \u0027fish\u0027 in their name are shown\u003c/i\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Again, you can either click the Ingredients button, or use `list ingredients` to clear the search filter."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"FilterIngredientCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.15. Filtering Ingredients — **`filter`**`ingredient`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "hjl99"
        },
        "content": "This command filters all ingredients and lists those that match all the tags and expiry dates specified in the command."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `filter ingredient [/expiry \u003cexpiry-date\u003e] [/tag \u003ctag-keywords\u003e]...`"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- Keywords following `/tag` do not have to be complete to match the \u0027tag\u0027 name."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `/expiry \u003cexpiry-date\u003e` filters the ingredients and only lists those that expire before the date provided."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- When there are multiple expiry dates specified,, only the earliest one will be considered."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- Except for the changes in the search fields, this feature works identically to the `filter recipe` command [above](#FilterRecipeCommand)."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "hjl99"
        },
        "content": "Constraints:"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- At least one search term must be given, and they should be either `/expiry` or `/tag`."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- Search terms must not be empty."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter ingredient /tag bitter taste` will match **bitter melon** and **dark chocolate**, the only ingredients with the \u0027tag\u0027 **bitter taste**."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter ingredient /tag frequently used /tag sweet` will match **sugar**, the only ingredient with the \u0027tag\u0027 **frequently used** and \u0027tag\u0027 **sweet**."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter ingredient /expiry 2020-12-01` will match **apple**, the only \u0027ingredient\u0027 expiring before **2020-12-01**."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter ingredient /expiry 2022-12-31 /expiry 2020-10-31 /expiry 2023-01-01` will match **chocolate**, the only ingredient expiring before **2020-10-31**."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "hjl99"
        },
        "content": "- `filter ingredient /tag powdery /expiry 2020-12-31 /expiry 2020-12-01 /tag bakery` will match **baking soda**, the only ingredient that matches all criteria specified."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "hjl99"
        },
        "content": "To illustrate, suppose you want to search for ingredients with \u0027tags\u0027 **all time** and **favourite**, and expire earlier than the \u0027expiry date\u0027 **2020-12-31**, you could use `filter ingredient /tag all time /expiry 2020-12-31 /expiry 2021-01-01 /tag favourite`:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/ug/filter_ingredient_1.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 13.1: \u003ci\u003eThe starting state of the application\u003c/i\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "hjl99"
        },
        "content": "After executing the command, similar to the effect of **filter recipe** command, the ingredient list has changed, showing only the matching ingredient, **apple**."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cdiv style\u003d\"text-align: center; padding-bottom: 2em\"\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003cimg src\u003d\"images/ug/filter_ingredient_2.png\" width\u003d\"75%\" /\u003e \u003cbr /\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Figure 13.2: \u003ci\u003eThe ingredient matching all criteria provided\u003c/i\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "hjl99"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "hjl99"
        },
        "content": "Again, to reset the search filter or go back to the full ingredient view, you can click the Ingredients button or run the `list ingredients` command:"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"UndoCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.16. Undoing Commands — **`undo`**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Undoes the last undoable command. Undoable commands are commands that involve changes to recipes and ingredients stored in ChopChop."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `undo`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"RedoCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 5.17. Redoing Commands — **`redo`**"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Redoes the last redoable command. All undoable commands (as described [above](#UndoCommand)) can be redone."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `redo`"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"StatsRecipeTopCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.18. Listing top Recipes -- **`stats recipe top`**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Shows a list of recipes that were made the most. The list is sorted in descending order by the number of times it was made; the first recipe in the list is the recipe that was made the most number of times. The number of usages is calculated from based on current records. So, if you have just cleared your recipe usage records,"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "you will see that all recipes were made 0 times."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Even after you delete a recipe is deleted, its past usages are still saved within ChopChop."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `stats recipe top`"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Let\u0027s say you executed `make Singapore Sling` 2 times a day for the past 1 year. Today, you decided to delete the recipe for health reasons. If you enter `stats recipe most made`, you will still see it listed as one of the most made recipes."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003ca name\u003d\"StatsRecipeRecentCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.19. Listing recently made Recipes— **`stats recipe recent`**"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Shows a list of most recently made recipes. The list is arranged in descending chronological order; the recipe most recently made is the first item on the list."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Even after the recipe is deleted, its past usages are still saved within ChopChop, and you will the recipe listed. However, if you have just cleared your recipe usage records, there will be no recipes shown."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"StatsRecipeMadeCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.20. Listing Recipes made within a given time frame — **`stats recipe made`**"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Shows a list of recipes that were made within the given time frame. The list is arranged in descending chronological order."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Even after the recipe is deleted, its past usages are still saved within ChopChop, and you will see the recipe listed. However, if you have just cleared your recipe usage records, there will be no recipes shown."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "**Usage**: `stats recipe [/before \u003cDATE\u003e] [/after \u003cDATE\u003e]`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ":bulb: **Tip:** If you omit both `[/before DATE]` and `[/after DATE]`, ChopChop will show you a list of recipes that were made today from 00:00 hours to tomorrow 00:00 hours."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For example:"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Let\u0027s say you executed `make Rojak` on 23:59 hours yesterday. If you enter `stats recipe` you will not see `Rojak` listed in the statistics box."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "If you enter `stats recipe /before 2020-02-13` into the command box, all recipes made prior to 2020-02-13 will be listed in the Statistics box."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "If you enter `stats recipe /after 2020-02-13` into the command box, all recipes made after 2020-02-13 will be listed in the Statistics box."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "If you enter `stats recipe /before 2020-10-31 /after 2020-02-13` into the command box, all recipes made within the period of 2020-02-13 to 2020-10-31 will be listed in the Statistics box."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "If you enter `stats recipe` into the command box without either `[/before \u003cDATE\u003e]` or `[/after \u003cDATE\u003e]`, all recipes made today be listed in the Statistics box."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ":bulb: **Tip:** If you are only interested in what was cooked for dinner, you can specify the time period to the nearest minute. For example, `stats recipe /before 2020-02-13 20:30 /after 2020-02-13 18:30` will show a list of recipes made within this 2-hour period."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"StatsRecipeClearCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.21. Clearing Recipe usage records -- **`stats recipe clear`**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "After you execute this command, the records of recipes that were made are deleted from ChopChop."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "**Usage**: `stats recipe clear`"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003ca name\u003d\"StatsIngredientRecentCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.22. Listing recently used Ingredients— **`stats ingredient recent`**"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Shows a list of ingredients that were used by recipes made recently. The list is arranged in descending chronological order."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Even after the ingredient is deleted, its past usages are still saved within ChopChop, and you will the ingredient listed. However, if you have just cleared your ingredient usage records, there will be no ingredients shown."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "**Usage**: `stats ingredient made`"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003ca name\u003d\"StatsIngredientUsedCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.23. Listing Ingredients used within a given time frame — **`stats ingredient used`**"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Shows a list of ingredients that were used by recipes made recently within the given time frame."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Even after the ingredient is deleted, its past usages are still saved within ChopChop, and you will the ingredient listed. However, if you have just cleared your ingredient usage records, there will be no ingredients shown."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "**Usage**: Similar to the previous command [above](#StatsRecipeMadeCommand), the only difference is the keyword is now `stats ingredient used` instead of `stats recipe made`."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003ca name\u003d\"StatsIngredientClearCommand\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.24. Clearing Ingredient usage records -- **`stats ingredient clear`**"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "After you execute this command, the records of ingredients that were used are deleted from ChopChop."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "**Usage**: `stats ingredient clear`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"CommandSummary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "### 5.25. Command Summary"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "For easy reference, here are the commands that ChopChop supports, listed in alphabetical order. You can click on the name of the command to go to its section in the User Guide."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| Command                                      | Description                                                                | Undoable |"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "|----------------------------------------------|----------------------------------------------------------------------------|----------|"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [add ingredient](#AddIngredientCommand)      | Adds a new ingredient, or increases the quantity of an existing ingredient | **YES**  |"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [add recipe](#AddRecipeCommand)              | Adds a new recipe                                                          | **YES**  |"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [delete ingredient](#DeleteIngredientCommand)| Completely deletes an ingredient, or removes some quantity of it           | **YES**  |"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [delete recipe](#DeleteRecipeCommand)        | Completely deletes a recipe                                                | **YES**  |"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [edit recipe](#EditRecipeCommand)            | Edits an existing recipe                                                   | **YES**  |"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [filter ingredient](#FilterIngredientCommand)| Searches for ingredients by one or more filtering criteria                 | **NO**   |"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [filter recipe](#FilterRecipeCommand)        | Searches for recipes by one or more filtering criteria                     | **NO**   |"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [find ingredient](#FindIngredientCommand)    | Searches for ingredients by their name                                     | **NO**   |"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [find recipe](#FindRecipeCommand)            | Searches for recipes by their name                                         | **NO**   |"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [help](#HelpCommand)                         | Shows help in general, or help for specific commands                       | **NO**   |"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [list ingredient](#ListIngredientCommand)    | Shows the main ingredient list, and clears any search filters              | **NO**   |"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [list recipe](#ListRecipeCommand)            | Shows the main recipe list, and clears any search filters                  | **NO**   |"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [make](#MakeRecipeCommand)                   | Makes a recipe, consuming ingredients and recording statistics             | **YES**  |"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [quit](#QuitCommand)                         | Exits ChopChop                                                             | **NO**   |"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [redo](#RedoCommand)                         | Redoes a command that was previously undone                                | **NO**   |"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [undo](#UndoCommand)                         | Undoes a command that was previously executed                              | **NO**   |"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [view](#ViewCommand)                         | Opens the detailed view for a recipe                                       | **NO**   |"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "| [stats recipe top](#StatsRecipeTopCommand)              | Shows the top recipes                                           | **NO**   |"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "| [stats recipe recent](#StatsRecipeRecentCommand)        | Shows the recently made recipes                                 | **NO**   |"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "| [stats recipe made](#StatsRecipeMadeCommand)            | Shows the recipes made within the given time frame              | **NO**   |"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "| [stats recipe clear](#StatsClearRecipeCommand)          | Clear recipe usage records                                      | **YES**  |"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "| [stats ingredient recent](#StatsIngredientRecentCommand)| Shows the recently used ingredients                             | **NO**   |"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "| [stats ingredient made](#StatsIngredientUsedCommand)    | Shows the ingredient used within the given time frame           | **NO**   |"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "| [stats ingredient clear](#StatsIngredientClearCommand)  | Clear ingredient usage records                                  | **YES**  |"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "-------------------------"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## 6. Quantities and Units"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "In order to keep track of ingredients correctly, ChopChop needs to know about their amounts. Currently, there are 3 \u0027kinds\u0027 of units supported; volume, mass (weight), and counts. These are the supported units specifically:"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `ml`, `mL` — millilitres"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `l`, `L` — litres (1000 ml)"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `cup`, `cups` — metric cup (250 ml)"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `tsp` — metric teaspoon (5 ml)"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `tbsp` — metric tablespoon (15 ml)"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `g` — gram"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `mg` — milligram (0.001 g)"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "- `kg` — kilogram (1000 g)"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Additionally, quantities without a unit are assumed to be dimensionless \u0027counts\u0027; for example, **3 eggs**."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 6.1. Ingredient Combining"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "As mentioned above, ChopChop will combine ingredients when you `add` them, provided they have compatible units. Combining works as you would expect, and is rather flexible; adding `3 cups` of milk to an existing stock of `400ml` will yield `1.15l`."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "However, you cannot, for example, add `300g` of eggs to `4` eggs, as grams and counts are incompatible units."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "--------------------"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003ca name\u003d\"TabCompletion\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "## 7. Tab Completion"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Suppose you wanted to add a recipe for pancakes, and you wanted real, \u003ci\u003eindustrial strength\u003c/i\u003e pancakes (unlike the simplified recipe we\u0027ve been using thus far); the list of ingredients would look something like this:"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "add recipe Pancakes"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient flour /qty 290g"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient egg /qty 1"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient sugar /qty 60g"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient baking powder /qty 4tsp"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient baking soda /qty 0.25tsp"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient salt /qty 3g"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient milk /qty 440ml"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient butter /qty 60g"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /ingredient vanilla extract /qty 2tsp"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /step ..."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "```"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "That certainly seems cumbersome to type out in full, so what if there was a way to speed it up drastically? You can, simply by pressing the \u003ckbd\u003etab\u003c/kbd\u003e key to let ChopChop \u0026ldquo;fill-in-the-blanks\u0026rdquo; for you!"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 7.1. Introduction to Tab Completion"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "Here\u0027s what you can do instead (where \u003ckbd\u003etab\u003c/kbd\u003e represents pressing the tab key):"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cpre\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "a \u003ckbd\u003etab\u003c/kbd\u003e r \u003ckbd\u003etab\u003c/kbd\u003e Pancakes"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e f \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 290g"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e e \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 1"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e su \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 60g"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e baking p \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 4tsp"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e baking s \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 0.25tsp"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e sa \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 3g"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e m \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 440ml"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e bu \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 60g"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "  /i \u003ckbd\u003etab\u003c/kbd\u003e v \u003ckbd\u003etab\u003c/kbd\u003e /q \u003ckbd\u003etab\u003c/kbd\u003e 2tsp"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/pre\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "At just 126 compared to 289 keystrokes, that\u0027s more than a 50% reduction! ChopChop will intelligently fill in commands, parameter names (eg. `/ingredient`), recipe names, ingredient names, and tag names."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "### 7.2. Using Tab Completion"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "How does it work? ChopChop uses the current text when completing and searches for the \u003ci\u003eappropriate\u003c/i\u003e matching items; it knows to look for ingredient names while within an `/ingredient` parameter, and to look for ingredient tags instead of recipe tags when in an `add ingredient` command."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ":information_source: **Note:** For tab completion to work, you must type at least one character before pressing \u003ckdb\u003etab\u003c/kdb\u003e. ChopChop cannot read your mind!"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "What if there are multiple items that share a prefix, for example \u003ci\u003ebaking powder\u003c/i\u003e and \u003ci\u003ebaking soda\u003c/i\u003e in the pancake recipe above? Worry not; pressing \u003ckbd\u003etab\u003c/kbd\u003e \u003ci\u003erepeatedly\u003c/i\u003e will cycle through the available completions, and they are sorted lexicographically (length, followed by alphabetical order) — pressing \u003ckbd\u003etab\u003c/kbd\u003e after `/ingredient b` would give you \u003ci\u003ebutter\u003c/i\u003e, \u003ci\u003ebaking powder\u003c/i\u003e, and \u003ci\u003ebaking soda\u003c/i\u003e, in that order."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "The same thing applies to commands; \u003ccode\u003ef \u003ckbd\u003etab\u003c/kbd\u003e\u003c/code\u003e would cycle between `find` and `filter`."
      }
    ],
    "authorContributionMap": {
      "hjl99": 69,
      "zhiayang": 641,
      "Trav1sT": 67,
      "seowalex": 36,
      "-": 123,
      "fall9x": 135
    }
  },
  {
    "path": "docs/assets/css/style.scss",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Only the main Sass file needs front matter (the dashes are enough)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "@import"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/skins/{{ site.minima.skin | default: \u0027classic\u0027 }}\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \"minima/initialize\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ".icon {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 21px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 21px"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "kbd {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    background-color: #eee;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    border-radius: 3px;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    border: 1px solid #b4b4b4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    box-shadow: 0 1px 1px rgba(0, 0, 0, .2), 0 2px 0 0 rgba(255, 255, 255, .7) inset;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    color: #333;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    font-size: .85em;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    font-weight: 700;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    line-height: 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    padding: 2px 4px;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    white-space: nowrap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 14,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete recipe #1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete recipe #1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteRecipe(recipe)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveRecipeBook(recipeBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seowalex": 4,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "participant \"\u003c\u003cclass\u003e\u003e\\n:CommonParser\" as CommonParser LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "participant \"d:DeleteRecipeCommand\" as DeleteRecipeCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "participant \":HistoryManager\" as HistoryManager LOGIC_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "[-\u003e LogicManager : execute(\"delete recipe #1\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager -\u003e CommandParser : parse(\"delete recipe #1\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommandParser -\u003e CommandParser : parseArgs(\"delete recipe #1\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommandParser --\u003e CommandParser : \"recipe #1\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommandParser -\u003e DeleteCommandParser : parseDeleteCommand(\"recipe #1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteCommandParser -\u003e CommonParser : getCommandTarget(\"recipe #1\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "activate CommonParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommonParser --\u003e DeleteCommandParser : \"recipe\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "deactivate CommonParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommandParser : parseDeleteRecipeCommand(\"recipe\", \"#1\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "create DeleteRecipeCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteCommandParser -\u003e DeleteRecipeCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "activate DeleteRecipeCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteRecipeCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "deactivate DeleteRecipeCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteCommandParser --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteCommandParser --\u003e CommandParser : d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommandParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager -\u003e DeleteRecipeCommand : execute()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "activate DeleteRecipeCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteRecipeCommand -\u003e Model : deleteRecipe(1)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Model --\u003e DeleteRecipeCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteRecipeCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommandResult --\u003e DeleteRecipeCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "DeleteRecipeCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "deactivate DeleteRecipeCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager -\u003e HistoryManager : add(d)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "activate HistoryManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "deactivate HistoryManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seowalex": 42,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class CommandParser"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class CommonParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class ArgName"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class CommandArguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface Undoable \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package History {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface History \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class HistoryManager"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class CommandHistory"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface Logic \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package Storage {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager --\u003e\"1\" CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager --\u003e\"1\" History"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager -right-\u003e Storage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager ..\u003e CommandResult"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommandParser ..\u003e CommonParser"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommandParser ..\u003e XYZCommandParser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommonParser ..\u003e ArgName"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "CommonParser ..\u003e CommandArguments"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "XYZCommandParser ..\u003e ArgName"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "XYZCommandParser ..\u003e CommandArguments"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Command .left.\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "XYZCommand .left.|\u003e Undoable"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "LogicManager ..\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddRecipeCommand, \\nAddIngredientCommand, etc"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "HistoryManager .up.|\u003e History"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "HistoryManager .left.\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "HistoryManager --\u003e\"*\" CommandHistory"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seowalex": 37,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface ReadOnlyEntryBook\u003cT extends Entry\u003e \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface Model \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface ObservableList \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface ReadOnlyUserPrefs \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class EntryBook\u003cT extends Entry\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Package Entry {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class \"{abstract}\\nEntry\" as Entry"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class UniqueEntryList\u003cT extends Entry\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "EntryBook .up.|\u003e ReadOnlyEntryBook"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "ModelManager o--\u003e \"1\" EntryBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "EntryBook *--\u003e \"1\" UniqueEntryList"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "UniqueEntryList o--\u003e \"*\" Entry"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Entry *--\u003e Name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "ModelManager --\u003e\"1\" Entry : filtered list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "seowalex": 14,
      "-": 24
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface Storage \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface RecipeBookStorage \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Interface IngredientBookStorage \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Interface UsageStorage \u003c\u003cinterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class JsonRecipeBookStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "Class JsonIngredientBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Class JsonRecipeUsageStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Class JsonIngredientUsageStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "StorageManager o-up-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "StorageManager o-right-\u003e RecipeBookStorage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "StorageManager o-down-\u003e IngredientBookStorage"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "StorageManager o-right-\u003e UsageStorage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonRecipeBookStorage .left.|\u003e RecipeBookStorage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonRecipeBookStorage .up.\u003e JsonSerializableRecipeBookStorage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonSerializableRecipeBookStorage .right.\u003e JsonSerializableRecipe"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonSerializableRecipe .right.\u003e JsonAdaptedRecipe"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonAdaptedRecipe .down.\u003e JsonAdaptedIngredientReference"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonIngredientBookStorage .left.|\u003e IngredientBookStorage"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonIngredientBookStorage .down.\u003e JsonSerializableIngredientBookStorage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "JsonRecipeUsageStorage .left.|\u003e UsageStorage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "JsonIngredientUsageStorage .left.|\u003e UsageStorage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonSerializableIngredientBookStorage .right.\u003e JsonSerializableIngredient"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonSerializableIngredient .right.\u003e JsonAdaptedIngredient"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonAdaptedIngredient .up.\u003e JsonAdaptedIngredientSet"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "JsonAdaptedIngredient .right.\u003e JsonAdaptedITagSet"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 8,
      "seowalex": 20,
      "-": 14
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class CommandOutput"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class RecipeViewPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class RecipeCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class IngredientViewPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class IngredientCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class DisplayController"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class PinBox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "Class RecipeDisplay"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "MainWindow *-down-\u003e CommandOutput"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "MainWindow *-down-\u003e PinBox"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "MainWindow *-down-\u003e DisplayController"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "DisplayController -down-\u003e RecipeViewPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "DisplayController -down-\u003e IngredientViewPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "DisplayController -down-\u003e RecipeDisplay"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "DisplayController *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "RecipeViewPanel *-down-\u003e RecipeCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "IngredientViewPanel *-down-\u003e IngredientCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "CommandOutput --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "RecipeViewPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "RecipeCard --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "PinBox --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "DisplayController --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "IngredientCard --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "HelpWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "RecipeDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "IngredientViewPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "RecipeCard ..\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "IngredientCard ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "CommandBox -[hidden]left- CommandOutput"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "CommandOutput -[hidden]left- PinBox"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "PinBox -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "RecipeDisplay -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "fall9x": 34
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "skinparam genericDisplay old"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "seowalex": 2,
      "-": 75
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "# ChopChop"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T10-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T10-3/tp/actions)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-3/tp)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "## ChopChop"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is a food recipe management system that aims to make it easier for people to manage their recipes and ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* NUS students living on campus aiming to cook more to save money"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* Home cooks trying to cook a wider variety of meals"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The project is implemented as a command-line application in Java, written primarily in OOP."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* The application is written to be extremely modular, to make it easier for multiple people to contribute to the project at once."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\t* User guides and developer guides are also provided for users and developers to quickly get up to speed on the project"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* The name “ChopChop” comes from a Cantonese phrase that means to “hurry up”, reflecting the speed in which users can use our application to manage their recipes. It’s also related to the act of chopping, a common action in the kitchen."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "* For the detailed documentation of this project, see the ChopChop Product Website."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "For more information, check out **[ChopChop Product Website](https://ay2021s1-cs2103t-t10-3.github.io/tp/)**"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "Trav1sT": 13,
      "-": 8
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "#Tue Sep 29 20:14:37 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/chopchop/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/chopchop/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/chopchop/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.usage.Usage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.storage.JsonIngredientBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.JsonIngredientUsageStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.JsonRecipeUsageStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static MainApp singletonInstance;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        MainApp.singletonInstance \u003d this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ChopChop ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var recipeBookStorage \u003d new JsonRecipeBookStorage(userPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredientBookStorage \u003d new JsonIngredientBookStorage(userPrefs.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var recipeUsageStorage \u003d new JsonRecipeUsageStorage(userPrefs.getRecipeUsageFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredientUsageStorage \u003d new JsonIngredientUsageStorage(userPrefs.getIngredientUsageFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.storage \u003d new StorageManager("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            recipeBookStorage, ingredientBookStorage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            recipeUsageStorage, ingredientUsageStorage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.model \u003d new ModelManager(new EntryBook\u003c\u003e(), new EntryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new UsageList\u003c\u003e(), new UsageList\u003c\u003e(), userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.logic \u003d new LogicManager(this.model, this.storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ui \u003d new UiManager(logic, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void loadEntries() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // now that the UI is up, we can load the actual data. this is so there is a way to display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // loading errors to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.model.setRecipeBook(this.loadEntryBook(\"recipe\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage::readRecipeBook,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            SampleDataUtil::getSampleRecipeBook,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage.getRecipeBookFilePath()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.model.setIngredientBook(this.loadEntryBook(\"ingredient\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage::readIngredientBook,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            SampleDataUtil::getSampleIngredientBook,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage.getIngredientBookFilePath()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.model.setRecipeUsageList(this.loadUsages(\"recipe\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage::readRecipeUsages,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage.getRecipeUsageFilePath()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.model.setIngredientUsageList(this.loadUsages(\"ingredient\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage::readIngredientUsages,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.storage.getIngredientUsageFilePath()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Populates the model with the recipe book loaded from disk. If the json was not found, then"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * sample data is loaded; if the json was invalid, then no data is loaded."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private \u003cT extends Entry\u003e ReadOnlyEntryBook\u003cT\u003e loadEntryBook(String kind,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        EntryBookSupplier\u003cT\u003e loader, Supplier\u003cReadOnlyEntryBook\u003cT\u003e\u003e sampleData, Path path) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var opt \u003d loader.get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (opt.isEmpty()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                logger.info(String.format(\"Data file for %s book not found; starting with sample recipes\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    kind));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.ui.showCommandOutput("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    String.format(\"Could not find existing %ss, loading sample data\", kind),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    /* isError: */ false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return sampleData.get();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return opt.get();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            logger.severe(String.format(\"Data file for %s book was invalid; starting with an empty book\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                kind));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ui.showCommandOutput("
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"Existing %ss were corrupted; starting with empty data.\", kind),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                /* isError: */ true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ui.displayModalDialog(AlertType.ERROR, \"Data Loading Error\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"Failed to load %ss (from \u0027%s\u0027)\", kind, path),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"Note that making any changes here will overwrite any existing %ss\", kind));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return new EntryBook\u003cT\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private \u003cT extends Usage\u003e UsageList\u003cT\u003e loadUsages(String kind, UsageListSupplier\u003cT\u003e loader, Path path) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var opt \u003d loader.get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (opt.isEmpty()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                logger.info(String.format(\"Data file for %s usage list not found\", kind));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return new UsageList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return opt.get();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            logger.severe(String.format(\"Data file for %s usage list was invalid; starting with an empty list\","
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                kind));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ui.showCommandOutput("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"Existing %s usages were corrupted; starting with empty data.\", kind),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                /* isError: */ true"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ui.displayModalDialog(AlertType.ERROR, \"Data Loading Error\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"Failed to load %s usages (from \u0027%s\u0027)\", kind, path),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"Note that making any changes here will overwrite any existing %ss\", kind));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return new UsageList\u003cT\u003e();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        logger.info(\"Starting ChopChop\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ui.start(primaryStage);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we can only load entries after the UI starts!!!!"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.loadEntries();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ChopChop ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.storage.saveUserPrefs(this.model.getUserPrefs());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the singleton instance of the MainApp"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static MainApp the() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return MainApp.singletonInstance;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // dumb stuff."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static interface EntryBookSupplier\u003cT extends Entry\u003e {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cReadOnlyEntryBook\u003cT\u003e\u003e get() throws DataConversionException;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static interface UsageListSupplier\u003cT extends Usage\u003e {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cUsageList\u003cT\u003e\u003e get() throws DataConversionException;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 109,
      "zhiayang": 150,
      "Trav1sT": 18,
      "seowalex": 16,
      "fall9x": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"Current log level : \").append(logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"\\nPreference file Location : \").append(userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "seowalex": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 640;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 928;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"Width : \").append(windowWidth).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"Height : \").append(windowHeight).append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"Position : \").append(windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "seowalex": 4,
      "-": 73,
      "fall9x": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/chopchop/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/chopchop/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "seowalex": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "seowalex": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/Either.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Either.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class that wraps a value of either type L (the \u0027left\u0027 value), or"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * of type R (the \u0027right\u0027 value), but not both at once -- an Either contains only"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * either a left or a right value."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Either\u003cL, R\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final L leftValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final R rightValue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    protected Either(L leftVal, R rightVal) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.leftValue \u003d leftVal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.rightValue \u003d rightVal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert this.leftValue \u003d\u003d null || this.rightValue \u003d\u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the Either contains a left value, false otherwise."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true if this is a left value, false otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isLeft() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.leftValue !\u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the Either contains a right value, false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return True if this is a right value, false otherwise."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isRight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.rightValue !\u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored left value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * right value, throws a NoSuchElementException."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The left value contained in the Either."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a right value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public L fromLeft() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.leftValue)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElseThrow(() -\u003e new NoSuchElementException(\"Either was not left\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored right value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * left value, throws a NoSuchElementException."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The right value contained in the Either."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a left value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public R fromRight() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.rightValue)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElseThrow(() -\u003e new NoSuchElementException(\"Either was not right\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored left value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * right value, returns an empty {@code Optional}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The left value contained in the Either, optionally."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a right value"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cL\u003e fromLeftOpt() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.leftValue);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the stored right value in the Either. If the Either contains a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * left value, returns an empty {@code Optional}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return The right value contained in the Either, optionally."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Either contains a left value"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cR\u003e fromRightOpt() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.ofNullable(this.rightValue);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Maps the given function onto the left value of the Either, returning a new Either with"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the updated left value. If it contains a right value, it returns the Either unmodified."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map with."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new Either with the corresponding value."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cL1\u003e Either\u003cL1, R\u003e mapLeft(Function\u003c? super L, ? extends L1\u003e fn) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isLeft()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Either.left(fn.apply(this.leftValue))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Either.right(this.rightValue);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Maps the given function onto the right value of the Either, returning a new Either with"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the updated right value. If it contains a left value, it returns the Either unmodified."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map with."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the new Either with the corresponding value."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR1\u003e Either\u003cL, R1\u003e mapRight(Function\u003c? super R, ? extends R1\u003e fn) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isRight()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Either.right(fn.apply(this.rightValue))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Either.left(this.leftValue);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Either\u003c?, ?\u003e)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var other \u003d (Either\u003c?, ?\u003e) obj;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Objects.equals(this.leftValue, other.leftValue)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 Objects.equals(this.rightValue, other.rightValue);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s(%s)\","
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.leftValue \u003d\u003d null ? \"Right\" : \"Left\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.leftValue \u003d\u003d null ? this.rightValue : this.leftValue);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an Either containing a left value."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return An Either containing a left value."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cL, R\u003e Either\u003cL, R\u003e left(L l) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Either\u003cL, R\u003e(l, null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an Either containing a right value."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return An Either containing a right value."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cL, R\u003e Either\u003cL, R\u003e right(R r) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Either\u003cL, R\u003e(null, r);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 153,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static final ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 2,
      "seowalex": 1,
      "-": 139
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/Pair.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Pair.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class with two values, of types L and R. No restrictions are"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * imposed on the types or their values."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Pair\u003cT, U\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final T one;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final U two;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Pair with the specified values."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param a the first value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param b the second value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair(T a, U b) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.one \u003d a;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.two \u003d b;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the first value from the pair."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the first value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T fst() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.one;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the second value from the pair."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the second value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public U snd() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.two;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on both values of the pair, returning the new pair;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the original pair is left unmodified. The BiFunction should return"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the new pair."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the values on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cT1, U1\u003e Pair\u003cT1, U1\u003e map(BiFunction\u003c? super T, ? super U, Pair\u003cT1, U1\u003e\u003e fn) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return fn.apply(this.one, this.two);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on only the first value of the pair, returning the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * new pair; the original pair is left unmodified. The second value of"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the pair is returned as-is."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the first value on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cT1\u003e Pair\u003cT1, U\u003e mapFst(Function\u003c? super T, ? extends T1\u003e fn) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT1, U\u003e(fn.apply(this.one), this.two);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a map on only the second value of the pair, returning the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * new pair; the original pair is left unmodified. The first value of"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the pair is returned as-is."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to map the second value on."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new Pair."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cU1\u003e Pair\u003cT, U1\u003e mapSnd(Function\u003c? super U, ? extends U1\u003e fn) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT, U1\u003e(this.one, fn.apply(this.two));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"(%s, %s)\", this.one, this.two);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Pair\u003c?, ?\u003e)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var other \u003d (Pair\u003c?, ?\u003e) obj;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return other.one.equals(this.one)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 other.two.equals(this.two);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a pair, consisting of the provided elements. This exists as a helper method"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * because it\u0027s shorter to type than {@code new Pair\u003c\u003e(a, b)}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fst the first element of the pair"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param snd the second element of the pair"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the new Pair."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T fst, U snd) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003cT, U\u003e(fst, snd);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 108,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/Result.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Result.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The Result class is used to encapsulate the result of some computation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * producing a value of type {@code T} which may or may not fail. It also holds"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a string value describing the reason for the failure or error, if indeed the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * wanted value of {@code T} was not produced successfully."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * In other words, a {@code Result\u003cT\u003e} is an {@code Optional\u003cT\u003e} that also contains"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a reason for the error."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Result\u003cT\u003e extends Either\u003cString, T\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This constructor is private; use the of() and error() methods to create"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Results."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result(T value, String message) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // note that, by convention, an Either\u003cL, R\u003e holds the failure case in the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // left variant, and the success case in the right variant."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(message, value);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the contained value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the contained value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Result was invalid (ie. does not have a value)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T getValue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRight();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the contained value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the contained value, optionally"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cT\u003e getValueOpt() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRightOpt();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether this Result contains a value."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the Result contains a value."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean hasValue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.isRight();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the error message."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the error message"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws NoSuchElementException if the Result was valid (ie. does not have an error message)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getError() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromLeft();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the error message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the error message, optionally"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cString\u003e getErrorOpt() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromLeftOpt();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether this Result contains an error message."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the Result contains an error message."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isError() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.isLeft();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a functor map on the value of this Result, returning a new result"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * with the modified value. If the original result was an error variant, then"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the error message is forwarded unchanged."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to apply"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new result"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR\u003e Result\u003cR\u003e map(Function\u003c? super T, ? extends R\u003e fn) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cR\u003e("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            super.fromRightOpt().map(fn).orElse(null),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            super.fromLeftOpt().orElse(null)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Calls the function with the contained value iff it was not an error. This method is equivalent"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * to {@code map}, but it does not return a new value. Use it to do things to the contained value"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * in the middle of an expression."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the consumer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the result, unmodified."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cT\u003e perform(Consumer\u003c? super T\u003e fn) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.hasValue()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            fn.accept(this.getValue());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Performs a monadic bind (\u003e\u003e\u003d) on the value of this result. This is equivalent to"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code flatMap} in Java (eg. Optional)."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param fn the function to bind; it should return a Result."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return   the new result"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cR\u003e Result\u003cR\u003e then(Function\u003c? super T, ? extends Result\u003c? extends R\u003e\u003e fn) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.hasValue()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // well... this is what the jdk does."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ret \u003d (Result\u003cR\u003e) fn.apply(this.getValue());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return ret;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(this.getError());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If the Result contains a value, return it, otherwise return {@code other}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the alternative value to use"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      either the value contained in the result, or the alternative provided"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public T orElse(T other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.fromRightOpt().orElse(other);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Converts a {@code Result\u003cT\u003e} into an {@code Optional\u003cT\u003e}. If the Result contained an error, it"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is discarded, and an empty optional is returned."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return an Optional version of this result."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cT\u003e toOptional() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isError()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Optional.empty()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Optional.of(this.getValue());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If the result contains an error, throws the exception gotten from the supplier; if not, it returns"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the result unmodified."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sup the supplier of the exception to throw"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the result"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws E  if the result contained an error."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cE extends Throwable\u003e Result\u003cT\u003e throwIfError(Function\u003cString, ? extends E\u003e sup) throws E {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.isError()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw sup.apply(this.getError());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If the result contains an error, throws the exception gotten from the supplier; if not, it returns"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the value in the result."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sup the supplier of the exception to throw"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the contained value in the result (if an exception was not thrown)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws E  if the result contained an error."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public \u003cE extends Throwable\u003e T orElseThrow(Function\u003cString, ? extends E\u003e sup) throws E {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.isError()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw sup.apply(this.getError());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.getValue();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s(%s)\","
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.hasValue() ? \"Result\" : \"Error\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.hasValue() ? this.getValue() : this.getError());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Result\u003c?\u003e)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var other \u003d (Result\u003c?\u003e) obj;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (other.hasValue() !\u003d this.hasValue()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.hasValue()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? this.getValue().equals(other.getValue())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : this.getError().equals(other.getError());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Flattens a result containing another result into just a single-layer result; this does not"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * work recursively (eg. {@code flatten(Result\u003cResult\u003cResult\u003cInt\u003e\u003e\u003e)} will only give you"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code Result\u003cResult\u003cInt\u003e\u003e}."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * NB: I would have liked this to be a non-static method so you could call {@code expr.flatten()},"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * but by the time you have an expression, generics are already type-erased so there is no way to"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * check if the value type (T) is actually a Result or not."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param result the result to flatten"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return       a Result with one level of nesting removed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e flatten(Result\u003cResult\u003cT\u003e\u003e result) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return result.isError()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Result.error(result.getError())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : result.getValue();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Flattens an {@code Optional} containing a {@code Result} into just the optional; if the outer"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * optional was empty, or it was present but the inner result was an error, then an empty optional"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is returned (the error message of the Result, if any, is discarded). Otherwise, it returns"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an optional containing the Result\u0027s value."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param opt the optional to flatten"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the flattened optional."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e flattenOptional(Optional\u003c? extends Result\u003c? extends T\u003e\u003e opt) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return opt.isPresent() \u0026\u0026 opt.get().hasValue()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Optional.of(opt.get().getValue())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Transposes an {@code Optional} containing a {@code Result} into a {@code Result} containing"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an {@code Optional}. If the outer optional was empty, then the result is valid, but contains"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an empty optional. Otherwise, if the inner result contains an error, then a new Result with"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * that error is returned. If not then the inner result\u0027s value is returned as an optional."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      Result(valid: Optional(10))     \u003d transpose(Optional.of(Result.of(10)))"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      Result(error: \"owo\")            \u003d transpose(Optional.of(Result.error(\"owo\")))"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      Result(valid: Optiona(empty))   \u003d transpose(Optional.empty())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param opt the optional to transpose."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    the transposed result."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cOptional\u003cT\u003e\u003e transpose(Optional\u003cResult\u003cT\u003e\u003e opt) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (opt.isEmpty()) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Optional.empty());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (opt.get().isError()) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(opt.get().getError());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Optional.of(opt.get().getValue()));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Extracts an exception from a {@code Result\u003cEither\u003cE, T\u003e\u003e}, where the left {@code Either} is the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exception to throw, and the right side is the value to keep. If the outer {@code Result} contained"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * an error message, then that error message is returned unmodified."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If not, then the inner {@code Either} is inspected; if it was a left variant (ie. a"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code Throwable}), then it is thrown. Else, a Result of the right variant is returned."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param result the result to extract an exception from."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return       the resulting value (if no exception was thrown)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws E     if the result\u0027s inner value was a right-variant Either."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cE extends Throwable, T\u003e Result\u003cT\u003e extractException("
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Result\u003c? extends Either\u003c? extends E, ? extends T\u003e\u003e result) throws E {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (result.isError()) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(result.getError());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var value \u003d result.getValue();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (value.isLeft()) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw value.fromLeft();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.of(value.fromRight());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Collapses a list of results into a result of the list. If any of the results contained"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * within the list was an error, then the first such error is returned; if not, then the"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * returned result is the list."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param list the list to sequence"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     the sequenced list"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cList\u003cT\u003e\u003e sequence(List\u003c? extends Result\u003cT\u003e\u003e list) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var item : list) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (item.isError()) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(item.getError());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ret.add(item.getValue());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(ret);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the first errored result from the given list. This function should be used to check"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * that all the given result types were valid (so you can unconditionally getValue() them)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * In addition, unlike {@code Result::sequence()}, this supports heterogenous result types."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param results the list of results to validate"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return        the first error, or an empty optional if all the results were valid"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Optional\u003cString\u003e firstError(Result... results) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (Result\u003c?\u003e result : results) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (result.isError()) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Optional.of(result.getError());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Collapses the given list of results into either the first error, or, if all the results"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * were valid, returns the result from the supplier. This function should be used to check"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * that all the given result types were valid (so you can unconditionally geValue() them)."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * In addition, unlike {@code Result::sequence()}, this supports heterogenous result types."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sup     the supplier to get the result from if all the inputs were valid"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param results the list of results to validate"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return        the result"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e allOf(Supplier\u003cResult\u003cT\u003e\u003e sup, Result... results) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (Result\u003c?\u003e result : results) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (result.isError()) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(result.getError());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return sup.get();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} containing the successfully-computed value."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a {@code Result} containing the given value"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e of(T value) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(value, null);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} with an error message describing why a value"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * could not be computed."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param message   the error message"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return          a {@code Result} without a value, with the given error message."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e error(String message) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(null, message);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} with an error message describing why a value"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * could not be computed. This version functions like {@code String::format}."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param message   the error message (format string)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args      the variadic format args"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return          a {@code Result} without a value, with the given error message."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e error(String message, Object... args) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(null, String.format(message, args));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} containing the successfully-computed value if it was"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * non-null, or an error result if it was null."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value (may be null)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param error the error message to use if the value was null"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a result."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e ofNullable(T value, String error) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(value, value \u003d\u003d null ? error : null);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new {@code Result} containing the successfully-computed value if the"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * optional contained a value, or the error message if it was empty."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value-containing optional"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param error the error message to use if the optional was empty"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a result."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Result\u003cT\u003e ofOptional(Optional\u003cT\u003e value, String error) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Result\u003cT\u003e(value.orElse(null), value.isPresent() ? null : error);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 425,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/StreamUtils.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StreamUtils.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StreamUtils {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a stream by zipping two streams together. The length of the resulting"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * stream is the minimum of either of the inputs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s1 the first stream to zip"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s2 the second stream to zip"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of Pairs, comprising the elements from each stream."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT, U\u003e Stream\u003cPair\u003cT, U\u003e\u003e zip(Stream\u003cT\u003e s1, Stream\u003cU\u003e s2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i2 \u003d s2.iterator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return s1.map(x1 -\u003e i2.hasNext() ? new Pair\u003c\u003e(x1, i2.next()) : null)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .takeWhile(x -\u003e x !\u003d null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a stream by zipping the input stream together with a stream of indices,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * beginning at 0. This is implemented in terms of zip(). The index is the first"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * item in the pair."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param s the stream to use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Stream of Pairs, with the first item being the 0-based index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static \u003cT\u003e Stream\u003cPair\u003cInteger, T\u003e\u003e indexed(Stream\u003cT\u003e s) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return StreamUtils.zip(Stream.iterate(0, i -\u003e i + 1), s);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 34,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "seowalex": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/StringView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StringView.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A class representing a view over a character array (ie. a String), that allows operations like"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * drop(), take(), substr(), etc. to be implemented efficiently (without copying the underlying data)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The class behaves like an immutable class -- most methods will return a new copy of the StringView"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * with the appropriate bounds (the array itself is not copied), except for one method -- bisect()."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * See the documentation for bisect() to learn why."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StringView {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private char[] chars;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private int begin;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private int end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new string view using the contents of the given string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param string the string to use"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView(String string) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d string.toCharArray();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d this.chars.length;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new string view using the provided array and bounds."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param chars the array of characters to use"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin the starting index (inclusive) of this string view"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param end   the ending index (exclusive) of this string view"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private StringView(char[] chars, int begin, int end) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d chars;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d Math.max(begin, 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d Math.min(end, this.chars.length);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Reseats this string view to point to the given character array and bounds. This method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is required for bisect(), and violates the immutability of the string view."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param chars the array of characters to use"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param begin the starting index (inclusive) of this string view"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param end   the ending index (exclusive) of this string view"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void set(char[] chars, int begin, int end) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.chars \u003d chars;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.begin \u003d begin;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.end   \u003d end;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Reseats this string view to refer to the same array as the given other string view, with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the appropriate bounds etc. This violates the immutability of the string view."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the source string view"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void replaceWith(StringView other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.set(other.chars, other.begin, other.end);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} does not violate any immutability constraints."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a {@code Pair} of string views"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair\u003cStringView, StringView\u003e bisect(char delim) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(x -\u003e x \u003d\u003d delim);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003c\u003e(fst, snd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} will modify both parameters {@code x} and {@code xs}, and will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * replace their contents with the appropriate first and second parts of the split."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * The reason that {@code bisect()} is implemented in this way is to allow writing code in this manner:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      xs.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      var foo \u003d x;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      xs.bisect(x, \u0027 \u0027, xs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *      var bar \u003d x;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * It would not be necessary if this language had some semblance of pattern matching so one could do"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code var (x, xs) \u003d sv.bisect(\u0027 \u0027)}, so we have to live with this."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param x     the view in which to place the first part of the bisection"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs    the view in which to place the second part of the bisection"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void bisect(StringView x, char delim, StringView xs) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(c -\u003e c \u003d\u003d delim);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        x.replaceWith(fst);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.replaceWith(snd);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Bisects this string view into two parts using the given delimiter, by splitting at the first"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * instance of the delimiter in this view. If the delimiter does not exist, the second view returned"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * will be empty, and the first will be a copy of this."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Additionally, the second view will be front-trimmed of extra instances of {@code delim}, if they"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * exist."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * This version of {@code bisect()} will modify the {@code xs} parameter, and will"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * replace its content with the second part of the split. The first part is returned normally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param delim the delimiter to use"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param xs    the view in which to place the second part of the bisection"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the first part of the bisection"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView bisect(char delim, StringView xs) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var fst \u003d this.take(this.find(delim));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var snd \u003d this.drop(fst.size() + 1).dropWhile(c -\u003e c \u003d\u003d delim);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        xs.replaceWith(snd);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return fst;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the size of the string view."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the size"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.end - this.begin;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view is empty."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the view is empty"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the substring occurs."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index at which the given substring first occurs,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *         or {@code -1} if it does not exist"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(String sub) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(new StringView(sub));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the substring occurs."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index at which the given substring first occurs,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *         or {@code -1} if it does not exist"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(StringView sub) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var l1 \u003d new ArrayList\u003cCharacter\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var l2 \u003d new ArrayList\u003cCharacter\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // FFS java, FFS"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (char c : this.chars) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            l1.add(c);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (char c : sub.chars) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            l2.add(c);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Collections.indexOfSubList(l1.subList(this.begin, this.end),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            l2.subList(sub.begin, sub.end));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds the first index at which the character occurs."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param ch the character to search for"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the index of the character, or {@code -1} if it does not exist."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int find(char ch) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (int i \u003d this.begin; i \u003c this.end; i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.chars[i] \u003d\u003d ch) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return i - this.begin;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view starts with the given substring. This is equivalent to"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code sv.find(sub) \u003d\u003d 0}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff this string view starts with the substring."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean startsWith(String sub) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(sub) \u003d\u003d 0;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks if the string view starts with the given substring. This is equivalent to"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code sv.find(sub) \u003d\u003d 0}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param sub the substring to search for"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff this string view starts with the substring."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean startsWith(StringView sub) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.find(sub) \u003d\u003d 0;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Obtains the character at the given index."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param idx the index"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return the character"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public char at(int idx) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.chars[this.begin + idx];"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the first character; view must not be empty."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public char front() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IndexOutOfBoundsException(\"empty StringView\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.at(0);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the last character; view must not be empty."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public char back() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IndexOutOfBoundsException(\"empty StringView\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.at(this.size() - 1);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, without the first {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view, then an empty view is returned. {@code n} cannot be negative."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to drop."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view without the first {@code n} characters."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView drop(int n) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (n \u003c 0) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IndexOutOfBoundsException(\"cannot drop negative number of chars\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.min(this.begin + n, this.end), this.end);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, with only the first {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view or is negative, then a copy of this view is returned."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to take."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view with only first {@code n} characters."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView take(int n) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (n \u003c 0) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n \u003d this.size();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, this.begin, Math.min(this.begin + n, this.end));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new string view, with only the last {@code n} characters. If {@code n} is larger"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * than the size of this view, then a copy of this view is returned. {@code n} cannot be negative."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to take."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view with only the last {@code n} characters."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView takeLast(int n) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (n \u003c 0) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IndexOutOfBoundsException(\"cannot takeLast negative number of chars\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.max(this.end - n, 0), this.end);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view by dropping characters as long as the given predicate holds true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * at the first instance where the predicate returns true, the string is returned."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView dropWhile(Predicate\u003c? super Character\u003e pred) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int i \u003d this.begin;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (i \u003c this.end \u0026\u0026 pred.test(this.chars[i])) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, i, this.end);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view by taking characters as long as the given predicate holds true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * at the first instance where the predicate returns false, the string is returned."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView takeWhile(Predicate\u003c? super Character\u003e pred) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int n \u003d this.begin;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (n \u003c this.end \u0026\u0026 pred.test(this.chars[n])) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            n +\u003d 1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, this.begin, n);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a pair of string views; the first one is equivalent to {@code this.takeWhile(pred)}, and"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the second one is equivalent to {@code this.dropWhile(pred)}. Essentially this splits a string"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * into two based on the predicate."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param pred the predicate to use"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a pair of string views"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Pair\u003cStringView, StringView\u003e span(Predicate\u003c? super Character\u003e pred) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Pair\u003c\u003e("
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.takeWhile(pred),"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.dropWhile(pred)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Removes whitespace from both the beginning and the end of the string view. \u0027Whitespace\u0027 is"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * determined by calling {@code Character::isWhitespace}."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView trim() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // there\u0027s a more efficient way, but i don\u0027t want to write dropWhileBack() right now."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.toString().strip());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a new view containing {@code n} characters at the front which were previously dropped."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * For example:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *     var sv \u003d StringView(\"asdf\").drop(1);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *     assert sv.undrop(1).equals(\"asdf\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param n the number of characters to undrop"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a new string view"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView undrop(int n) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.chars, Math.max(0, this.begin - n), this.end);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a lowercase version of this string view."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView lowercase() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.toString().toLowerCase());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns an uppercase version of this string view."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StringView uppercase() {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.toString().toUpperCase());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Splits the given stringview into a list of words by using the given predicate."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e splitBy(Predicate\u003c? super Character\u003e predicate) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv \u003d this;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (!sv.isEmpty()) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            sv \u003d sv.dropWhile(predicate);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var word \u003d sv.takeWhile(x -\u003e !predicate.test(x));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (!word.isEmpty()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ret.add(word.toString());"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            sv \u003d sv.dropWhile(x -\u003e !predicate.test(x));"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Splits the given stringview into a list of words by whitespace. Equivalent"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * to splitBy(c -\u003e Character.isWhitespace(c));"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e words() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.splitBy(c -\u003e Character.isWhitespace(c));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Attempt to parse an integer from the contents of this string view."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Result containing either the parsed integer, or an error message."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cInteger\u003e parseInt() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Integer.parseInt(this.toString()));"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Couldn\u0027t parse integer: \" + e.getMessage());"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Attempt to parse a double from the contents of this string view."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return a Result containing either the parsed double, or an error message."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cDouble\u003e parseDouble() {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(Double.parseDouble(this.toString()));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(e.getMessage());"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new String(this.chars, this.begin, this.size());"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Provides operator\u003d\u003d for StringView. This method works for both {@code String} instances"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * as well as {@code StringView} instances."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param obj the object to compare"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return true iff the string contents are equal"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (obj instanceof String) {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var other \u003d (String) obj;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Arrays.equals("
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.chars, this.begin, this.end,"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                other.toCharArray(), 0, other.length()"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (obj instanceof StringView) {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var other \u003d (StringView) obj;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Arrays.equals("
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.chars, this.begin, this.end,"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                other.chars, other.begin, other.end"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 494,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/commons/util/Strings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Strings.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Defines user-facing strings for the whole program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Strings {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // misc things"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String USER_GUIDE_BASE_URL  \u003d \"https://ay2021s1-cs2103t-t10-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // argument names"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_STEP            \u003d new ArgName(\"step\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_INGREDIENT      \u003d new ArgName(\"ingredient\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_QUANTITY        \u003d new ArgName(\"qty\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_EXPIRY          \u003d new ArgName(\"expiry\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final ArgName ARG_TAG             \u003d new ArgName(\"tag\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ArgName ARG_NAME            \u003d new ArgName(\"name\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final ArgName ARG_AFTER           \u003d new ArgName(\"after\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final ArgName ARG_BEFORE          \u003d new ArgName(\"before\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // command names"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_ADD          \u003d \"add\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_HELP         \u003d \"help\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_LIST         \u003d \"list\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_EDIT         \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_FIND         \u003d \"find\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String COMMAND_FILTER       \u003d \"filter\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_QUIT         \u003d \"quit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String COMMAND_DELETE       \u003d \"delete\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String COMMAND_MAKE         \u003d \"make\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String COMMAND_UNDO         \u003d \"undo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String COMMAND_REDO         \u003d \"redo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String COMMAND_STATS        \u003d \"stats\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String COMMAND_VIEW         \u003d \"view\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final List\u003cString\u003e COMMAND_NAMES \u003d List.of("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_ADD,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_HELP,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_LIST,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_FIND,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        COMMAND_FILTER,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_EDIT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_QUIT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_DELETE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_MAKE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_UNDO,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        COMMAND_REDO,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        COMMAND_STATS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_VIEW"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String STATS_KIND_TOP       \u003d \"top\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String STATS_KIND_USED      \u003d \"used\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String STATS_KIND_MADE      \u003d \"made\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String STATS_KIND_CLEAR     \u003d \"clear\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final String STATS_KIND_RECENT    \u003d \"recent\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 9,
      "zhiayang": 44,
      "Trav1sT": 6,
      "seowalex": 4,
      "fall9x": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Computes the completion for the given user input. If there is no completion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * available, the string is returned as-is."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param commandText the command"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return            the auto-completed input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    String getCompletionForInput(String commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Resets the autocompleter\u0027s internal state. This function should be called when"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the text field is modified by the user."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void resetCompletionState();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the RecipeBook."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    ReadOnlyEntryBook\u003cRecipe\u003e getRecipeBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the IngredientBook."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    ReadOnlyEntryBook\u003cIngredient\u003e getIngredientBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of recipes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns an unmodifiable view of the filtered ingredient list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the input history."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    List\u003cString\u003e getInputHistory();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the input history filtered by a prefix."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    List\u003cString\u003e getInputHistory(String prefix);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns an unmodifiable view of the recommended recipe list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    FilteredList\u003cRecipe\u003e getRecommendedRecipeList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns an unmodifiable view of the recommended recipe list that have ingredients that expire soon."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    FilteredList\u003cRecipe\u003e getExpiringRecipeList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 17,
      "seowalex": 31,
      "fall9x": 56
    }
  },
  {
    "path": "src/main/java/chopchop/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.autocomplete.AutoCompleter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.Undoable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.recommendation.RecommendationManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * The main LogicManager governing the logic in the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final HistoryManager historyManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final RecommendationManager recommendationManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final CommandParser parser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final AutoCompleter completer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.historyManager \u003d new HistoryManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recommendationManager \u003d new RecommendationManager(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.completer \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the specified command based on the commandText."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.historyManager.addInput(commandText);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var res \u003d this.parser.parse(commandText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (res.isError()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new ParseException(res.getError());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cmd \u003d res.getValue();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var result \u003d cmd.execute(this.model, this.historyManager);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (cmd instanceof Undoable) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.historyManager.addCommand((Undoable) cmd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.storage.saveRecipeUsages(this.model.getRecipeUsageList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.storage.saveIngredientUsages(this.model.getIngredientUsageList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.storage.saveIngredientBook(this.model.getIngredientBook());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.storage.saveRecipeBook(this.model.getRecipeBook());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getCompletionForInput(String commandText) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.completer.getCompletionForInput(this.parser, this.model, commandText);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void resetCompletionState() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.completer.resetCompletionState();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ReadOnlyEntryBook\u003cRecipe\u003e getRecipeBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.model.getRecipeBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.model.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ReadOnlyEntryBook\u003cIngredient\u003e getIngredientBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.model.getIngredientBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.model.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public List\u003cString\u003e getInputHistory() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.historyManager.getInputHistory();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public List\u003cString\u003e getInputHistory(String prefix) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.historyManager.getInputHistory(prefix);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public FilteredList\u003cRecipe\u003e getRecommendedRecipeList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recommendationManager.getRecommendedRecipeList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public FilteredList\u003cRecipe\u003e getExpiringRecipeList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recommendationManager.getExpiringRecipeList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.model.getGuiSettings();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 24,
      "Trav1sT": 4,
      "seowalex": 64,
      "fall9x": 63
    }
  },
  {
    "path": "src/main/java/chopchop/logic/autocomplete/AutoCompleter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// AutoCompleter.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.autocomplete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Strings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.CommandTarget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class AutoCompleter {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AutoCompleter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private int lastCompletionIndex \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cString\u003e lastViableCompletions \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Resets the internal state of the completer, namely the last-provided completion. When"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the user types into the text field, we should restart the completion cycling."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void resetCompletionState() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.lastCompletionIndex \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.lastViableCompletions \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Computes the completion for the given user input. If there is no completion"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * available, the string is returned as-is."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param parser the command parser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param model  the model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param orig   the input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return       the auto-completed input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getCompletionForInput(CommandParser parser, Model model, String orig) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // can\u0027t read your mind."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (orig.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return orig;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // first, try to parse the arguments. this doesn\u0027t run the command-specific parser,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // just the one that splits arguments."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var res \u003d parser.parseArgs(orig);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (res.isError()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return orig;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var statsRecipeKinds \u003d List.of(Strings.STATS_KIND_TOP, Strings.STATS_KIND_MADE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.STATS_KIND_CLEAR, Strings.STATS_KIND_RECENT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var statsIngredientKinds \u003d List.of(Strings.STATS_KIND_USED, Strings.STATS_KIND_CLEAR,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.STATS_KIND_RECENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var args \u003d res.getValue();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var req \u003d getRequiredCompletion(args, orig);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        logger.info(String.format(\"completing: %s\", req));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        switch (req) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case COMMAND_NAME:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeCommand(args, orig, /* nested: */ false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case TARGET_NAME:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeTarget(args, orig, /* nested: */ false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case NESTED_COMMAND_NAME:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeCommand(args, orig, /* nested: */ true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case NESTED_TARGET_NAME:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeTarget(args, orig, /* nested: */ true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case ARGUMENT_NAME:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeArgument(args, orig);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case RECIPE_NAME: // fallthrough"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case RECIPE_NAME_IN_ARG:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeRecipe(req, model, args, orig);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case INGREDIENT_NAME: // fallthrough"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case INGREDIENT_NAME_IN_ARG:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeIngredient(req, model, args, orig);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case COMPONENT_NAME:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeArgComponent(args, orig);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case TAG_NAME:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeTag(model, args, orig);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case STATS_RECIPE_KIND_NAME:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeStatsKind(args, orig, statsRecipeKinds, /* nested: */ false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case STATS_INGREDIENT_KIND_NAME:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeStatsKind(args, orig, statsIngredientKinds, /* nested: */ false);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case NESTED_STATS_RECIPE_KIND_NAME:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeStatsKind(args, orig, statsRecipeKinds, /* nested: */ true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case NESTED_STATS_INGREDIENT_KIND_NAME:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return completeStatsKind(args, orig, statsIngredientKinds, /* nested: */ true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case NONE: // fallthrough"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return orig;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a completion for the command only."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeCommand(CommandArguments args, String orig, boolean nested) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var partial \u003d nested"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? args.getFirstWordFromRemaining()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : args.getCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var valids \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var cmd : Strings.COMMAND_NAMES) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (cmd.startsWith(partial)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                valids.add(cmd);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        valids.sort((a, b) -\u003e a.length() - b.length());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.lastViableCompletions \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.lastViableCompletions \u003d new ArrayList\u003cString\u003e(valids);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.lastViableCompletions.isEmpty()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return orig;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // this should always hold, because:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // (a) we always perform the modulo at the end"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // (b) the list of viableCompletions should not change as long as the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            //     internal state is not reset"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // (c) if \u0027partial\u0027 changed due to user input, then we are supposed to be reset."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert this.lastCompletionIndex \u003c this.lastViableCompletions.size();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var completion \u003d this.lastViableCompletions.get(this.lastCompletionIndex);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.lastCompletionIndex \u003d (this.lastCompletionIndex + 1) % this.lastViableCompletions.size();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (nested) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // now this is a little complicated; split the input into two pieces; the first being"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // everything occurring before \"partial\" (this is the only part we want)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var idx \u003d orig.lastIndexOf(partial);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var prefix \u003d orig.substring(0, idx);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return prefix + completion + \" \";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // if we\u0027re not nested, then we\u0027re guaranteed that the command must happen at the beginning of"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // the input, so we can just return the completion as-is."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return completion + \" \";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a completion for the target only."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeTarget(CommandArguments args, String orig, boolean nested) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String partial \u003d \"\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (nested) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var words \u003d new StringView(args.getRemaining()).words();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (words.size() \u003c 2) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return orig;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            partial \u003d words.get(1);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            partial \u003d args.getFirstWordFromRemaining();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var valids \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var tgt : CommandTarget.values()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (tgt.toString().startsWith(partial)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // only suggest \u0027recommendation\u0027 for the \u0027list\u0027 command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (!tgt.equals(CommandTarget.RECOMMENDATION)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    || args.getCommand().equals(Strings.COMMAND_LIST)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    valids.add(tgt.toString());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        valids.sort((a, b) -\u003e a.length() - b.length());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.lastViableCompletions \u003d\u003d null) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.lastViableCompletions \u003d new ArrayList\u003cString\u003e(valids);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var allExceptLast \u003d orig.stripTrailing().substring(0,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            orig.stripTrailing().length() - partial.length());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.lastViableCompletions.isEmpty()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return orig;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // see the note in completeCommand (\u0027this should always hold, because...\u0027)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert this.lastCompletionIndex \u003c this.lastViableCompletions.size();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var completion \u003d this.lastViableCompletions.get(this.lastCompletionIndex);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.lastCompletionIndex \u003d (this.lastCompletionIndex + 1) % this.lastViableCompletions.size();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return allExceptLast + completion + \" \";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeTag(Model model, CommandArguments args, String orig) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert args.getAllArguments().size() \u003e 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var lastArg \u003d args.getAllArguments().get(args.getAllArguments().size() - 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var partial \u003d lastArg.snd();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandTarget.of(args.getFirstWordFromRemaining())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .flatMap(target -\u003e {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                List\u003cString\u003e tags \u003d List.of();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (target \u003d\u003d CommandTarget.RECIPE) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    tags \u003d getAllRecipeTags(model);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else if (target \u003d\u003d CommandTarget.INGREDIENT) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    tags \u003d getAllIngredientTags(model);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Optional.empty();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return tryCompletionUsing(tags, orig, partial);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            })"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(orig);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a completion for {@code \u003cx\u003e} in {@code stats (ingredient|recipe) \u003cx\u003e}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Since each \"kind\" is uniquely prefixed (T, U, M, C, R), we don\u0027t have to care about cycling."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeStatsKind(CommandArguments args, String orig, List\u003cString\u003e valids, boolean nested) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xs \u003d new StringView(args.getRemaining()).words();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((nested \u0026\u0026 xs.size() !\u003d 3) || (!nested \u0026\u0026 xs.size() !\u003d 2)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return orig;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var partial \u003d nested"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? xs.get(2)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : xs.get(1);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return tryCompletionUsing(valids, orig, partial)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(orig);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a completion for the argument name only."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeArgument(CommandArguments args, String orig) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert args.getAllArguments().size() \u003e 0;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var lastArg \u003d args.getAllArguments().get(args.getAllArguments().size() - 1);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var partial \u003d lastArg.fst().name();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we could complete all arguments for you, but we can do something a little smarter"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // by looking at the current command+target combo to get the valid arguments."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cmd \u003d args.getCommand();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tgt \u003d args.getFirstWordFromRemaining();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var validArguments \u003d new ArrayList\u003cArgName\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (cmd.equals(Strings.COMMAND_ADD)) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (tgt.equals(CommandTarget.RECIPE.toString())) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_INGREDIENT);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_QUANTITY);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_STEP);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_TAG);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (tgt.equals(CommandTarget.INGREDIENT.toString())) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_QUANTITY);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_EXPIRY);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_TAG);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (cmd.equals(Strings.COMMAND_EDIT)) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (tgt.equals(CommandTarget.RECIPE.toString())) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return completeEditRecipeArguments(args, partial, orig);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (cmd.equals(Strings.COMMAND_DELETE)) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (tgt.equals(CommandTarget.INGREDIENT.toString())) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_QUANTITY);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (cmd.equals(Strings.COMMAND_FILTER)) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (tgt.equals(CommandTarget.RECIPE.toString())) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_TAG);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_INGREDIENT);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (tgt.equals(CommandTarget.INGREDIENT.toString())) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_TAG);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                validArguments.add(Strings.ARG_EXPIRY);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return tryCompletionUsing(getArgNames(validArguments), orig, partial)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(orig);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cString\u003e getValidEditOps(String arg) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (Strings.ARG_INGREDIENT.nameEquals(arg) || Strings.ARG_STEP.nameEquals(arg)) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return List.of(\"add\", \"edit\", \"delete\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (Strings.ARG_TAG.nameEquals(arg)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return List.of(\"add\", \"delete\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return List.of();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeArgComponent(CommandArguments args, String orig) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert args.getAllArguments().size() \u003e 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var last \u003d args.getAllArguments().get(args.getAllArguments().size() - 1);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var comps \u003d last.fst().getComponents();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var argname \u003d last.fst();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // for now, there\u0027s only 2 components max, and the last component is always the index."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (comps.isEmpty() || comps.size() \u003e 1) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return orig;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var partial \u003d comps.get(comps.size() - 1);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var valids \u003d getValidEditOps(argname.name());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return tryCompletionUsing(valids, orig, partial, /* appending: */ \"\")"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(comp -\u003e {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (comp.endsWith(\":\")) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return comp;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (argname.nameEquals(Strings.ARG_STEP)) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    if (comp.endsWith(\"edit\") || comp.endsWith(\"delete\")) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return comp + \":\";"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return comp + \" \";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            })"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(orig);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeEditRecipeArguments(CommandArguments args, String partial, String orig) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // oof."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var opt \u003d tryCompletionUsing(getArgNames(Strings.ARG_NAME, Strings.ARG_QUANTITY), orig, partial);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (opt.isPresent()) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return opt.get();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return tryCompletionUsing(getArgNames(Strings.ARG_TAG, Strings.ARG_INGREDIENT, Strings.ARG_STEP),"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            orig, partial, /* appending: */ \":\")"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .orElse(orig);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private \u003cT extends Entry\u003e Optional\u003cString\u003e completeNamedItem(RequiredCompletion req, CommandArguments args,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String orig, List\u003cT\u003e entries) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var words \u003d new StringView(orig).words();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert !words.isEmpty();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String partial \u003d \"\";"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (req \u003d\u003d RequiredCompletion.RECIPE_NAME_IN_ARG || req \u003d\u003d RequiredCompletion.INGREDIENT_NAME_IN_ARG) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // get the last argument."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var arglist \u003d args.getAllArguments();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (arglist.isEmpty()) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var last \u003d arglist.get(arglist.size() - 1);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            partial \u003d last.snd();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (commandRequiresTarget(args.getCommand())) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var split \u003d new StringView(args.getRemaining()).bisect(\u0027 \u0027);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (split.snd().isEmpty()) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Optional.empty();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                partial \u003d split.snd().toString();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                partial \u003d args.getRemaining();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // the entire command string *except* the partial item name."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var allExceptLast \u003d orig.stripTrailing().substring(0,"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            orig.stripTrailing().length() - partial.length());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // make a copy of the list, then sort by name length."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sortedList \u003d new ArrayList\u003c\u003e(entries);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        sortedList.sort((a, b) -\u003e {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return a.getName().length() - b.getName().length();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.lastViableCompletions \u003d\u003d null) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.lastViableCompletions \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            for (var entry : sortedList) {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var name \u003d entry.getName();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (name.toLowerCase().startsWith(partial)) {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    this.lastViableCompletions.add(name);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.lastViableCompletions.isEmpty()) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // see the note in completeCommand (\u0027this should always hold, because...\u0027)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert this.lastCompletionIndex \u003c this.lastViableCompletions.size();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var completion \u003d this.lastViableCompletions.get(this.lastCompletionIndex);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.lastCompletionIndex \u003d (this.lastCompletionIndex + 1) % this.lastViableCompletions.size();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Optional.of(allExceptLast + completion + \" \");"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a completion for the recipe name only."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeRecipe(RequiredCompletion req, Model model, CommandArguments args, String orig) {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return completeNamedItem(req, args, orig, model.getRecipeBook().getEntryList())"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(orig);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a completion for the ingredient name only."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String completeIngredient(RequiredCompletion req, Model model, CommandArguments args, String orig) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return completeNamedItem(req, args, orig, model.getIngredientBook().getEntryList())"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(orig);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the required kind of completion for the current state of the user input."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private RequiredCompletion getRequiredCompletion(CommandArguments args, String orig) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (args.getAllArguments().isEmpty()) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // if there\u0027s no remaining bits, then you clearly want the command name."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (args.getRemaining().isEmpty()) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return RequiredCompletion.COMMAND_NAME;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var cmd \u003d args.getCommand();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var sv \u003d new StringView(args.getRemaining());"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var words \u003d sv.words();"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (commandRequiresTarget(cmd) \u0026\u0026 words.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return RequiredCompletion.TARGET_NAME;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // the help command needs another command."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (cmd.equals(Strings.COMMAND_HELP)) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // this is tricky. first, get the command you want help for:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var helpedCmd \u003d args.getFirstWordFromRemaining();"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (commandRequiresTarget(helpedCmd) \u0026\u0026 words.size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.NESTED_TARGET_NAME;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else if (helpedCmd.equals(Strings.COMMAND_STATS) \u0026\u0026 words.size() \u003e 2) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var target \u003d words.get(1);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return CommandTarget.of(target)"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        .map(tgt -\u003e {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            switch (tgt) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            case RECIPE:"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                return RequiredCompletion.NESTED_STATS_RECIPE_KIND_NAME;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            case INGREDIENT:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                return RequiredCompletion.NESTED_STATS_INGREDIENT_KIND_NAME;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            default:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                return RequiredCompletion.NONE;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        }).orElse(RequiredCompletion.NONE);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return RequiredCompletion.NESTED_COMMAND_NAME;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (commandRequiresTarget(cmd)) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var target \u003d args.getFirstWordFromRemaining();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return CommandTarget.of(target)"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .map(tgt -\u003e {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        switch (tgt) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        case RECIPE:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            // we don\u0027t let you autocomplete recipe names when adding them"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            // -- only for ingredients."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            if (cmd.equals(Strings.COMMAND_ADD)) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                return RequiredCompletion.NONE;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            } else if (cmd.equals(Strings.COMMAND_STATS)) {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                return RequiredCompletion.STATS_RECIPE_KIND_NAME;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            return RequiredCompletion.RECIPE_NAME;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        case INGREDIENT:"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            if (cmd.equals(Strings.COMMAND_STATS)) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                return RequiredCompletion.STATS_INGREDIENT_KIND_NAME;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            return RequiredCompletion.INGREDIENT_NAME;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        default:"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            return RequiredCompletion.NONE;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }).orElse(RequiredCompletion.NONE);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (commandRequiresItemReference(cmd)) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (cmd.equals(Strings.COMMAND_MAKE) || cmd.equals(Strings.COMMAND_VIEW)) {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.RECIPE_NAME;"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.NONE;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return RequiredCompletion.NONE;"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // get the last argument."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // congratulations, it\u0027s 2020 and your dumb langauge collection library"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // has neither a front() nor back() method."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var last \u003d args.getAllArguments().get(args.getAllArguments().size() - 1);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var lastArg \u003d last.fst();"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var lastVal \u003d last.snd();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (!lastVal.isEmpty()) {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // now we should check what the name is."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (lastArg.nameEquals(Strings.ARG_INGREDIENT)) {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.INGREDIENT_NAME_IN_ARG;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else if (lastArg.nameEquals(Strings.ARG_TAG)) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.TAG_NAME;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.NONE;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (orig.endsWith(\" \")) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // a bit dirty, but if the last char in the raw input was a space,"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // then we shouldn\u0027t complete anything (since the argument name was"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // already finished."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return RequiredCompletion.NONE;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // check if the argument had components"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (lastArg.getComponents().size() \u003e 0) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.COMPONENT_NAME;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    // complete the argument name."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return RequiredCompletion.ARGUMENT_NAME;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Optional\u003cString\u003e tryCompletionUsing(List\u003cString\u003e candidates, String orig, String partial,"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String appending) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var arg : candidates) {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (arg.equals(partial)) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Optional.of(orig);"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (arg.startsWith(partial)) {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Optional.of(orig + arg.substring(partial.length()) + appending);"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Optional\u003cString\u003e tryCompletionUsing(List\u003cString\u003e candidates, String orig, String partial) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return tryCompletionUsing(candidates, orig, partial, \" \");"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private \u003cT extends Entry\u003e List\u003cString\u003e getAllTags(List\u003cT\u003e entries) {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ArrayList\u003c\u003e(new HashSet\u003c\u003e(entries.stream()"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .flatMap(e -\u003e e.getTags().stream())"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(t -\u003e t.toString())"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cString\u003e getAllIngredientTags(Model model) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getAllTags(model.getIngredientBook().getEntryList());"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cString\u003e getAllRecipeTags(Model model) {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getAllTags(model.getRecipeBook().getEntryList());"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @SafeVarargs"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cString\u003e getArgNames(ArgName... args) {"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Arrays.stream(args).map(ArgName::name).collect(Collectors.toList());"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cString\u003e getArgNames(List\u003cArgName\u003e args) {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return args.stream().map(ArgName::name).collect(Collectors.toList());"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean commandRequiresTarget(String commandName) {"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return List.of("
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_ADD,"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_LIST,"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_FIND,"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_EDIT,"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_STATS,"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_FILTER,"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_DELETE"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ).indexOf(commandName) \u003e\u003d 0;"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private boolean commandRequiresItemReference(String commandName) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return List.of("
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_ADD,"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_MAKE,"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_EDIT,"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_VIEW,"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Strings.COMMAND_DELETE"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ).indexOf(commandName) \u003e\u003d 0;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    enum RequiredCompletion {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        NONE,"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMMAND_NAME,"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        TARGET_NAME,"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ARGUMENT_NAME,"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        RECIPE_NAME,"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        INGREDIENT_NAME,"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        RECIPE_NAME_IN_ARG,"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        INGREDIENT_NAME_IN_ARG,"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        COMPONENT_NAME,"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        TAG_NAME,"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        STATS_RECIPE_KIND_NAME,"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        STATS_INGREDIENT_KIND_NAME,"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        NESTED_STATS_RECIPE_KIND_NAME,"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        NESTED_STATS_INGREDIENT_KIND_NAME,"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        NESTED_COMMAND_NAME,"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        NESTED_TARGET_NAME"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 704
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/AddIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Adds an ingredient to the ingredient book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class AddIngredientCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Optional\u003cQuantity\u003e quantity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Optional\u003cExpiryDate\u003e expiryDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Ingredient addedIngredient;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Ingredient existingIngredient;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Ingredient combinedIngredient;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a command to add an ingredient with the given parts."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public AddIngredientCommand(String name, Optional\u003cQuantity\u003e qty, Optional\u003cExpiryDate\u003e exp, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireAllNonNull(name, qty, exp, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.quantity \u003d qty;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.expiryDate \u003d exp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // first create the ingredient."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.addedIngredient \u003d new Ingredient(this.name, this.quantity, this.expiryDate, this.tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var existingIngredientOptional \u003d model.findIngredientWithName(this.addedIngredient.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (existingIngredientOptional.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.existingIngredient \u003d existingIngredientOptional.get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.combinedIngredient \u003d this.existingIngredient.combine(this.addedIngredient);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                model.setIngredient(this.existingIngredient, this.combinedIngredient);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } catch (IncompatibleIngredientsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return CommandResult.error(\"Could not add %s of \u0027%s\u0027: \" + e.getMessage(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    this.addedIngredient.getQuantity(), this.addedIngredient.getName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.message(\"Updated ingredient \u0027%s\u0027\", this.combinedIngredient.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            model.addIngredient(this.addedIngredient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.message(\"Added ingredient \u0027%s\u0027\", this.addedIngredient.getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String action \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Ingredient ingr \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.existingIngredient \u003d\u003d null \u0026\u0026 this.combinedIngredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            model.deleteIngredient(this.addedIngredient);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ingr \u003d this.addedIngredient;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            action \u003d \"removed\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            model.setIngredient(this.combinedIngredient, this.existingIngredient);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ingr \u003d this.existingIngredient;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            action \u003d \"updated\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Undo: %s ingredient \u0027%s\u0027\", action, ingr.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof AddIngredientCommand)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var other \u003d (AddIngredientCommand) obj;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Objects.equals(this.name, other.name)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 Objects.equals(this.quantity, other.quantity)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 Objects.equals(this.expiryDate, other.expiryDate)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 Objects.equals(this.tags, other.tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"AddIngredientCommand: %s (%s)%s\", this.name,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.quantity.orElse(Count.of(1)), this.expiryDate"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .map(e -\u003e String.format(\" \u003cExpiry Date: %s\u003e\", e)).orElse(\"\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"add ingredient\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Adds a new ingredient, or increases the quantity of an existing ingredient\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 86,
      "Trav1sT": 16,
      "seowalex": 27
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/AddRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Adds a recipe to the recipe book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class AddRecipeCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cIngredientReference\u003e ingredients;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a command to add a recipe with the following name, steps, ingredients, and tags."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public AddRecipeCommand(String name, List\u003cIngredientReference\u003e ingredients, List\u003cStep\u003e steps, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipe \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ingredients \u003d new ArrayList\u003c\u003e(ingredients);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.steps \u003d new ArrayList\u003c\u003e(steps);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (model.findRecipeWithName(this.name).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(\"Recipe \u0027%s\u0027 already exists\", this.name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // first, ensure that the ingredients are unique."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var seenIngredients \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            for (var ingr : this.ingredients) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (seenIngredients.contains(ingr.getName())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return CommandResult.error(\"Ingredient \u0027%s\u0027 was specified twice\", ingr.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                seenIngredients.add(ingr.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // then make the recipe."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipe \u003d new Recipe(this.name, this.ingredients, this.steps, this.tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        model.addRecipe(this.recipe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Added recipe \u0027%s\u0027\", this.recipe.getName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(this.recipe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.deleteRecipe(this.recipe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Undo: removed recipe \u0027%s\u0027\", this.recipe.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof AddRecipeCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var other \u003d (AddRecipeCommand) obj;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Objects.equals(this.name, other.name)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 Objects.equals(this.steps, other.steps)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 Objects.equals(this.ingredients, other.ingredients)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 Objects.equals(this.tags, other.tags);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"AddRecipeCommand(%s, ingr: [%s], steps: [%s])\", this.name,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.join(\", \", this.ingredients.stream().map(x -\u003e x.toString()).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.join(\", \", this.steps.stream().map(x -\u003e x.toString()).collect(Collectors.toList())));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"add recipe\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Adds a new recipe\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 27,
      "zhiayang": 80,
      "seowalex": 13,
      "fall9x": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// Command.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * In addition to the instance methods described here, all command classes should"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * contain the following STATIC methods:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code String getCommandString()}    -- the command string (eg. \"add recipe\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code String getCommandHelp()}      -- a brief description of what the command does"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param historyManager {@code History} which the command should record to."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public abstract CommandResult execute(Model model, HistoryManager historyManager) throws CommandException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Resolves the ingredient reference, or returns an error message."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param ref   the reference to resolve"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param model the model to use"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the found ingredient, or an error message"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cIngredient\u003e resolveIngredientReference(ItemReference ref, Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (ref.isIndexed()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var lastShownList \u003d model.getFilteredIngredientList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (ref.getZeroIndex() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Ingredient index \u0027%d\u0027 is out of range (should be between 1 and %d)\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    ref.getOneIndex(), lastShownList.size()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(lastShownList.get(ref.getZeroIndex()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.ofOptional(model.findIngredientWithName(ref.getName()),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"No ingredient named \u0027%s\u0027\", ref.getName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Resolves the recipe reference, or returns an error message."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param ref   the reference to resolve"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param model the model to use"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the found recipe, or an error message"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cRecipe\u003e resolveRecipeReference(ItemReference ref, Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (ref.isIndexed()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var lastShownList \u003d model.getFilteredRecipeList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (ref.getZeroIndex() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Recipe index \u0027%d\u0027 is out of range (should be between 1 and %d)\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    ref.getOneIndex(), lastShownList.size()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(lastShownList.get(ref.getZeroIndex()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.ofOptional(model.findRecipeWithName(ref.getName()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"No recipe named \u0027%s\u0027\", ref.getName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 67,
      "Trav1sT": 17,
      "seowalex": 3
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandResult.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cPart\u003e parts;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final boolean isError;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final boolean shouldExit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final boolean isStatsOutput;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cPair\u003cString, String\u003e\u003e statsMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private CommandResult(String message, boolean isError, boolean shouldExit, boolean showHelp, boolean isStatsOutput,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                          List\u003cPair\u003cString, String\u003e\u003e statsMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(message, statsMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.shouldExit \u003d shouldExit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.parts \u003d List.of(Part.text(message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.isStatsOutput \u003d isStatsOutput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.statsMessage \u003d new ArrayList\u003c\u003e(statsMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private CommandResult(List\u003cPart\u003e parts, boolean isError, boolean shouldExit, boolean showHelp,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                          boolean isStatsOutput, List\u003cPair\u003cString, String\u003e\u003e statsMessage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(parts);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.parts \u003d parts;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.shouldExit \u003d shouldExit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.isStatsOutput \u003d isStatsOutput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.statsMessage \u003d statsMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the application should exit after this command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean shouldExit() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.shouldExit;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the app should open the help window"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean shouldShowHelp() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.showHelp;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if the message should be styled as an error"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isError() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.isError;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true if !isError()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean didSucceed() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return !this.isError;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the parts of the message"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cPart\u003e getParts() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.parts;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Appends a new textual part to the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandResult appending(String text, boolean prependNewline) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var list \u003d new ArrayList\u003c\u003e(this.parts);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (list.size() \u003e 0 \u0026\u0026 !prependNewline) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            list.get(list.size() - 1).setAppendNewline(false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        list.add(Part.text(text));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new CommandResult(list, this.isError, this.shouldExit, this.showHelp, this.isStatsOutput,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.statsMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Appends a new link part to the list."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandResult appendingLink(String text, String url, boolean prependNewline) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var list \u003d new ArrayList\u003c\u003e(this.parts);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (list.size() \u003e 0 \u0026\u0026 !prependNewline) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            list.get(list.size() - 1).setAppendNewline(false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        list.add(Part.link(text, url));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new CommandResult(list, this.isError, this.shouldExit, this.showHelp, this.isStatsOutput,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.statsMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if the command result comes from stats command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isStatsOutput() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.isStatsOutput;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the list to be displayed in list view of stats box."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ArrayList\u003cPair\u003cString, String\u003e\u003e getStatsMessage() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new ArrayList\u003c\u003e(this.statsMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.isError ? \"Error: \" : \"\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            + this.parts.stream().map(Part::getText).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (!(obj instanceof CommandResult)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cr \u003d (CommandResult) obj;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.parts.equals(cr.parts)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 this.isError \u003d\u003d cr.isError"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 this.showHelp \u003d\u003d cr.showHelp"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 this.shouldExit \u003d\u003d cr.shouldExit;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Objects.hash(this.parts, this.isError, this.showHelp, this.shouldExit);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new command result that only shows a message."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param message the message to show"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static CommandResult message(String message, Object... args) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new CommandResult(String.format(message, args),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            /* isError: */ false, /* shouldExit: */ false, /* showHelp: */ false, false,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new command result that shows an error."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param error the error to show"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static CommandResult error(String error, Object... args) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new CommandResult(String.format(error, args),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            /* isError: */ true, /* shouldExit: */ false, /* showHelp: */ false, false,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new command result that shows help"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static CommandResult help() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new CommandResult(\"\", /* isError: */ false, /* shouldExit: */ false,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            /* showHelp: */ true, false, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new command result that quits."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static CommandResult exit() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new CommandResult(\"\", /* isError: */ false, /* shouldExit: */ true,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            /* showHelp: */ false, false, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a new command result from stats that contains the list of values to be output in stats box and the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * message that indicates the status of the command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static CommandResult statsMessage(List\u003cPair\u003cString, String\u003e\u003e outputList, String message, Object... args) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new CommandResult(String.format(message, args),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            /* isError: */ false, /* shouldExit: */ false, /* showHelp: */ false, true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            outputList);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static class Part {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private final String url;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private final String text;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private final boolean isLink;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private boolean appendNewline;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         * Makes a new part."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Part(String text, String url, boolean isLink) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.url \u003d url;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.text \u003d text;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.isLink \u003d isLink;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.appendNewline \u003d true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public String getText() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.text;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public String getUrl() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.url;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public boolean isLink() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.isLink;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public boolean appendNewline() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.appendNewline;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public void setAppendNewline(boolean newline) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.appendNewline \u003d newline;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        static Part text(String text) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return new Part(text, \"\", false);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        static Part link(String text, String url) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return new Part(text, url, true);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (!(obj instanceof Part)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var other \u003d (Part) obj;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Objects.equals(this.url, other.url)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 Objects.equals(this.text, other.text)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 Objects.equals(this.isLink, other.isLink)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 Objects.equals(this.appendNewline, other.appendNewline);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 189,
      "Trav1sT": 83,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/DeleteIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Removes a given quantity of an ingredient identified using it\u0027s displayed index or name from the ingredient book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * If no quantity is specified, the ingredient will be deleted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class DeleteIngredientCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final ItemReference item;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final Optional\u003cQuantity\u003e quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Ingredient ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Ingredient updatedIngredient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public DeleteIngredientCommand(ItemReference item) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this(item, Optional.empty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that deletes the given ingredient item."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public DeleteIngredientCommand(ItemReference item, Optional\u003cQuantity\u003e quantity) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var res \u003d resolveIngredientReference(this.item, model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (res.isError()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(res.getError());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ingredient \u003d res.getValue();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.quantity.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                var splitIngredient \u003d this.ingredient.split(this.quantity.get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                this.updatedIngredient \u003d splitIngredient.snd();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                if (this.updatedIngredient.getIngredientSets().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    model.deleteIngredient(this.ingredient);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    model.setIngredient(this.ingredient, this.updatedIngredient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return CommandResult.message(\"Removed %s of ingredient \u0027%s\u0027\", this.quantity.get().toString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    this.updatedIngredient.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            } catch (IncompatibleIngredientsException | IllegalValueException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return CommandResult.error(e.getMessage());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            model.deleteIngredient(this.ingredient);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.message(\"Deleted ingredient \u0027%s\u0027\", this.ingredient.getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String action \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.quantity.isEmpty() || this.updatedIngredient.getIngredientSets().isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            model.addIngredient(this.ingredient);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            action \u003d \"re-added\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            model.setIngredient(this.updatedIngredient, this.ingredient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            action \u003d \"updated\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Undo: %s ingredient \u0027%s\u0027\", action, this.ingredient.getName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof DeleteIngredientCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.item.equals(((DeleteIngredientCommand) other).item)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.quantity.equals(((DeleteIngredientCommand) other).quantity));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"DeleteIngredientCommand(%s%s)\", this.item,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.quantity.map(q -\u003e String.format(\" (%s)\", q)).orElse(\"\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"delete ingredient\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Deletes an ingredient, or removes some quantity of an existing ingredient\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 20,
      "zhiayang": 37,
      "seowalex": 55
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/DeleteRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Deletes a recipe identified using it\u0027s displayed index or name from the recipe book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class DeleteRecipeCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final ItemReference item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that deletes the given recipe item."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public DeleteRecipeCommand(ItemReference item) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var res \u003d resolveRecipeReference(this.item, model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (res.isError()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(res.getError());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipe \u003d res.getValue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.deleteRecipe(this.recipe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Deleted recipe \u0027%s\u0027\", this.recipe.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.addRecipe(this.recipe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Undo: re-added recipe \u0027%s\u0027\", this.recipe.getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof DeleteRecipeCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.item.equals(((DeleteRecipeCommand) other).item));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"DeleteRecipeCommand(%s)\", this.item);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"delete recipe\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Deletes a recipe\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 20,
      "zhiayang": 29,
      "seowalex": 20
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/EditRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.edit.EditOperationType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.IngredientEditDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.edit.RecipeEditDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.StepEditDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.TagEditDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Edits a recipe identified using it\u0027s displayed index or name from the recipe book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class EditRecipeCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final ItemReference item;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final RecipeEditDescriptor recipeEditDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Recipe editedRecipe;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs a command that edits the given recipe item."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public EditRecipeCommand(ItemReference item, RecipeEditDescriptor recipeEditDescriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(recipeEditDescriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipeEditDescriptor \u003d recipeEditDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var res \u003d resolveRecipeReference(this.item, model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (res.isError()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(res.getError());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipe \u003d res.getValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var newName \u003d this.recipeEditDescriptor.getNameEdit()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(this.recipe.getName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var newIngredients \u003d performIngredientEdits(this.recipeEditDescriptor.getIngredientEdits());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var newSteps \u003d performStepEdits(this.recipeEditDescriptor.getStepEdits());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var newTags \u003d performTagEdits(this.recipeEditDescriptor.getTagEdits());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var foo \u003d Result.firstError(newIngredients, newSteps, newTags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (foo.isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(foo.get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.editedRecipe \u003d new Recipe(newName,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            newIngredients.getValue(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            newSteps.getValue(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            newTags.getValue());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        model.setRecipe(this.recipe, this.editedRecipe);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Edited recipe \u0027%s\u0027%s\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.recipe.getName(), !this.recipe.getName().equals(newName)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ? String.format(\" (renamed to \u0027%s\u0027)\", newName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                : \"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result\u003cList\u003cIngredientReference\u003e\u003e performIngredientEdits(List\u003cIngredientEditDescriptor\u003e edits) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this is a reference."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var ingredients \u003d new ArrayList\u003c\u003e(this.recipe.getIngredients());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var edit : edits) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var type \u003d edit.getEditType();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var name \u003d edit.getIngredientName();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var qtyOpt \u003d edit.getIngredientQuantity();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (type \u003d\u003d EditOperationType.ADD) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                for (var ingr : ingredients) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    if (ingr.getName().equals(name)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return Result.error(\"Recipe \u0027%s\u0027 already contains ingredient \u0027%s\u0027\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            this.recipe.getName(), name);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ingredients.add(new IngredientReference(name, qtyOpt.orElse(Count.of(1))));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var opt \u003d ingredients.stream()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .filter(ingr -\u003e ingr.getName().equalsIgnoreCase(name))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .findFirst();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (opt.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Recipe doesn\u0027t contain an ingredient named \u0027%s\u0027\", name);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else if (type \u003d\u003d EditOperationType.EDIT \u0026\u0026 qtyOpt.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Missing quantity to edit ingredient \u0027%s\u0027\", name);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var existing \u003d opt.get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                if (type \u003d\u003d EditOperationType.EDIT) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var idx \u003d ingredients.indexOf(existing);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    ingredients.set(idx, new IngredientReference(name, qtyOpt.get()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                } else if (type \u003d\u003d EditOperationType.DELETE) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    ingredients.remove(existing);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Cannot %s ingredients\", type);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(ingredients);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result\u003cList\u003cStep\u003e\u003e performStepEdits(List\u003cStepEditDescriptor\u003e edits) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var steps \u003d new ArrayList\u003c\u003e(this.recipe.getSteps());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var edit : edits) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var type \u003d edit.getEditType();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var step \u003d edit.getStepText();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var numOpt \u003d edit.getStepNumber().map(x -\u003e x - 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (type \u003d\u003d EditOperationType.ADD) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                steps.add(numOpt.orElse(steps.size()), new Step(step));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (numOpt.isEmpty()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Missing step number for %s\", type);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                int index \u003d numOpt.get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (index \u003c 0 || index \u003e\u003d steps.size()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Step number \u0027%d\u0027 is out of range (should be between 1 and %d)\","
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        1 + index, steps.size());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                if (type \u003d\u003d EditOperationType.EDIT) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    steps.set(index, new Step(step));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                } else if (type \u003d\u003d EditOperationType.DELETE) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    steps.remove(index);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Cannot %s steps\", type);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(steps);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result\u003cSet\u003cTag\u003e\u003e performTagEdits(List\u003cTagEditDescriptor\u003e edits) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tags \u003d new HashSet\u003c\u003e(this.recipe.getTags());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var edit : edits) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var tagName \u003d edit.getTagName();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (edit.getEditType() \u003d\u003d EditOperationType.ADD) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // it\u0027s a Set\u003cTag\u003e, so we don\u0027t need to check for dupes."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                tags.add(new Tag(tagName));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (edit.getEditType() \u003d\u003d EditOperationType.DELETE) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var opt \u003d tags.stream().filter(t -\u003e t.equals(tagName)).findFirst();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (opt.isEmpty()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Recipe \u0027%s\u0027 does not have tag \u0027%s\u0027\","
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        this.recipe.getName(), tagName);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                tags.remove(opt.get());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Cannot %s tags\", edit.getEditType());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(tags);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.setRecipe(this.editedRecipe, this.recipe);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Undo: un-edited recipe \u0027%s\u0027\", this.recipe.getName());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof EditRecipeCommand"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.item.equals(((EditRecipeCommand) other).item)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.recipeEditDescriptor.equals(((EditRecipeCommand) other).recipeEditDescriptor));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return String.format(\"EditRecipeCommand(%s)\", this.item);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"edit recipe\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Edits an existing recipe\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 141,
      "seowalex": 102
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FilterIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDateMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Filters and lists all ingredients in ingredient book that match all filtering criteria."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FilterIngredientCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final TagContainsKeywordsPredicate tagPredicates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final ExpiryDateMatchesKeywordsPredicate expPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a command that finds the given ingredient item."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param expPredicate"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param tagPredicates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FilterIngredientCommand(ExpiryDateMatchesKeywordsPredicate expPredicate,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            TagContainsKeywordsPredicate tagPredicates) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.tagPredicates \u003d tagPredicates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.expPredicate \u003d expPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Predicate\u003cEntry\u003e p \u003d x -\u003e true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (expPredicate !\u003d null \u0026\u0026 tagPredicates !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            p \u003d expPredicate.and(tagPredicates);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (expPredicate !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            p \u003d expPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (tagPredicates !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            p \u003d tagPredicates;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredIngredientList(p);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            DisplayNavigator.loadIngredientPanel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sz \u003d model.getFilteredIngredientList().size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Found %d ingredient%s\", sz, sz \u003d\u003d 1 ? \"\" : \"s\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            || (other instanceof FilterIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \u0026\u0026 tagPredicates.equals(((FilterIngredientCommand) other).tagPredicates)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \u0026\u0026 expPredicate.equals(((FilterIngredientCommand) other).expPredicate)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"FilterIngredientCommand(...)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"filter ingredient\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Filters ingredients by one or more criteria (tags and expiry dates)\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 61,
      "zhiayang": 16
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FilterRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.IngredientsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Filters and lists all recipes in recipe book that match all filtering criteria."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FilterRecipeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final IngredientsContainsKeywordsPredicate ingredientPredicates;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final TagContainsKeywordsPredicate tagPredicates;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Constructs a command that filters and finds the matching recipe items."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param indPredicates"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param tagPredicates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FilterRecipeCommand(TagContainsKeywordsPredicate tagPredicates,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            IngredientsContainsKeywordsPredicate indPredicates) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.tagPredicates \u003d tagPredicates;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.ingredientPredicates \u003d indPredicates;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Predicate\u003c? super Recipe\u003e p \u003d x -\u003e true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (ingredientPredicates !\u003d null \u0026\u0026 tagPredicates !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            p \u003d ingredientPredicates.and(tagPredicates);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (ingredientPredicates !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            p \u003d ingredientPredicates;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if (tagPredicates !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            p \u003d tagPredicates;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(p);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            DisplayNavigator.loadRecipePanel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sz \u003d model.getFilteredRecipeList().size();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Found %d recipe%s\", sz, sz \u003d\u003d 1 ? \"\" : \"s\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            || (other instanceof FilterRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \u0026\u0026 tagPredicates.equals(((FilterRecipeCommand) other).tagPredicates)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \u0026\u0026 ingredientPredicates.equals(((FilterRecipeCommand) other).ingredientPredicates)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"FilterRecipeCommand(...)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"filter recipe\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Filters recipes by one or more criteria (tags and ingredients used)\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 61,
      "zhiayang": 20
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FindIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Finds and lists all ingredients in ingredient book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FindIngredientCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that finds the given ingredient item."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FindIngredientCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            DisplayNavigator.loadIngredientPanel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sz \u003d model.getFilteredIngredientList().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Found %d ingredient%s\", sz, sz \u003d\u003d 1 ? \"\" : \"s\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof FindIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindIngredientCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"FindIngredientCommand(keywords: %s)\", this.predicate.getKeywords());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"find ingredient\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Finds ingredients by searching for keywords in their names\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 23,
      "zhiayang": 22,
      "Trav1sT": 2,
      "seowalex": 11
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/FindRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Finds and lists all recipes in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FindRecipeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a command that finds the given recipe item."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public FindRecipeCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            DisplayNavigator.loadRecipePanel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sz \u003d model.getFilteredRecipeList().size();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Found %d recipe%s\", sz, sz \u003d\u003d 1 ? \"\" : \"s\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof FindRecipeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindRecipeCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"FindRecipeCommand(keywords: %s)\", this.predicate.getKeywords());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"find recipe\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Finds recipes by searching for keywords in their names\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 25,
      "zhiayang": 22,
      "seowalex": 11
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.lang.reflect.InvocationTargetException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Strings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final String METHOD_NAME_GET_CMD \u003d \"getCommandString\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final String METHOD_NAME_GET_HELP \u003d \"getCommandHelp\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Optional\u003cString\u003e helpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Optional\u003cString\u003e helpTarget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new HelpCommand for the given command and target."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public HelpCommand(Optional\u003cString\u003e command, Optional\u003cString\u003e target) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.helpCommand \u003d command;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.helpTarget \u003d target;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (helpCommand.isEmpty() || helpCommand.get().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.message(\"Refer to the\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .appendingLink(\"User Guide\", Strings.USER_GUIDE_BASE_URL, /* newline: */ false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .appending(\"for more detailed help\", /* newline: */ false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cmd \u003d helpCommand.get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cls \u003d getCommandClassFor(cmd, this.helpTarget.orElse(\"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (cls \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(\"Unknown command \u0027%s\u0027; see the User Guide for a list of commands: %s\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                cmd, Strings.USER_GUIDE_BASE_URL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cmdStr \u003d invokeMethod(cls, METHOD_NAME_GET_CMD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cmdHelp \u003d invokeMethod(cls, METHOD_NAME_GET_HELP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (cmdStr \u003d\u003d null || cmdHelp \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(\"No help available for command \u0027%s\u0027\", cmd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ugSection \u003d cls.getSimpleName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d CommandResult.message(\"%s: %s\", cmdStr, cmdHelp);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!ugSection.endsWith(\"Dummy\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ret \u003d ret"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .appending(\"see the\", /* newline: */ true)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .appendingLink(\"User Guide\", Strings.USER_GUIDE_BASE_URL + \"#\" + ugSection,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    /* newline: */ false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Class\u003c?\u003e getCommandClassFor(String cmd, String target) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var camelCasing \u003d (Function\u003cString, String\u003e) s -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return s.isEmpty()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ? \"\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                : (s.substring(0, 1).toUpperCase() + s.substring(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var pkg \u003d \"chopchop.logic.commands.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var extraTarget \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xs \u003d new StringView(target).words();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (xs.size() \u003e 1) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            target \u003d xs.get(0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            extraTarget \u003d xs.get(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (target.equals(\"recipes\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            target \u003d \"recipe\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (target.equals(\"ingredients\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            target \u003d \"ingredient\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        //todo: stats commands have 3 keywords tho"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var cmdName : Strings.COMMAND_NAMES) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (!cmdName.equals(cmd)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var className \u003d pkg"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + camelCasing.apply(cmdName)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + camelCasing.apply(target)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + camelCasing.apply(extraTarget)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + \"Command\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            System.out.printf(\"searching for class \u0027%s\u0027\\n\", className);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Class.forName(className);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    // try to find the dummy class."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var dummyPkg \u003d \"chopchop.logic.commands.HelpCommand$\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    className \u003d dummyPkg"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        + camelCasing.apply(cmdName)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        + \"CommandDummy\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    System.out.printf(\"searching for dummy class \u0027%s\u0027\\n\", className);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Class.forName(className);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } catch (ClassNotFoundException e1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private String invokeMethod(Class\u003c?\u003e cls, String methodName) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var method \u003d cls.getMethod(methodName);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ret \u003d method.invoke(null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (ret instanceof String) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return (String) ret;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // do nothing, but exit the branch and return the error."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            System.err.printf(\"Command class \u0027%s\u0027 had no method \u0027%s\u0027: %s\\n\", cls, methodName, e);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"HelpCommand\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"help\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Shows a link to the user guide for ChopChop, and offers help for individual commands\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getUserGuideSection() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"viewing-help--help\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // internal fake classes for commands requiring targets."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static class AddCommandDummy {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"add\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandHelp() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"Adds an item; see \u0027add recipe\u0027 or \u0027add ingredient\u0027\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static class DeleteCommandDummy {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"delete\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandHelp() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"Deletes an item; see \u0027delete recipe\u0027 or \u0027delete ingredient\u0027\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static class ListCommandDummy {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandString() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"list\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandHelp() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"Lists items; see \u0027list recipes\u0027 or \u0027list ingredients\u0027\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static class FindCommandDummy {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandString() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"find\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandHelp() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"Finds items; see \u0027find recipes\u0027 or \u0027find ingredients\u0027\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static class FilterCommandDummy {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandString() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"filter\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandHelp() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"Filters items; see \u0027filter recipes\u0027 or \u0027filter ingredients\u0027\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static class EditCommandDummy {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandString() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"edit\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public static String getCommandHelp() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"Edits an item; see \u0027edit recipe\u0027 or \u0027edit ingredient\u0027\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static class StatsCommandDummy {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public static String getCommandString() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return \"stats\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public static String getCommandHelp() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return \"Lists recipe and ingredient statistics; see \u0027stats recipe made\u0027 or \u0027stats ingredient used\u0027\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 208,
      "Trav1sT": 11,
      "seowalex": 3,
      "fall9x": 14
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListIngredientCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Lists all ingredients in the ingredient book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ListIngredientCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.updateFilteredIngredientList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            DisplayNavigator.loadIngredientPanel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Listed ingredients\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return other \u003d\u003d this || (other instanceof ListIngredientCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"ListIngredientCommand\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"list ingredient\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Lists all ingredients, clearing any search filters\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 11,
      "zhiayang": 26,
      "Trav1sT": 1,
      "seowalex": 6
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Lists all recipes in the recipe book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ListRecipeCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            DisplayNavigator.loadRecipePanel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Listed recipes\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return other \u003d\u003d this || (other instanceof ListRecipeCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"ListRecipeCommand\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"list recipe\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Lists all recipes, clearing any search filters\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 12,
      "zhiayang": 26,
      "seowalex": 6
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ListRecommendationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Lists all recommended recipes in the recipe book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class ListRecommendationCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.updateFilteredRecipeList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            DisplayNavigator.loadRecommendationPanel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return CommandResult.message(\"Listed recommendations\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other instanceof ListRecommendationCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return \"ListRecommendationCommand\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return \"list recommendation\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return \"Lists all recommendations, clearing any search filters\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 43
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/MakeRecipeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Makes a dish according to the recipe identified by the index number or name used in the displayed recipe list,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * removing the ingredients used."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class MakeRecipeCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final ItemReference item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Recipe recipe;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private List\u003cPair\u003cIngredient, Ingredient\u003e\u003e ingredients;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs a command that makes the given recipe item."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public MakeRecipeCommand(ItemReference item) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Recipe getRecipe() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return recipe;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var res \u003d resolveRecipeReference(this.item, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (res.isError()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(res.getError());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipe \u003d res.getValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (var ingredientRef : this.recipe.getIngredients()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var find \u003d model.findIngredientWithName(ingredientRef.getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (find.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return CommandResult.error(\"Missing ingredient \u0027%s\u0027 (not found)\", ingredientRef.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ingredient \u003d find.get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                this.ingredients.add(new Pair\u003c\u003e(ingredient, ingredient.split(ingredientRef.getQuantity()).snd()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                model.addIngredientUsage(ingredientRef);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            } catch (IncompatibleIngredientsException | IllegalValueException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return CommandResult.error(\"Could not make recipe \u0027%s\u0027 (caused by ingredient \u0027%s\u0027): %s\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    this.recipe.getName(), ingredient.getName(), e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (var ingredient : this.ingredients) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (ingredient.snd().getIngredientSets().isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                model.deleteIngredient(ingredient.fst());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                model.setIngredient(ingredient.fst(), ingredient.snd());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.addRecipeUsage(this.recipe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Made recipe \u0027%s\u0027\", this.recipe.getName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (var ingredient : this.ingredients) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (ingredient.snd().getIngredientSets().isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                model.addIngredient(ingredient.fst());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                model.setIngredient(ingredient.snd(), ingredient.fst());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (var ingredientRef : this.recipe.getIngredients()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            model.removeIngredientUsage(ingredientRef);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredients.clear();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.removeRecipeUsage(this.recipe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Undo: unmade recipe \u0027%s\u0027\", this.recipe.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof MakeRecipeCommand"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.item.equals(((MakeRecipeCommand) other).item)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.ingredients.equals(((MakeRecipeCommand) other).ingredients));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"MakeRecipeCommand(%s)\", this.item);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"make\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Makes the given recipe\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 29,
      "Trav1sT": 14,
      "seowalex": 81
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/QuitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// QuitCommand.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class QuitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.exit();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"QuitCommand\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"quit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Quits ChopChop\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 24,
      "seowalex": 2
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Redo the last redoable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(historyManager);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return historyManager.redo(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"RedoCommand\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"redo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Redoes the last performed command\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 13,
      "seowalex": 21
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/StatsIngredientClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsIngredientClearCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private UsageList\u003cIngredientUsage\u003e usages \u003d new UsageList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model          {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param historyManager {@code History} which the command should record to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.usages \u003d model.getIngredientUsageList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            model.setIngredientUsageList(new UsageList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.error(\"Unable to clear records of ingredients used\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return CommandResult.statsMessage(new ArrayList\u003c\u003e(), \"All records of ingredients used are cleared!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Undo the command and returns the result message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            model.setIngredientUsageList(this.usages);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.usages.setAll(new UsageList\u003c\u003e()); //don\u0027t think need to clear but just in case"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.error(\"Unable to restore records of ingredients used\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return CommandResult.message(\"Undo: restored records of ingredients used\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof StatsIngredientClearCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 this.usages.equals(((StatsIngredientClearCommand) other).usages));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"StatsIngredientClearCommand\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"stats ingredient clear\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Clears all records of ingredients used\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 75
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/StatsIngredientRecentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsIngredientRecentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final int N_MOST_RECENT \u003d 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model          {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param historyManager {@code History} which the command should record to."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var output \u003d model.getRecentlyUsedIngredients(N_MOST_RECENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var msgOutput \u003d output.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .map(x -\u003e new Pair\u003c\u003e(x.getName(), x.getPrintableDate()))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.statsMessage(msgOutput, \"Here is the list of ingredients recently used\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.message(\"Unable to generate ingredient recently used\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"StatsIngredientRecentCommand\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"stats ingredient recent\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Shows the ingredients that were recently used by recipes that were made\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "Trav1sT": 45
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/StatsIngredientUsedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsIngredientUsedCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDateTime before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDateTime after;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an StatsIngredientCommand to add the specified {@code Command}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * If both before and after are not specified. It is assumed that the time frame is today."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public StatsIngredientUsedCommand(LocalDateTime after, LocalDateTime before) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (before \u003d\u003d null \u0026\u0026 after \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.after \u003d LocalDateTime.of(now.getYear(), now.getMonth(), now.getDayOfMonth(), 0, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.before \u003d this.after.plusDays(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.before \u003d before;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.after \u003d after;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String getMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter onFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (this.before !\u003d null \u0026\u0026 this.after !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var before \u003d this.before.format(formatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var after \u003d this.after.format(formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var onAfter \u003d this.after.format(onFormatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (this.after.plusDays(1).equals(this.before)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                msg \u003d String.format(\"Here is a list of ingredients used on %s\", onAfter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                msg \u003d String.format(\"Here is a list of ingredients used from the period %s to %s\", after, before);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else if (this.before !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var before \u003d this.before.format(formatter);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            msg \u003d String.format(\"Here is a list of ingredients used before %s\", before);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var before \u003d this.after.format(formatter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            msg \u003d String.format(\"Here is a list of ingredients used after %s\", before);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var output \u003d model.getIngredientUsageList().getUsagesBetween(after, before);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return CommandResult.statsMessage(output, getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof StatsIngredientUsedCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 this.before.equals(((StatsIngredientUsedCommand) other).before)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 this.after.equals(((StatsIngredientUsedCommand) other).after));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"StatsIngredientUsedCommand\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"stats ingredient used\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Shows ingredients used by recipes that were made in a given time frame\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 6,
      "Trav1sT": 73
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/StatsRecipeClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsRecipeClearCommand extends Command implements Undoable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private UsageList\u003cRecipeUsage\u003e usages \u003d new UsageList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model          {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param historyManager {@code History} which the command should record to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.usages \u003d model.getRecipeUsageList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            model.setRecipeUsageList(new UsageList\u003c\u003e());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.error(\"Unable to clear records of recipes made\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return CommandResult.statsMessage(new ArrayList\u003c\u003e(), \"All records of recipes made are cleared!\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Undo the command and returns the result message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            model.setRecipeUsageList(this.usages);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.usages.setAll(new UsageList\u003c\u003e()); //don\u0027t think need to clear but just in case"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.error(\"Unable to restore records of recipes made\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return CommandResult.message(\"Undo: restored records of recipes made\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof StatsRecipeClearCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 this.usages.equals(((StatsRecipeClearCommand) other).usages));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"StatsRecipeClearCommand\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"stats recipe clear\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Clears all records of recipes made\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 75
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/StatsRecipeMadeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsRecipeMadeCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDateTime before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDateTime after;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates an StatsRecipeDateCommand to add the specified {@code Ingredient}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * If both before and after are not specified, it is assumed that the time frame is today."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public StatsRecipeMadeCommand(LocalDateTime after, LocalDateTime before) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (after \u003d\u003d null \u0026\u0026 before \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.after \u003d LocalDateTime.of(now.getYear(), now.getMonth(), now.getDayOfMonth(), 0, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.before \u003d this.after.plusDays(1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.after \u003d after;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.before \u003d before;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String getMessage(boolean isEmpty) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter onFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String msg;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (this.before !\u003d null \u0026\u0026 this.after !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var before \u003d this.before.format(formatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var after \u003d this.after.format(formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var onAfter \u003d this.after.format(onFormatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (this.after.plusDays(1).equals(this.before)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                msg \u003d String.format(isEmpty ? \"No recipes were made on %s\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                            : \"Here is a list of recipes made on %s\", onAfter);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                msg \u003d String.format(isEmpty ? \"No recipes were made from the period %s to %s\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                            : \"Here is a list of recipes made from the period %s to %s\", after, before);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else if (this.before !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var before \u003d this.before.format(formatter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            msg \u003d String.format(isEmpty ? \"No recipes were made before %s\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                        : \"Here is a list of recipes made before %s\", before);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var before \u003d this.after.format(formatter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            msg \u003d String.format(isEmpty ? \"No recipes were made after %s\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                        : \"Here is a list of recipes made after %s\", before);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var output \u003d model.getRecipeUsageList().getUsagesBetween(after, before);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return CommandResult.statsMessage(output, getMessage(output.isEmpty()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof StatsRecipeMadeCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 this.before.equals(((StatsRecipeMadeCommand) other).before)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \u0026\u0026 this.after.equals(((StatsRecipeMadeCommand) other).after));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"StatsRecipeMadeCommand\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"stats recipe made\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Shows recipes that were made in a given time frame\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 6,
      "Trav1sT": 77
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/StatsRecipeRecentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsRecipeRecentCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final int N_MOST_RECENT \u003d 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param model          {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param historyManager {@code History} which the command should record to."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var output \u003d model.getRecentlyUsedRecipes(N_MOST_RECENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var msgOutput \u003d output.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .map(x -\u003e new Pair\u003c\u003e(x.getName(), x.getPrintableDate()))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.statsMessage(msgOutput, \"Here is a list of recipes recently made\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return CommandResult.message(\"Unable to generate recipes recently made\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"StatsRecipeRecentCommand\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"stats recipe recent\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Shows the recipes that were recently made\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "Trav1sT": 45
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/StatsRecipeTopCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsRecipeTopCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var output \u003d model.getRecipeUsageList().getMostUsed();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return CommandResult.statsMessage(output, \"Here are the top recipes\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            || (other instanceof StatsRecipeTopCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"StatsRecipeTopCommand\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"stats recipe top\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return \"Shows the recipes that are made the most\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 6,
      "Trav1sT": 30
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Undo the last undoable command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(historyManager);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return historyManager.undo(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"UndoCommand\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"undo\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Undoes the last performed command\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 13,
      "seowalex": 21
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/Undoable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Represents an undoable command with the ability to be undone and redone."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public interface Undoable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param historyManager {@code HistoryManager} which the command should record to."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    CommandResult execute(Model model, HistoryManager historyManager) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Undo the command and returns the result message."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    CommandResult undo(Model model) throws CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Redo the command and returns the result message."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param historyManager {@code HistoryManager} which the command should record to."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    default CommandResult redo(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.execute(model, historyManager);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 41
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.ui.DisplayNavigator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Displays a recipe identified by the index number or its name from the recipe book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final ItemReference item;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code ViewCommand} from the given recipe item."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param item"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ViewCommand(ItemReference item) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandResult execute(Model model, HistoryManager historyManager) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var recipe \u003d resolveRecipeReference(this.item, model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (recipe.isError()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(recipe.getError());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (DisplayNavigator.hasDisplayController()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            DisplayNavigator.loadRecipeDisplay(recipe.getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return CommandResult.message(\"Displaying recipe \u0027%s\u0027\", recipe.getValue().getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return String.format(\"ViewCommand(%s)\", this.item);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                || (other instanceof ViewCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 this.item.equals(((ViewCommand) other).item));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"view\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static String getCommandHelp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return \"Views the given recipe by opening its detailed view\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 20,
      "fall9x": 42
    }
  },
  {
    "path": "src/main/java/chopchop/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/chopchop/logic/edit/EditDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// EditDescriptor.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public abstract class EditDescriptor {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final EditOperationType editType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public EditDescriptor(EditOperationType editType) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.editType \u003d editType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public EditOperationType getEditType() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.editType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 16
    }
  },
  {
    "path": "src/main/java/chopchop/logic/edit/EditOperationType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// EditOperationType.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public enum EditOperationType {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    DELETE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 14
    }
  },
  {
    "path": "src/main/java/chopchop/logic/edit/IngredientEditDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// IngredientEditDescriptor.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class IngredientEditDescriptor extends EditDescriptor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Optional\u003cQuantity\u003e ingredientQuantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String ingredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new descriptor representing ingredient editing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param editType the type of edit"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param name     the name of the ingredient to edit"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param qty      the new quantity of the ingredient; should only be present iff type is EDIT or ADD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public IngredientEditDescriptor(EditOperationType editType, String name, Optional\u003cQuantity\u003e qty) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(editType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert editType \u003d\u003d EditOperationType.ADD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            || editType \u003d\u003d EditOperationType.EDIT"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            || editType \u003d\u003d EditOperationType.DELETE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (editType \u003d\u003d EditOperationType.EDIT || editType \u003d\u003d EditOperationType.ADD) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert qty.isPresent();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert qty.isEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ingredientName \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ingredientQuantity \u003d qty;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getIngredientName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.ingredientName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cQuantity\u003e getIngredientQuantity() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.ingredientQuantity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 46
    }
  },
  {
    "path": "src/main/java/chopchop/logic/edit/RecipeEditDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// RecipeEditDescriptor.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class RecipeEditDescriptor {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cIngredientEditDescriptor\u003e ingredientEdits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cStepEditDescriptor\u003e stepEdits;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cTagEditDescriptor\u003e tagEdits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Optional\u003cString\u003e nameEdit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a RecipeEditDescriptor to edit a recipe."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param ingredientEdits   the list of edit descriptors for ingredients"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param stepEdits         the list of edit descriptors for steps"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param tagEdits          the list of edit descriptors for tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param nameEdit          the edited name (if present)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public RecipeEditDescriptor(Optional\u003cString\u003e nameEdit, List\u003cIngredientEditDescriptor\u003e ingredientEdits,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        List\u003cStepEditDescriptor\u003e stepEdits, List\u003cTagEditDescriptor\u003e tagEdits) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ingredientEdits \u003d ingredientEdits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.stepEdits \u003d stepEdits;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.tagEdits \u003d tagEdits;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.nameEdit \u003d nameEdit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cIngredientEditDescriptor\u003e getIngredientEdits() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.ingredientEdits;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cStepEditDescriptor\u003e getStepEdits() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.stepEdits;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cTagEditDescriptor\u003e getTagEdits() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.tagEdits;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cString\u003e getNameEdit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.nameEdit;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 47
    }
  },
  {
    "path": "src/main/java/chopchop/logic/edit/StepEditDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StepEditDescriptor.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StepEditDescriptor extends EditDescriptor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Optional\u003cInteger\u003e stepNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String stepText;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new descriptor representing step editing. If the {@code stepNumber} is empty,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * then the step should be appended to the end of the recipe\u0027s existing steps."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param editType   the type of edit"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param stepNumber the 1-based index of the step to edit."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param stepText   the new content of the step"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StepEditDescriptor(EditOperationType editType, Optional\u003cInteger\u003e stepNumber, String stepText) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(editType);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert editType \u003d\u003d EditOperationType.ADD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            || editType \u003d\u003d EditOperationType.EDIT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            || editType \u003d\u003d EditOperationType.DELETE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (editType \u003d\u003d EditOperationType.ADD || editType \u003d\u003d EditOperationType.EDIT) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert !stepText.isEmpty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assert stepText.isEmpty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.stepNumber \u003d stepNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.stepText \u003d stepText;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getStepText() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.stepText;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cInteger\u003e getStepNumber() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.stepNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhiayang": 46
    }
  },
  {
    "path": "src/main/java/chopchop/logic/edit/TagEditDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// TagEditDescriptor.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class TagEditDescriptor extends EditDescriptor {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a new descriptor representing tag editing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param editType the type of edit; must be either ADD or DELETE"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param tag      the tag name; it must be valid according to Tag::isValidTagName"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public TagEditDescriptor(EditOperationType editType, String tag) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(editType);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assert Tag.isValidTag(tag);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert editType \u003d\u003d EditOperationType.ADD || editType \u003d\u003d EditOperationType.DELETE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.tagName \u003d tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 28,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/history/HistoryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.Undoable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * The HistoryManager of the main LogicManager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class HistoryManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CANNOT_UNDO \u003d \"No commands to undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CANNOT_REDO \u003d \"No commands to redo\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cUndoable\u003e commandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cString\u003e inputHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private int currentIndex;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs a {@code HistoryManager}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public HistoryManager() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.commandHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.inputHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.currentIndex \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Adds an input to the history."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void addInput(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.inputHistory.add(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Adds an undoable command to the history."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void addCommand(Undoable command) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.commandHistory.subList(this.currentIndex, this.commandHistory.size()).clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.commandHistory.add(command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.currentIndex \u003d this.commandHistory.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Undo a command and returns the result."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the undo should operate on."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during undo execution."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult undo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.currentIndex \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(\"No commands to undo\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.currentIndex--;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.commandHistory.get(this.currentIndex).undo(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Redo a command and returns the result."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param model {@code Model} which the redo should operate on."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return feedback message of the operation result for display."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws CommandException If an error occurs during redo execution."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public CommandResult redo(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.currentIndex \u003d\u003d this.commandHistory.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return CommandResult.error(\"No commands to redo\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var result \u003d this.commandHistory.get(this.currentIndex).redo(model, this);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.currentIndex++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the input history."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public List\u003cString\u003e getInputHistory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Collections.unmodifiableList(this.inputHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the input history filtered by a prefix."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public List\u003cString\u003e getInputHistory(String prefix) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.inputHistory.stream().filter(input -\u003e input.startsWith(prefix))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .collect(Collectors.toUnmodifiableList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "Trav1sT": 1,
      "seowalex": 92
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/ArgName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ArgName.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A helper class to abstract away the menial task of handling \u0027/\u0027 when printing argument names"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ArgName {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cString\u003e components;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new argument name from the given string. Note that it *should not* include"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the leading slash."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param name the name of the argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ArgName(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Objects.requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IllegalArgumentException(\"argument name cannot be empty\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (name.startsWith(\"/\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IllegalArgumentException(\"argument name cannot start with \u0027/\u0027\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.components \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv \u003d new StringView(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // check for components"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (sv.find(\u0027:\u0027) !\u003d -1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var parts \u003d sv.splitBy(c -\u003e c \u003d\u003d \u0027:\u0027);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.name \u003d parts.get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.components.addAll(parts.subList(1, parts.size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e getComponents() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.components;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the un-decorated prefix name."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String name() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the decorated (ie. with a slash) prefix name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"/%s%s%s\", this.name,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.components.isEmpty() ? \"\" : \":\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.join(\":\", this.components));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (obj instanceof ArgName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 ((ArgName) obj).name.equals(this.name)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 ((ArgName) obj).components.equals(this.components);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true iff the name of the argument matches."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean nameEquals(String s) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name.equals(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true iff the name of the two arguments matche."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean nameEquals(ArgName s) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name.equals(s.name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 96,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/CommandArguments.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandArguments.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A container class to hold a parsed command, holding its:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - unnamed arguments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * - named arguments"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * For example, a command such as:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code add ingredient onions /quantity 500g /location fridge /location shelf}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Would have the following properties:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      command     \u003d \"add\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      remaining   \u003d \"ingredient onions\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *      arguments   \u003d ["
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      (\"quantity\", \"500g\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      (\"location\", \"fridge\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                      (\"location\", \"shelf\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *                    ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * For named arguments, the name cannot be empty, while the value can be empty. For example,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * {@code ... /tag /tag /tag} is valid, but {@code ... / owo / uwu} is not."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * This class makes no judgement on the contents of any of the properties. As seen in the"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * example above, multiple arguments with the same name are allowed; the ordering of named"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * arguments is preserved."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandArguments {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String command;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String remaining;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cPair\u003cArgName, String\u003e\u003e arguments;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of only the command name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name, any remaining"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * non-named arguments, and some number of named arguments."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param remaining any remaining non-named arguments"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, String remaining) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d remaining;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * some number of named arguments."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param arguments a map of named arguments and their values"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, List\u003cPair\u003cArgName, String\u003e\u003e arguments) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new ArrayList\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of command arguments consisting of the command name, any remaining"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * non-named arguments, and some number of named arguments."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param command   the name of the command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param remaining any remaining non-named arguments"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param arguments a map of named arguments and their values"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public CommandArguments(String command, String remaining, List\u003cPair\u003cArgName, String\u003e\u003e arguments) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.command    \u003d command;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.remaining  \u003d remaining;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.arguments  \u003d new ArrayList\u003c\u003e(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.command;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getRemaining() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.remaining;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getFirstWordFromRemaining() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // get(0) will throw an exception if the list is empty, which we"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // definitely don\u0027t want."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new StringView(this.remaining)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .words()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .orElse(\"\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the arguments with the given name. Since it makes sense for some parameters to"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * be specified more than once, this method returns a list of all arguments with the"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * given name."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e getArgument(ArgName name) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.arguments"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .filter(p -\u003e p.fst().equals(name))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(p -\u003e p.snd())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cPair\u003cArgName, String\u003e\u003e getAllArguments() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ArrayList\u003c\u003e(this.arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof CommandArguments)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ca \u003d (CommandArguments) obj;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.command.equals(ca.command)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 this.remaining.equals(ca.remaining)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 this.arguments.equals(ca.arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 144,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Strings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.QuitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.AddCommandParser.parseAddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.logic.parser.commands.EditCommandParser.parseEditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.HelpCommandParser.parseHelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.ListCommandParser.parseListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.commands.FilterCommandParser.parseFilterCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.FindCommandParser.parseFindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.DeleteCommandParser.parseDeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.logic.parser.commands.MakeCommandParser.parseMakeCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.commands.StatsCommandParser.parseStatsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.logic.parser.commands.ViewCommandParser.parseViewCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Result\u003cList\u003cPair\u003cArgName, String\u003e\u003e\u003e parseNamedArguments(StringView input) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new ArrayList\u003cPair\u003cArgName, String\u003e\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (input.size() \u003e 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (input.find(\u0027/\u0027) !\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (input.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Expected argument name after \u0027/\u0027\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var pair \u003d splitUntilNextSlash(input.drop(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var self \u003d new StringView(pair.fst());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            input \u003d pair.snd();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var argValue \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var argName \u003d self.bisect(\u0027 \u0027, argValue);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (argName.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Expected argument name after \u0027/\u0027\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ret.add(Pair.of(new ArgName(argName.trim().toString()), argValue.trim().toString()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (input.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(ret);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse an input string into its constituent components, including the name of the command, its target,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * and its arguments. See the documentation for {@link chopchop.logic.parser.CommandArguments} for the recognised"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * components of a given input string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param input the input string to parse"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the parsed components, iff parsing succeeded; an empty optional otherwise."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cCommandArguments\u003e parseArgs(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv \u003d new StringView(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var x \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xs \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var command \u003d sv.bisect(\u0027 \u0027, xs).toString().strip();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p \u003d splitUntilNextSlash(xs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var theRest \u003d p.fst();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.parseNamedArguments(p.snd())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(args -\u003e new CommandArguments(command, theRest, args));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse a user input into a {@code Command}, or an error message if parsing failed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param input the input string to parse"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the parsed command on success; an error message otherwise."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cCommand\u003e parse(String input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.parseArgs(input)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(args -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (args.getCommand()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_ADD:       return parseAddCommand(args);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                case Strings.COMMAND_EDIT:      return parseEditCommand(args);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_HELP:      return parseHelpCommand(args);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_FIND:      return parseFindCommand(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_LIST:      return parseListCommand(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_DELETE:    return parseDeleteCommand(args);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                case Strings.COMMAND_MAKE:      return parseMakeCommand(args);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                case Strings.COMMAND_VIEW:      return parseViewCommand(args);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_FILTER:    return parseFilterCommand(args);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                case Strings.COMMAND_UNDO:      return Result.of(new UndoCommand());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                case Strings.COMMAND_REDO:      return Result.of(new RedoCommand());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case Strings.COMMAND_QUIT:      return Result.of(new QuitCommand());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                case Strings.COMMAND_STATS:     return parseStatsCommand(args);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Unknown command \u0027%s\u0027\", args.getCommand());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Pair\u003cString, StringView\u003e splitUntilNextSlash(StringView input) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (; i \u003c input.size(); i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (i + 1 \u003c input.size() \u0026\u0026 input.at(i) \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 input.at(i + 1) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                i +\u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                sb.append(\"/\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (input.at(i) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                sb.append(input.at(i));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Pair.of(sb.toString().strip(), input.drop(i));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 126,
      "Trav1sT": 2,
      "seowalex": 12,
      "fall9x": 2
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/ItemReference.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ItemReference.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Either;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ItemReference {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Either\u003cInteger, String\u003e reference;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private ItemReference(Either\u003cInteger, String\u003e ref) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.reference \u003d ref;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the zero-based index of the itemreference, if it was an indexed reference."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Integer getZeroIndex() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.fromLeft();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the one-based index of the ItemReference, if it was an indexed reference."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Integer getOneIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return 1 + this.getZeroIndex();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns the lowercased name of the itemreference, if it was a named reference."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.fromRight();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true iff the {@code ItemReference} was made with an index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isIndexed() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.isLeft();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns true iff the {@code ItemReference} was made with a name."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isNamed() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.reference.isRight();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an {@code ItemReference} using the given zero-based index."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param idx the zero-based index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    an ItemReference"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static ItemReference ofZeroIndex(int idx) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (idx \u003c 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IndexOutOfBoundsException(String.format(\"idx cannot be negative\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ItemReference(Either.left(idx));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an {@code ItemReference} using the given one-based index."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param idx the one-based index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    an ItemReference"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static ItemReference ofOneIndex(int idx) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (idx \u003c\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IndexOutOfBoundsException(String.format(\"idx must be positive\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ItemReference(Either.left(idx - 1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates an {@code ItemReference} using the given name. Note that the name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * is case-insensitive."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param name the name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     an ItemReference"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static ItemReference ofName(String name) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ItemReference(Either.right(name.toLowerCase()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Automatically parses an {@code ItemReference} given the string input. The denotation"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * for an indexed reference is {@code #3}, where \u00273\u0027 is a 1-based index (ie. it is the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * third item here). Anything else not starting with a \u0027#\u0027 is considered a name."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cItemReference\u003e parse(String input) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Empty input\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (input.startsWith(\"#\")) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return new StringView(input)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .drop(1)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .parseInt()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .then(i -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    if (i \u003c\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return Result.error(\"Invalid index (cannot be zero or negative)\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return Result.of(ItemReference.ofOneIndex(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                });"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(ItemReference.ofName(input));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this \u003d\u003d obj"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            || (obj instanceof ItemReference"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \u0026\u0026 ((ItemReference) obj).reference.equals(this.reference));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.reference.isLeft()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return String.format(\"#%d\", this.getZeroIndex() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.reference.fromRight();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 129,
      "seowalex": 3
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// AddCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.AddRecipeCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.AddIngredientCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_EXPIRY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_INGREDIENT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_QUANTITY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_STEP;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_ADD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses an \u0027add\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add recipe NAME [/ingredient INGREDIENT_NAME [/qty QTY1]...]... [/step STEP]...}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add ingredient NAME [/qty QUANTITY] [/expiry DATE]}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     an AddCommand, if the input was valid."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseAddCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_ADD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (target.snd().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Recipe or ingredient name cannot be empty\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseAddRecipeCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseAddIngredientCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Can only add recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses an \u0027add ingredient\u0027 command. Syntax:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add ingredient NAME [/qty QUANTITY] [/expiry DATE]}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cAddIngredientCommand\u003e parseAddIngredientCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var supportedArgs \u003d List.of(ARG_QUANTITY, ARG_EXPIRY, ARG_TAG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"add ingredient\", supportedArgs)).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var qtys \u003d args.getArgument(ARG_QUANTITY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (qtys.size() \u003e 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Multiple quantities specified\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (qtys.size() \u003d\u003d 1 \u0026\u0026 qtys.get(0).isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Specified quantity cannot be emtpy\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var exps \u003d args.getArgument(ARG_EXPIRY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (exps.size() \u003e 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Multiple expiry dates specified\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (exps.size() \u003d\u003d 1 \u0026\u0026 exps.get(0).isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Specified expiry date cannot be empty\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tags \u003d args.getArgument(ARG_TAG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagSet \u003d Set.copyOf(tags.stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .map(x -\u003e new Tag(x))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // looks weird, but basically this extracts the /qty and /expiry arguments (if present),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // then constructs the command from it -- while returning any intermediate error messages."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.transpose(qtys"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(Quantity::parse))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(qty -\u003e Result.transpose(exps"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .map(e -\u003e Result.of(e)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .then(exp -\u003e createAddIngredientCommand(name, qty, exp, tagSet))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses an \u0027add recipe\u0027 command. Syntax:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code add recipe NAME [/ingredient INGREDIENT_NAME [/qty QTY1]...]... [/step STEP]...}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cAddRecipeCommand\u003e parseAddRecipeCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var supportedArgs \u003d List.of(ARG_QUANTITY, ARG_INGREDIENT, ARG_STEP, ARG_TAG);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"add recipe\", supportedArgs)).isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tags \u003d args.getArgument(ARG_TAG);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagSet \u003d Set.copyOf(tags.stream()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .map(x -\u003e new Tag(x))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        );"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return parseIngredientList(args)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(ingrs -\u003e createAddRecipeCommand(name, ingrs,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                args.getAllArguments()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .filter(p -\u003e p.fst().equals(ARG_STEP))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .map(p -\u003e p.snd())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .map(x -\u003e new Step(x))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                tagSet)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse the list of ingredients."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cList\u003cIngredientReference\u003e\u003e parseIngredientList(CommandArguments args) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // what is this, imperative code??"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var arglist \u003d args.getAllArguments();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredients \u003d new ArrayList\u003cIngredientReference\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (int i \u003d 0; i \u003c arglist.size(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var p \u003d arglist.get(i);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (p.fst().equals(ARG_INGREDIENT)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var name \u003d p.snd();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (name.isEmpty()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Ingredient name cannot be empty\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                Optional\u003cQuantity\u003e quantity \u003d Optional.empty();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // check the next argument for a quantity (which is optional)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (i + 1 \u003c arglist.size()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var q \u003d arglist.get(i + 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    if (q.fst().equals(ARG_QUANTITY)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        var qty \u003d Quantity.parse(q.snd());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        if (qty.isError()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            return Result.error(qty.getError());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            quantity \u003d Optional.of(qty.getValue());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            // skip the quantity now that we\u0027ve handled it."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            i++;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ingredients.add(new IngredientReference(name, quantity));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (p.fst().equals(ARG_QUANTITY)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"\u0027%s\u0027 without ingredient in argument %d [/qty %s...]\","
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    ARG_QUANTITY, i + 1, new StringView(p.snd()).take(4));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // do nothing."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(ingredients);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static AddRecipeCommand createAddRecipeCommand(String name,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cIngredientReference\u003e ingredients, List\u003cStep\u003e steps, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new AddRecipeCommand(name, ingredients, steps, tags);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cAddIngredientCommand\u003e createAddIngredientCommand(String name, Optional\u003cQuantity\u003e qty,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Optional\u003cString\u003e expiry, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.transpose(expiry"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(ExpiryDate::of))"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(exp -\u003e new AddIngredientCommand(name, qty, exp, tags));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 17,
      "zhiayang": 197,
      "Trav1sT": 3,
      "seowalex": 2
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/CommandTarget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandTarget.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Just a very simple enumeration to represent the \"target\" of a command, which is either"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * recipes (eg. add recipe) or ingredients (eg. add ingredient)."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public enum CommandTarget {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    RECIPE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    INGREDIENT,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    RECOMMENDATION;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a {@code CommandTarget} from its name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Optional\u003cCommandTarget\u003e of(String str) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return of(str, false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a {@code CommandTarget} from its name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Optional\u003cCommandTarget\u003e of(String str, boolean acceptsPlural) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (str.equals(\"recipe\") || (acceptsPlural \u0026\u0026 str.equals(\"recipes\"))) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Optional.of(RECIPE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (str.equals(\"ingredient\") || (acceptsPlural \u0026\u0026 str.equals(\"ingredients\"))) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Optional.of(INGREDIENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else if (str.equals(\"recommendation\") || (acceptsPlural \u0026\u0026 str.equals(\"recommendations\"))) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return Optional.of(RECOMMENDATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 37,
      "seowalex": 5
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/CommonParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommonParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Strings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommonParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks that the named arguments only contain those in the {@code knownArgs} list. If there was an"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * unexpected argument, it returns an error message. If not, it returns an empty optional."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * If acceptsEditArguments is false, then it also checks that none of the arguments contain augmented"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * components (and it returns an appropriate message too)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Optional\u003cString\u003e checkArguments(CommandArguments args, String cmdname,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        List\u003cArgName\u003e knownArgs, boolean acceptsEditArguments) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // it\u0027s easier to do this imperatively."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var arg : args.getAllArguments()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (!arg.fst().getComponents().isEmpty() \u0026\u0026 !acceptsEditArguments) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Optional.of(String.format(\"\u0027%s\u0027 command doesn\u0027t support edit-arguments (found \u0027%s\u0027)\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    cmdname, arg.fst()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else if (!knownArgs.contains(arg.fst())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Optional.of(String.format(\"\u0027%s\u0027 command doesn\u0027t support \u0027%s\u0027\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    cmdname, arg.fst()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Convenience overload of {@code checkArguments} for commands that don\u0027t support edit args."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Optional\u003cString\u003e checkArguments(CommandArguments args, String cmdname,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        List\u003cArgName\u003e knownArgs) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return checkArguments(args, cmdname, knownArgs, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Convenience overload of {@code checkArguments} for commands that take no arguments."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Optional\u003cString\u003e checkArguments(CommandArguments args, String cmdname) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return checkArguments(args, cmdname, List.of(), false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Gets the \u0027target\u0027 of a command, which is either \u0027ingredient\u0027 or \u0027recipe\u0027. Returns either an error"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * if the target was invalid or empty, or a pair consisting of the {@code CommandTarget}, and the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * rest of the unnamed arguments."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param acceptsPlural determines if \u0027recipeS\u0027 and \u0027ingredientS\u0027 are accepted in addition"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *                      to their singular counterparts."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cPair\u003cCommandTarget, String\u003e\u003e getCommandTarget(CommandArguments args,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        boolean acceptsPlural) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var str \u003d args.getRemaining();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (str.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"no target specified (either \u0027recipe\u0027, \u0027ingredient\u0027%s)\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                args.getCommand().equals(Strings.COMMAND_LIST) ?  \", or \u0027recommendation\u0027\" : \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var x \u003d new StringView(str).bisect(\u0027 \u0027).fst().trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xs \u003d new StringView(str).bisect(\u0027 \u0027).snd().trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.ofOptional("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            CommandTarget.of(x.toString(), acceptsPlural)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .map(target -\u003e Pair.of(target, xs.toString())),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"Unknown target \u0027%s\u0027\", x)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * See {@code getCommandTarget(CommandArguments)}; this one is just a convenience overload."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cPair\u003cCommandTarget, String\u003e\u003e getCommandTarget(CommandArguments args) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args, /* acceptsPlural: */ false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Ensures that the command name matches the given string."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static void ensureCommandName(CommandArguments args, String name) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!args.getCommand().equals(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IllegalArgumentException(\"invalid command name passed to parser\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 102,
      "seowalex": 3
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// DeleteCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.DeleteRecipeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.DeleteIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_QUANTITY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_DELETE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027delete\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete recipe REF}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code delete ingredient REF [/qty QUANTITY]}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a DeleteCommand, if the input was valid."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseDeleteCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_DELETE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (target.snd().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Recipe or ingredient name cannot be empty\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseDeleteRecipeCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return parseDeleteIngredientCommand(target.snd().strip(), args);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Can only delete recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027delete ingredient\u0027 command. Syntax:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code delete ingredient REF [/qty QUANTITY]}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cDeleteIngredientCommand\u003e parseDeleteIngredientCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"delete ingredient\", List.of(ARG_QUANTITY))).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var qtys \u003d args.getArgument(ARG_QUANTITY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (qtys.size() \u003e 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Multiple quantities specified\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (qtys.size() \u003d\u003d 1 \u0026\u0026 qtys.get(0).isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Specified quantity cannot be emtpy\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ItemReference.parse(name)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            .then(ref -\u003e Result.transpose(qtys"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .map(Quantity::parse))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .map(qty -\u003e new DeleteIngredientCommand(ref, qty)));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027delete recipe\u0027 command. Syntax:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code delete recipe REF}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cDeleteRecipeCommand\u003e parseDeleteRecipeCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"delete recipe\")).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ItemReference.parse(name).map(DeleteRecipeCommand::new);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 77,
      "seowalex": 15
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.EditRecipeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.EditOperationType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.IngredientEditDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.RecipeEditDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.StepEditDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.edit.TagEditDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_INGREDIENT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_QUANTITY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_STEP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_EDIT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses an \u0027edit\u0027 command. Syntax:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code edit recipe \u003c#REF\u003e (...)}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     an AddCommand, if the input was valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseEditCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_EDIT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (target.snd().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Recipe name cannot be empty\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else if (target.fst() !\u003d CommandTarget.RECIPE) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Only recipes can be edited\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return ItemReference.parse(target.snd());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            })"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(item -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                Optional\u003cString\u003e editedName \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var tagEdits \u003d new ArrayList\u003cResult\u003cTagEditDescriptor\u003e\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var stepEdits \u003d new ArrayList\u003cResult\u003cStepEditDescriptor\u003e\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var ingrEdits \u003d new ArrayList\u003cResult\u003cIngredientEditDescriptor\u003e\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                for (int i \u003d 0; i \u003c args.getAllArguments().size(); i++) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var arg \u003d args.getAllArguments().get(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var argName \u003d arg.fst();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    var argValue \u003d arg.snd();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    if (argName.nameEquals(ARG_NAME)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        if (argValue.isEmpty()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            return Result.error(\"Expected a name after \u0027/name\u0027\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        } else if (editedName.isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            return Result.error(\"Only one \u0027/name\u0027 should be provided\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        editedName \u003d Optional.of(argValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    } else if (argName.nameEquals(ARG_TAG)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        tagEdits.add(parseTagEdit(argName, argValue));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    } else if (argName.nameEquals(ARG_STEP)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        stepEdits.add(parseStepEdit(argName, argValue));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    } else if (argName.nameEquals(ARG_INGREDIENT)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        Optional\u003cQuantity\u003e qty \u003d Optional.empty();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        if (i + 1 \u003c args.getAllArguments().size()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            var nextArg \u003d args.getAllArguments().get(i + 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            if (nextArg.fst().equals(ARG_QUANTITY)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                var q \u003d Quantity.parse(nextArg.snd());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                if (q.isError()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                    return Result.error(q.getError());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                    qty \u003d q.toOptional();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                // skip it on the next turn."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                                i +\u003d 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        ingrEdits.add(parseIngredientEdit(argName, argValue, qty));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    } else if (argName.nameEquals(ARG_QUANTITY)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return Result.error(\"/qty can only appear after an /ingredient:add or /ingredient:delete\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        return Result.error(\"\u0027edit\u0027 command doesn\u0027t support \u0027%s\u0027\", argName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // ugly AF, but i don\u0027t care at the moment."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var tes \u003d Result.sequence(tagEdits);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var ses \u003d Result.sequence(stepEdits);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var ies \u003d Result.sequence(ingrEdits);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (tes.isError()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(tes.getError());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else if (ses.isError()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(ses.getError());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                } else if (ies.isError()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(ies.getError());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                return Result.of(new EditRecipeCommand(item,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    new RecipeEditDescriptor(editedName, ies.getValue(), ses.getValue(), tes.getValue())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cIngredientEditDescriptor\u003e parseIngredientEdit(ArgName argName, String ingredientName,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cQuantity\u003e qty) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var components \u003d argName.getComponents();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (components.isEmpty()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected either /ingredient:add, /ingredient:edit, or /ingredient:delete\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var op \u003d components.get(0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (components.size() !\u003d 1 || !List.of(\"add\", \"edit\", \"delete\").contains(op)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected either (and only) \u0027add\u0027, \u0027edit\u0027, or \u0027delete\u0027 after \u0027/ingredient:\u0027\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (ingredientName.isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected ingredient name after /ingredient:%s\", op);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ensureNoArgsForDeleteAndGetOperationType(\"quantity\", \"ingredient\", op, qty.isEmpty())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(kind -\u003e new IngredientEditDescriptor(kind, ingredientName, qty));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cTagEditDescriptor\u003e parseTagEdit(ArgName argName, String argValue) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var comps \u003d argName.getComponents();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (comps.isEmpty()) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected either /tag:add or /tag:delete\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var op \u003d comps.get(0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (comps.size() !\u003d 1 || !List.of(\"add\", \"delete\").contains(op)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected either /tag:add or /tag:delete\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (argValue.isEmpty()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected tag name after /tag:add or /tag:delete\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else if (!Tag.isValidTag(argValue)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(new TagEditDescriptor("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            op.equals(\"add\") ? EditOperationType.ADD : EditOperationType.DELETE,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            argValue"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cStepEditDescriptor\u003e parseStepEdit(ArgName argName, String argValue) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var components \u003d argName.getComponents();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (components.isEmpty()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"expected either /step:add, /step:edit, or /step:delete\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var op \u003d components.get(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // first get the step number."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cInteger\u003e optStep \u003d Optional.empty();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (components.size() \u003e 1) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            int stepnum \u003d 0;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                stepnum \u003d Integer.parseInt(components.get(1));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"\u0027%s\u0027 was not a valid step number (expected /step:%s:\u003cnumber\u003e)\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    components.get(1), op);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (stepnum \u003c\u003d 0) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Step number should be greater than 0\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            optStep \u003d Optional.of(stepnum);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        final var stepNumber \u003d optStep;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (op.equals(\"add\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // for add, the index is optional."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (components.size() \u003e 2) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Expected either /step:add or /step:add:\u003cnumber\u003e\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (argValue.isEmpty()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Expected non-empty step after /step:add\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new StepEditDescriptor(EditOperationType.ADD, stepNumber, argValue));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (op.equals(\"edit\") || op.equals(\"delete\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // either stepNumber will be valid, or component size is not 2, because:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // (a) if #components was \u003e 1, then we either got a valid step number, or returned"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // (b) if #components was \u003c\u003d 1, then it is !\u003d 2, so we will return here."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (components.size() !\u003d 2) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Expected number after /step:%s (eg. /step:%s:3)\", op, op);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return ensureNoArgsForDeleteAndGetOperationType(\"step\", op, argValue.isEmpty())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .map(kind -\u003e new StepEditDescriptor(kind, stepNumber, argValue));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected either /step:add, /step:edit, or /step:delete\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cEditOperationType\u003e ensureNoArgsForDeleteAndGetOperationType("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String editor, String editor2, String op, boolean argIsEmpty) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (op.equals(\"add\")) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (argIsEmpty) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Expected non-empty %s after /%s:%s\", editor, editor2, op);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(EditOperationType.ADD);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (op.equals(\"edit\")) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (argIsEmpty) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Expected non-empty %s after /%s:%s\", editor, editor2, op);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(EditOperationType.EDIT);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (op.equals(\"delete\")) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (!argIsEmpty) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Result.error(\"Unexpected %s after /%s:%s\", editor, editor2, op);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(EditOperationType.DELETE);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Expected either /%s:add, /%s:edit, or /%s:delete\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                editor, editor, editor);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static Result\u003cEditOperationType\u003e ensureNoArgsForDeleteAndGetOperationType("
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String editor, String op, boolean argIsEmpty) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ensureNoArgsForDeleteAndGetOperationType(editor, editor, op, argIsEmpty);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 284,
      "seowalex": 4
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/FilterCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "// FilterCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": "//@@author hjl99"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.FilterIngredientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.commands.FilterRecipeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDateMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.IngredientsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_EXPIRY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_INGREDIENT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_FILTER;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FilterCommandParser {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses a \u0027filter\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code filter recipe (keywords)+}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code filter ingredient (keywords)+}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @return     a FilterCommand, if the input was valid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseFilterCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ensureCommandName(args, COMMAND_FILTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return getCommandTarget(args, /* acceptsPlural: */ true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                if (args.getAllArguments().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return Result.error(\"Filtering criteria cannot be empty!\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return parseFilterRecipeCommand(args);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return parseFilterIngredientCommand(args);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    return Result.error(\"Can only filter recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static Result\u003c? extends Command\u003e parseFilterIngredientCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var supportedArgs \u003d List.of(ARG_TAG, ARG_EXPIRY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if ((err \u003d checkArguments(args, \"filter ingredient\", supportedArgs)).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var exps \u003d args.getArgument(ARG_EXPIRY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tags \u003d args.getArgument(ARG_TAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if ((err \u003d checkImproperFieldInput(\"Expiry date\", exps)).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if ((err \u003d checkImproperFieldInput(\"Tag\", tags)).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return parseExpiryDates(exps)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .map(optExpiry -\u003e new FilterIngredientCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                optExpiry.map(ExpiryDateMatchesKeywordsPredicate::new).orElse(null),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                tags.isEmpty() ? null : new TagContainsKeywordsPredicate(tags)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static Result\u003c? extends Command\u003e parseFilterRecipeCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var supportedArgs \u003d List.of(ARG_TAG, ARG_INGREDIENT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if ((err \u003d checkArguments(args, \"filter recipe\", supportedArgs)).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var ingredients \u003d args.getArgument(ARG_INGREDIENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tags \u003d args.getArgument(ARG_TAG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if ((err \u003d checkImproperFieldInput(\"Tag\", tags)).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        } else if ((err \u003d checkImproperFieldInput(\"Ingredient\", ingredients)).isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Result.of(new FilterRecipeCommand("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            tags.isEmpty() ? null : new TagContainsKeywordsPredicate(tags),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            ingredients.isEmpty() ? null : new IngredientsContainsKeywordsPredicate(ingredients)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the first expiry date (chronologically) from the given list, or an"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * error if any of them failed to parse."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static Result\u003cOptional\u003cExpiryDate\u003e\u003e parseExpiryDates(List\u003cString\u003e args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Result.sequence(args.stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .map(ExpiryDate::of)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .collect(Collectors.toList())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ).map(exps -\u003e exps.stream().sorted().findFirst());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an error message if there was an error."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static Optional\u003cString\u003e checkImproperFieldInput(String kind, List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            var s \u003d list.get(i);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (s.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                return Optional.of(String.format(\"%s cannot be empty\", kind));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            } else if (kind.equals(\"Expiry date\") \u0026\u0026 s.split(\"\\\\s+\").length \u003e 1) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                return Optional.of(String.format(\"Expiry date cannot contain spaces\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 140
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// FindCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.FindRecipeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.FindIngredientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_FIND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027find\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * {@code find recipe (keywords)+}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * {@code find ingredient (keywords)+}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a FindCommand, if the input was valid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseFindCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_FIND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we expect no named arguments. note we don\u0027t need to check for augments."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"find\")).isPresent()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args, /* acceptsPlural: */ true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var words \u003d new StringView(target.snd()).words();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (words.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"\u0027find\u0027 command requires at least one search term\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new FindRecipeCommand(new NameContainsKeywordsPredicate(words)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new FindIngredientCommand(new NameContainsKeywordsPredicate(words)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.error(\"Can only find recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 55,
      "seowalex": 2,
      "fall9x": 2
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/HelpCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// HelpCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_HELP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class HelpCommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027help\u0027 command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a HelpCommand, if the input was valid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseHelpCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_HELP);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we expect no named arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"help\")).isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this is a little different from normal commands and their targets, so just"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // parse this manually. since this is the HELP command, we should be a little"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // more forgiving of mistakes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var words \u003d new StringView(args.getRemaining()).words();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e cmd \u003d words.size() \u003e 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Optional.of(words.get(0))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e tgt \u003d words.size() \u003e 1"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ? Optional.of(String.join(\" \", words.subList(1, words.size())))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // for now, instead of erroring on arguments, we just let it pass through."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we might want to display command-specific help in the future."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(new HelpCommand(cmd, tgt));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 49,
      "Trav1sT": 1,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ListCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.ListRecipeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.ListIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.commands.ListRecommendationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_LIST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parses a \u0027list\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code list recipe}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * {@code list ingredient}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return     a ListCommand, if the input was valid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseListCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_LIST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we expect no named arguments"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"list\")).isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return getCommandTarget(args, /* acceptsPlural: */ true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new ListRecipeCommand());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    return Result.of(new ListIngredientCommand());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                case RECOMMENDATION:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    return Result.of(new ListRecommendationCommand());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    return Result.error(\"Can only list recipes, ingredients or recommendations (\u0027%s\u0027 invalid)\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            target.fst());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 50,
      "seowalex": 6
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/MakeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.commands.MakeRecipeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_MAKE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class MakeCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Parses a \u0027make\u0027 command. Syntax:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code make recipe REF}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return     a MakeCommand, if the input was valid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseMakeCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_MAKE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        // we expect no named arguments"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"make\")).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var name \u003d args.getRemaining();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Recipe name cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return ItemReference.parse(name).map(MakeRecipeCommand::new);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 15,
      "seowalex": 25
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/StatsCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StatsCommandParser.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "//@@author trav1sT"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.StatsIngredientClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.StatsIngredientRecentCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.StatsIngredientUsedCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.StatsRecipeClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.StatsRecipeMadeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.StatsRecipeRecentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.StatsRecipeTopCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_AFTER;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.ARG_BEFORE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_STATS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.STATS_KIND_CLEAR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.STATS_KIND_MADE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.STATS_KIND_RECENT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.STATS_KIND_TOP;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.Strings.STATS_KIND_USED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.getCommandTarget;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsCommandParser {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Parses a \u0027stats\u0027 command. Syntax(es):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseStatsCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ensureCommandName(args, COMMAND_STATS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return getCommandTarget(args, /* acceptsPlural: */ true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .then(target -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                var words \u003d new StringView(target.snd()).words();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                switch (target.fst()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                case RECIPE:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return parseRecipeStatsCommand(args, target.snd().strip());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                case INGREDIENT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return parseIngredientStatsCommand(args, target.snd().strip());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return Result.error(\"Can only find stats of recipes or ingredients (\u0027%s\u0027 invalid)\", target.fst());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static Result\u003c? extends Command\u003e parseRecipeStatsCommand(CommandArguments args, String kind) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var c \u003d \"stats recipe\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        switch (kind) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case STATS_KIND_TOP:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ensureNoArgs(args, c + \" \" + STATS_KIND_TOP, new StatsRecipeTopCommand());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case STATS_KIND_CLEAR:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ensureNoArgs(args, c + \" \" + STATS_KIND_CLEAR, new StatsRecipeClearCommand());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case STATS_KIND_RECENT:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ensureNoArgs(args, c + \" \" + STATS_KIND_RECENT, new StatsRecipeRecentCommand());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case STATS_KIND_MADE:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return parseDateRecipeCommand(kind, args);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(\"Expected one of \u0027top\u0027, \u0027made\u0027, \u0027recent\u0027, or \u0027clear\u0027\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                + \" after \u0027%s\u0027 (found \u0027%s\u0027)\", c, kind);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static Result\u003c? extends Command\u003e parseIngredientStatsCommand(CommandArguments args, String kind) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var c \u003d \"stats ingredient\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        switch (kind) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case STATS_KIND_CLEAR:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ensureNoArgs(args, c + \" \" + STATS_KIND_CLEAR, new StatsIngredientClearCommand());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case STATS_KIND_RECENT:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return ensureNoArgs(args, c + \" \" + STATS_KIND_RECENT, new StatsIngredientRecentCommand());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        case STATS_KIND_USED:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return parseDateIngredientCommand(kind, args);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(\"Expected one of \u0027used\u0027, \u0027recent\u0027, or \u0027clear\u0027\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                + \" after \u0027%s\u0027 (found \u0027%s\u0027)\", c, kind);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static Result\u003cStatsRecipeMadeCommand\u003e parseDateRecipeCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var supportedArgs \u003d List.of(ARG_BEFORE, ARG_AFTER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if ((err \u003d checkArguments(args, \"stats recipe\", supportedArgs)).isPresent()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var after \u003d args.getArgument(ARG_AFTER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var before \u003d args.getArgument(ARG_BEFORE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (before.size() \u003e 1 || after.size() \u003e 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(\"Multiple dates specified\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var arg1 \u003d processDate(after).orElse(null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var arg2 \u003d processDate(before).orElse(null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.of(new StatsRecipeMadeCommand(arg1, arg2));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(\"Unable to parse date\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static Result\u003cStatsIngredientUsedCommand\u003e parseDateIngredientCommand(String name, CommandArguments args) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var supportedArgs \u003d List.of(ARG_BEFORE, ARG_AFTER);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if ((err \u003d checkArguments(args, \"stats ingredient\", supportedArgs)).isPresent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var after \u003d args.getArgument(ARG_AFTER);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var before \u003d args.getArgument(ARG_BEFORE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (before.size() \u003e 1 || after.size() \u003e 1) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(\"Multiple dates specified\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var arg1 \u003d processDate(after).orElse(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            var arg2 \u003d processDate(before).orElse(null);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.of(new StatsIngredientUsedCommand(arg1, arg2));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(\"Unable to parse date: %s\", e.getMessage());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static Optional\u003cLocalDateTime\u003e processDate(List\u003cString\u003e strings) throws DateTimeParseException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert strings.size() \u003c 2;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (strings.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var timeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String val \u003d strings.get(0);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (val.matches(\"[0-9]{4}-[0-9]{2}-[0-9]{2}\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.of(LocalDateTime.of(LocalDate.parse(val, formatter), LocalTime.of(0, 0)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.of(LocalDateTime.parse(val, timeFormatter));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static Result\u003c? extends Command\u003e ensureNoArgs(CommandArguments args, String cmd, Command ret) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if ((err \u003d checkArguments(args, cmd)).isPresent()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return Result.of(ret);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "Trav1sT": 190
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/commands/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.CommandArguments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_VIEW;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.checkArguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.parser.commands.CommonParser.ensureCommandName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class ViewCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Parses a \u0027view\u0027 command. Syntax:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * {@code view recipe REF}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param args the parsed command arguments from the {@code CommandParser}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @return     a ViewCommand , if the input was valid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static Result\u003c? extends Command\u003e parseViewCommand(CommandArguments args) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ensureCommandName(args, COMMAND_VIEW);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // we expect no named arguments"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Optional\u003cString\u003e err;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if ((err \u003d checkArguments(args, \"view\")).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(err.get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var name \u003d args.getRemaining();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Recipe name cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return ItemReference.parse(name).map(ViewCommand::new);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 10,
      "fall9x": 30
    }
  },
  {
    "path": "src/main/java/chopchop/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ParseException.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.exceptions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * An exception thrown when a parsing error occurs."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 12
    }
  },
  {
    "path": "src/main/java/chopchop/logic/recommendation/RecommendationManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.logic.recommendation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class RecommendationManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e recommendedRecipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e expiringRecipes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e oldRecipes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Recommendation Manager for recommendations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public RecommendationManager(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recommendedRecipes \u003d new FilteredList\u003c\u003e(model.getRecipeBook().getEntryList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                this.getRecommendedRecipesPredicate(model));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.expiringRecipes \u003d new FilteredList\u003c\u003e("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new SortedList\u003c\u003e("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        model.getRecipeBook().getEntryList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        this.getExpiringRecipesComparator(model)),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                this.getExpiringRecipesPredicate(model));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.oldRecipes \u003d new FilteredList\u003c\u003e(model.getRecipeBook().getEntryList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        model.getIngredientBook().getEntryList().addListener((ListChangeListener\u003cIngredient\u003e) ingredient -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.recommendedRecipes.setPredicate(this.getRecommendedRecipesPredicate(model));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.expiringRecipes.setPredicate(this.getExpiringRecipesPredicate(model));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public FilteredList\u003cRecipe\u003e getRecommendedRecipeList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recommendedRecipes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public FilteredList\u003cRecipe\u003e getExpiringRecipeList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.expiringRecipes;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Predicate\u003cRecipe\u003e getRecommendedRecipesPredicate(Model model) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return recipe -\u003e recipe.getIngredients().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .allMatch(ingredientRef -\u003e model.findIngredientWithName(ingredientRef.getName())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        .map(ingredient -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                return ingredientRef.getQuantity().compareTo(ingredient.getQuantity()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            } catch (IncompatibleIngredientsException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        }).orElse(false));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Predicate\u003cRecipe\u003e getExpiringRecipesPredicate(Model model) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.getRecommendedRecipesPredicate(model).and(recipe -\u003e recipe.getIngredients().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .anyMatch(ingredientRef -\u003e model.findIngredientWithName(ingredientRef.getName())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        .flatMap(ingredient -\u003e ingredient.getExpiryDate()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                .map(expiryDate -\u003e LocalDate.now().plusDays(7).isAfter(expiryDate.getDate())))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        .orElse(false)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Comparator\u003cRecipe\u003e getExpiringRecipesComparator(Model model) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return (a, b) -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            var expiryA \u003d a.getIngredients().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    // map all IngredientReferences to Ingredients"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .map(ingredientRef -\u003e model.findIngredientWithName(ingredientRef.getName())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            // get the expiry date if present"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            .flatMap(Ingredient::getExpiryDate))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    // Compare all the expiry dates and get the earliest"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .reduce(Optional.empty(), (result, ingredient) -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            Ingredient.SET_COMPARATOR.compare(ingredient, result) \u003c 0 ? ingredient : result);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            var expiryB \u003d b.getIngredients().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .map(ingredientRef -\u003e model.findIngredientWithName(ingredientRef.getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            .flatMap(Ingredient::getExpiryDate))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .reduce(Optional.empty(), (result, ingredient) -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            Ingredient.SET_COMPARATOR.compare(ingredient, result) \u003c 0 ? ingredient : result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return Ingredient.SET_COMPARATOR.compare(expiryA, expiryB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 87
    }
  },
  {
    "path": "src/main/java/chopchop/model/Entry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public abstract class Entry {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    protected Entry(String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.name.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public abstract Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public abstract Optional\u003cExpiryDate\u003e getExpiryDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if both entries have the same name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * This defines a weaker notion of equality between two entries."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public abstract boolean isSame(Entry other);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if both entries have the same fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * This defines a stronger notion of equality between two entries."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof Entry"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.name.equals(((Entry) other).name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.name.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 9,
      "seowalex": 40
    }
  },
  {
    "path": "src/main/java/chopchop/model/EntryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Wraps all data at the entry book level"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Duplicates are not allowed (by .isSame comparison)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class EntryBook\u003cT extends Entry\u003e implements ReadOnlyEntryBook\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    protected final UniqueEntryList\u003cT\u003e entries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public EntryBook() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.entries \u003d new UniqueEntryList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Creates an EntryBook using the Entries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public EntryBook(ReadOnlyEntryBook\u003cT\u003e toBeCopied) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.resetData(toBeCopied);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Replaces the contents of the entries list with {@code entries}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setAll(List\u003cT\u003e entries) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.entries.setAll(entries);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Resets the existing data of this {@code EntryBook} with {@code newData}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void resetData(ReadOnlyEntryBook\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.setAll(newData.getEntryList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if an entry with the same identity as {@code entry} exists in the entry book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean has(T entry) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(entry);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.entries.contains(entry);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Adds an entry to the entry book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The entry must not already exist in the entry book."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void add(T entry) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.entries.add(entry);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Replaces the given entry {@code target} in the list with {@code replacement}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code target} must exist in the entry book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The entry identity of {@code replacement} must not be the same as another existing entry in the entry book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void set(T target, T replacement) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.entries.set(target, replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Removes {@code entry} from this {@code EntryBook}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code entry} must exist in the entry book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void remove(T entry) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.entries.remove(entry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.entries.asUnmodifiableObservableList().size() + \" entries\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ObservableList\u003cT\u003e getEntryList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.entries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof EntryBook"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.entries.equals(((EntryBook\u003c?\u003e) other).entries));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.entries.hashCode();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 100
    }
  },
  {
    "path": "src/main/java/chopchop/model/FoodEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class FoodEntry {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected FoodEntry(Name name) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public abstract int hashCode();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 17,
      "seowalex": 3
    }
  },
  {
    "path": "src/main/java/chopchop/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Predicate\u003cEntry\u003e PREDICATE_SHOW_ALL_ENTRIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the user prefs\u0027 recipe book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipeBookFilePath(Path recipeBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces recipe book data with the data in {@code recipeBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void setRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /** Returns the ReadOnlyRecipeBook */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    ReadOnlyEntryBook\u003cRecipe\u003e getRecipeBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the recipe book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    boolean hasRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds a recipe by name."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    Optional\u003cRecipe\u003e findRecipeWithName(String name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Deletes the given recipe."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * The recipe must exist in the recipe book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void deleteRecipe(Recipe target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code recipe} must not already exist in the recipe book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void addRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code target} must exist in the recipe book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the recipe book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    void setRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered recipe list */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredRecipeList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Updates the filter of the filtered recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void updateFilteredRecipeList(Predicate\u003c? super Recipe\u003e predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void setIngredientBookFilePath(Path ingredientBookFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Replaces ingredient book data with the data in {@code ingredientBook}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void setIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /** Returns the ReadOnlyIngredientBook */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    ReadOnlyEntryBook\u003cIngredient\u003e getIngredientBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the ingredient book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    boolean hasIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Deletes the given ingredient."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The ingredient must exist in the ingredient book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void deleteIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Finds an ingredient by name."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    Optional\u003cIngredient\u003e findIngredientWithName(String name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code ingredient} must not already exist in the ingredient book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void addIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code target} must exist in the ingredient book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * ingredient book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /** Returns an unmodifiable view of the filtered ingredient list */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredIngredientList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Updates the filter of the filtered ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void updateFilteredIngredientList(Predicate\u003c? super Ingredient\u003e predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Returns the UsageList of recipe */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    UsageList\u003cRecipeUsage\u003e getRecipeUsageList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Returns the UsageList of ingredient */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    UsageList\u003cIngredientUsage\u003e getIngredientUsageList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /** Returns the \u0027actual\u0027 {@code ObservableList\u003c\u003e} backing the RecipeUsageList */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    ObservableList\u003cRecipeUsage\u003e getObservableRecipeUsages();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /** Returns the \u0027actual\u0027 {@code ObservableList\u003c\u003e} backing the IngredientUsageList */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    ObservableList\u003cIngredientUsage\u003e getObservableIngredientUsages();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void addRecipeUsage(Recipe recipe);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void removeRecipeUsage(Recipe recipe);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void addIngredientUsage(IngredientReference ingredient);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void removeIngredientUsage(IngredientReference ingredient);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Sets the RecipeUsageList */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setRecipeUsageList(UsageList\u003cRecipeUsage\u003e rl);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /** Sets the IngredientUsageList */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void setIngredientUsageList(UsageList\u003cIngredientUsage\u003e rl);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    List\u003cRecipeUsage\u003e getRecentlyUsedRecipes(int n);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    List\u003cIngredientUsage\u003e getRecentlyUsedIngredients(int n);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 81,
      "zhiayang": 21,
      "Trav1sT": 56,
      "seowalex": 27
    }
  },
  {
    "path": "src/main/java/chopchop/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Represents the in-memory model of the recipe and ingredient book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final EntryBook\u003cRecipe\u003e recipeBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final EntryBook\u003cIngredient\u003e ingredientBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredRecipes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredIngredients;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UsageList\u003cRecipeUsage\u003e recipeUsageList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UsageList\u003cIngredientUsage\u003e ingredientUsageList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Initializes a ModelManager with the given RecipeBook, IngredientBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ModelManager(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook, ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        UsageList\u003cRecipeUsage\u003e recipeUsageList, UsageList\u003cIngredientUsage\u003e ingredientUsageList,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(recipeBook, ingredientBook, userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        logger.fine(\"Initializing with recipe book: \" + recipeBook + \", ingredient book: \" + ingredientBook"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipeBook \u003d new EntryBook\u003c\u003e(recipeBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredientBook \u003d new EntryBook\u003c\u003e(ingredientBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.filteredRecipes \u003d new FilteredList\u003c\u003e(this.recipeBook.getEntryList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.filteredIngredients \u003d new FilteredList\u003c\u003e(this.ingredientBook.getEntryList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeUsageList \u003d recipeUsageList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientUsageList \u003d ingredientUsageList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs an empty {@code ModelManger}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this(new EntryBook\u003c\u003e(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(), new UsageList\u003cIngredientUsage\u003e(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.userPrefs;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.userPrefs.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.userPrefs.setRecipeBookFilePath(recipeBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.recipeBook.resetData(recipeBook);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ReadOnlyEntryBook\u003cRecipe\u003e getRecipeBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recipeBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recipeBook.has(recipe);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipeBook.remove(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipeBook.add(recipe);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.updateFilteredRecipeList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipeBook.set(target, editedRecipe);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cRecipe\u003e findRecipeWithName(String name) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recipeBook.getEntryList()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            .filter(recipe -\u003e recipe.getName().equalsIgnoreCase(name))"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code versionedEntryBook\u003cRecipe\u003e}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.filteredRecipes;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003c? super Recipe\u003e predicate) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.filteredRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the user prefs\u0027 ingredient book file path."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.userPrefs.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param ingredientBookFilePath"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setIngredientBookFilePath(Path ingredientBookFilePath) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(ingredientBookFilePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.userPrefs.setIngredientBookFilePath(ingredientBookFilePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook.resetData(ingredientBook);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ReadOnlyEntryBook\u003cIngredient\u003e getIngredientBook() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.ingredientBook;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.ingredientBook.has(ingredient);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredientBook.remove(target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredientBook.add(ingredient);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.updateFilteredIngredientList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredientBook.set(target, editedIngredient);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cIngredient\u003e findIngredientWithName(String name) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.ingredientBook.getEntryList()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            .filter(ingredient -\u003e ingredient.getName().equalsIgnoreCase(name))"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .findFirst();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.filteredIngredients;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003c? super Ingredient\u003e predicate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.filteredIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns a copy of RecipeUsage list."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList\u003cRecipeUsage\u003e getRecipeUsageList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new UsageList\u003c\u003e(this.recipeUsageList.getUsageList());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns a copy of IngredientUsage list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList\u003cIngredientUsage\u003e getIngredientUsageList() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new UsageList\u003c\u003e(this.ingredientUsageList.getUsageList());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ObservableList\u003cRecipeUsage\u003e getObservableRecipeUsages() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.recipeUsageList.getUsages();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ObservableList\u003cIngredientUsage\u003e getObservableIngredientUsages() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.ingredientUsageList.getUsages();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Sets the RecipeUsageList"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeUsageList(UsageList\u003cRecipeUsage\u003e rl) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeUsageList.setAll(rl);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Sets the IngredientUsageList"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientUsageList(UsageList\u003cIngredientUsage\u003e il) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientUsageList.setAll(il);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addRecipeUsage(Recipe recipe) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        RecipeUsage usage \u003d new RecipeUsage(recipe.getName(), LocalDateTime.now());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeUsageList.add(usage);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeRecipeUsage(Recipe recipe) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeUsageList.pop(recipe.getName());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredientUsage(IngredientReference ingredient) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientUsage usage \u003d new IngredientUsage(ingredient.getName(), LocalDateTime.now(),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ingredient.getQuantity());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientUsageList.add(usage);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeIngredientUsage(IngredientReference ingredient) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientUsageList.pop(ingredient.getName());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cRecipeUsage\u003e getRecentlyUsedRecipes(int n) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.recipeUsageList.getRecentlyUsed(n);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cIngredientUsage\u003e getRecentlyUsedIngredients(int n) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.ingredientUsageList.getRecentlyUsed(n);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.recipeBook.equals(other.recipeBook)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.filteredRecipes.equals(other.filteredRecipes)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.ingredientBook.equals(other.ingredientBook)"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.filteredIngredients.equals(other.filteredIngredients);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 101,
      "zhiayang": 43,
      "Trav1sT": 120,
      "seowalex": 63
    }
  },
  {
    "path": "src/main/java/chopchop/model/ReadOnlyEntryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Unmodifiable view of an entry book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public interface ReadOnlyEntryBook\u003cT extends Entry\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns an unmodifiable view of the entries list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * This list will not contain any duplicate entries."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    ObservableList\u003cT\u003e getEntryList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 14
    }
  },
  {
    "path": "src/main/java/chopchop/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getRecipeUsageFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientUsageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 14,
      "Trav1sT": 6
    }
  },
  {
    "path": "src/main/java/chopchop/model/UniqueEntryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.EntryNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * A list of entries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * An entry is considered unique by comparing using {@code Entry#isSame(Entry)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * entries uses Entry#isSame(Entry) for equality so as to ensure that the entry being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * unique in terms of identity in the UniqueEntryList. However, the removal of an entry uses Entry#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * as to ensure that the entry with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * @see Entry#isSame(Entry)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class UniqueEntryList\u003cT extends Entry\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if the list contains an equivalent entry as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Adds an entry to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The entry must not already exist in the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.contains(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.internalList.add(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Replaces the entry {@code target} in the list with {@code replacement}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The entry identity of {@code replacement} must not be the same as another existing entry in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void set(T target, T replacement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireAllNonNull(target, replacement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        int index \u003d this.internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!target.isSame(replacement) \u0026\u0026 this.contains(replacement)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.internalList.set(index, replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Removes the equivalent entry from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * The entry must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!this.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new EntryNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setAll(UniqueEntryList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Replaces the contents of this list with {@code entries}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code entries} must not contain duplicate entries."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setAll(List\u003cT\u003e entries) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireAllNonNull(entries);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!this.entriesAreUnique(entries)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new DuplicateEntryException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.internalList.setAll(entries);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof UniqueEntryList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueEntryList\u003c?\u003e) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if {@code entries} contains only unique entries."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private boolean entriesAreUnique(List\u003cT\u003e entries) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (int i \u003d 0; i \u003c entries.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            for (int j \u003d i + 1; j \u003c entries.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                if (entries.get(i).isSame(entries.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 136
    }
  },
  {
    "path": "src/main/java/chopchop/model/UsageList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.Usage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class UsageList\u003cT extends Usage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final ObservableList\u003cT\u003e usages \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code UsageList} based on the usages."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList(List\u003cT\u003e usages) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(usages);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.usages.setAll(usages);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cT\u003e getUsages() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.usages;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Replaces the contents of the usage list with {@code usages}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void setAll(UsageList\u003cT\u003e usages) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.usages.setAll(usages.usages);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds to the stack."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void add(T item) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.usages.add(item);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the latest usage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void pop(String item) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int len \u003d this.usages.size();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (len \u003d\u003d 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (int i \u003d len - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (this.usages.get(i).getName().equals(item)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                this.usages.remove(i);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cT\u003e getUsageList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.usages;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int getUsageCount() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.usages.size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cT\u003e getUsagesAfter(LocalDateTime lowerBound) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(lowerBound);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.usages.stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .filter(x-\u003e x.isAfter(lowerBound))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cT\u003e getUsagesBefore(LocalDateTime upperBound) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(upperBound);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.usages.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .filter(x-\u003e x.isBefore(upperBound))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns a list of string output pairs that can be directly fed into listView."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cPair\u003cString, String\u003e\u003e getUsagesBetween(LocalDateTime after, LocalDateTime before) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (after \u003d\u003d null \u0026\u0026 before \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else if (after !\u003d null \u0026\u0026 before \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return getUsagesAfter(after).stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .map(x -\u003e new Pair\u003c\u003e(x.getName(), x.getPrintableDate()))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else if (after \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return getUsagesBefore(before).stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .map(x -\u003e new Pair\u003c\u003e(x.getName(), x.getPrintableDate()))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return this.usages.stream()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .filter(x -\u003e x.isAfter(after))"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .filter(x -\u003e x.isBefore(before))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .map(x -\u003e new Pair\u003c\u003e(x.getName(), x.getPrintableDate()))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cT\u003e getRecentlyUsed(int n) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert n \u003e\u003d 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sorted \u003d new ArrayList\u003c\u003e(this.usages);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Collections.sort(sorted, new Comparator\u003cT\u003e() { //just in case"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            public int compare(final T o1, final T o2) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                if (o1.getDate().compareTo(o2.getDate()) \u003c 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                } else if (o1.getDate().compareTo(o2.getDate()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return Integer.compare(o2.getName().compareTo(o1.getName()), 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var output \u003d new ArrayList\u003cT\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        int i \u003d sorted.size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        while (i-- \u003e 0 \u0026\u0026 n-- \u003e 0) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            output.add(sorted.get(i));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cPair\u003cString, String\u003e\u003e getMostUsed() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ArrayList\u003cT\u003e newLst \u003d new ArrayList\u003c\u003e(this.usages);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ArrayList\u003cPair\u003cString, Integer\u003e\u003e outputLst \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (var i : newLst) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            int k \u003d 0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (var j : newLst) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                if (i.getName().equals(j.getName())) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    k++;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            if (!outputLst.contains(new Pair\u003c\u003e(i.getName(), k))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                outputLst.add(new Pair\u003c\u003e(i.getName(), k));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Collections.sort(outputLst, new Comparator\u003cPair\u003cString, Integer\u003e\u003e() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            public int compare(final Pair\u003cString, Integer\u003e o1, final Pair\u003cString, Integer\u003e o2) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                if (o1.snd() \u003c o2.snd()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                } else if (o1.snd().equals(o2.snd())) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return Integer.compare(o1.fst().compareTo(o2.fst()), 0);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        });"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return outputLst.stream()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .map(x -\u003e new Pair\u003c\u003e(x.fst(), \"No. of times made: \" + x.snd().toString()))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 17,
      "Trav1sT": 155
    }
  },
  {
    "path": "src/main/java/chopchop/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path recipeBookFilePath \u003d Paths.get(\"data\" , \"recipebook.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path ingredientBookFilePath \u003d Paths.get(\"data\" , \"ingredientbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path recipeUsageFilePath \u003d Paths.get(\"data\" , \"recipeusage.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path ingredientUsageFilePath \u003d Paths.get(\"data\" , \"ingredientusage.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.setIngredientBookFilePath(newUserPrefs.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.setRecipeBookFilePath(newUserPrefs.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.ingredientBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.recipeBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeUsageFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.recipeUsageFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientUsageFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.ingredientUsageFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setIngredientBookFilePath(Path ingredientBookFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(ingredientBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredientBookFilePath \u003d ingredientBookFilePath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setRecipeBookFilePath(Path recipeBookFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(recipeBookFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipeBookFilePath \u003d recipeBookFilePath;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u0026\u0026 this.ingredientBookFilePath.equals(o.ingredientBookFilePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u0026\u0026 this.recipeBookFilePath.equals(o.recipeBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Objects.hash(this.guiSettings, this.ingredientBookFilePath, this.recipeBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"Gui Settings : \" + this.guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"\\nLocal ingredient data file location : \" + this.ingredientBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        sb.append(\"\\nLocal recipe data file location : \" + this.recipeBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 70,
      "Trav1sT": 20,
      "seowalex": 23
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/ExpiryDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ExpiryDate implements Comparable\u003cExpiryDate\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Expiry date should be of the form yyyy-MM-dd\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    // TODO: Accept a wider range of date/time formats"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final DateTimeFormatter FORMAT \u003d DateTimeFormatter.ISO_LOCAL_DATE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs an {@code ExpiryDate}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param date A valid string in the date format, yyyy-MM-dd"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ExpiryDate(String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Checks if the input date is valid."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param test A string of unknown date format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @return true if the date format is valid. Otherwise, false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            LocalDate.parse(test, FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns an expiry date from the given string, or an error message if it"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * was in an invalid format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cExpiryDate\u003e of(String date) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (isValidDate(date)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new ExpiryDate(date));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof ExpiryDate"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                \u0026\u0026 this.date.equals(((ExpiryDate) other).date));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public int compareTo(ExpiryDate other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.date.compareTo(other.date);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 21,
      "Trav1sT": 45,
      "seowalex": 10
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/ExpiryDateMatchesKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Tests that an item\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ExpiryDateMatchesKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final ExpiryDate exd;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public ExpiryDateMatchesKeywordsPredicate(ExpiryDate exd) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.exd \u003d exd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Optional\u003cExpiryDate\u003e currExp \u003d entry.getExpiryDate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (currExp.isPresent()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return currExp.get().compareTo(exd) \u003c\u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof ExpiryDateMatchesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 this.exd.equals(((ExpiryDateMatchesKeywordsPredicate) other).exd)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 35
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/IngredientsContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Tests that an item\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class IngredientsContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public IngredientsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Returns recipes whose ingredient name list containing any of these keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // return indNameList.anyMatch(indName -\u003e this.keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //     .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(indName, keyword)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Returns recipes whose ingredient name list contains all these keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .map(kw -\u003e kw.toLowerCase())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .allMatch(keyword -\u003e recipe.getIngredients()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .map(indRef -\u003e indRef.getName())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .anyMatch(indName -\u003e indName.toLowerCase().contains(keyword)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof IngredientsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((IngredientsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 40
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Represents an item\u0027s name in the collection."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Comparisons are case insensitive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Names should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return !test.isBlank() \u0026\u0026 test.equals(test.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof Name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.name.equalsIgnoreCase(((Name) other).name))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                || (other instanceof String"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.name.equalsIgnoreCase((String) other));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.name.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "Trav1sT": 38,
      "seowalex": 12
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Tests that an item\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cString\u003e getKeywords() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ArrayList\u003c\u003e(this.keywords);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(entry.getName(), keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 5,
      "Trav1sT": 22,
      "seowalex": 9
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Quantity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.StringView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * The Quantity interface is an abstraction over various kinds of units, including but not limited to:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * mass, volume, and dimensionless counts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * It has no knowledge of how each unit interacts and fits with the others; it simply provides a static"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * method that helps to parse an input, eg. \"300 ml\" into a {@code Quantity}. Note that the concept of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * \"units\" is different from the idea of \"prefixes\"; eg. \u0027kg\u0027 and \u0027g\u0027 are conceptually the same unit of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * mass, but they have different prefixes (1000 and 1), so it must be possible to add them together."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Each class implementing Quantity is expected to be immutable. \"Type\" safety is expected to be enforced"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * by the implementation, unless it makes sense to add units of different types together (unlikely)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * There is no restriction on the actual value of the quantity, ie. they are allowed to be negative."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * Implementing classes should be responsible for implementing {@code add()} functionality between"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * different ratios (prefixes) of the same unit; eg. it should be possible to add 700g to 2kg to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * obtain 2.7kg."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public interface Quantity extends Comparable\u003cQuantity\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Adds a quantity to this, and returns a new quantity (without modifying the original)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * The input quantity can be negative to perform a subtraction. If the units are incompatible,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * it returns an appropriate error message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param qty the addend"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return    a new Quantity after performing the addition."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Result\u003c? extends Quantity\u003e add(Quantity qty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Convenience function to subtract a quantity from this."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param qty the minuend"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return    a new Quantity after performing the subtraction."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @see #add(Quantity)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    default Result\u003c? extends Quantity\u003e subtract(Quantity qty) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.add(qty.negate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether the given quantity is unit-compatible with this one."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    boolean compatibleWith(Quantity qty);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Negates this quantity, primarily used for subtracting quantities."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return a new Quantity representing the negation of this quantity."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Quantity negate();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether the quantity is zero"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    boolean isZero();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Checks whether the quantity is negative"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    boolean isNegative();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Parse a quantity and its associated unit."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param input the string input"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the parsed input, or an error message."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    static Result\u003cQuantity\u003e parse(String input) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        final List\u003cBiFunction\u003cDouble, String, Result\u003cQuantity\u003e\u003e\u003e knownUnits \u003d List.of("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Mass::of, Volume::of, Count::of"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Quantity string cannot be empty\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this is a bit iffy, but this condition will accept things like \"-31.4-48.145.201-4\"."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // it\u0027s up to parseDouble() to return us an intelligible error message from that."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p \u003d new StringView(input).span(c -\u003e Character.isDigit(c) || c \u003d\u003d \u0027.\u0027 || c \u003d\u003d \u0027-\u0027);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var num \u003d p.fst().trim().parseDouble();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // do-notation would be really nice here."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (num.isError()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Couldn\u0027t parse number from quantity \u0027%s\u0027: %s\", input, num.getError());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var unit \u003d p.snd().trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this loops through each known unit constructor, and returns the first one"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // that gives a non-error result. this way, the knowledge of unit names are"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // not duplicated here and in the actual implementation."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.flatten("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Result.ofOptional("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                knownUnits.stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .map(fn -\u003e num.then(n -\u003e fn.apply(n, unit.toString())))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .filter(Result::hasValue)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .findFirst(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.format(\"Unknown unit \u0027%s\u0027 (from \u0027%s\u0027)\", unit, input))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Formats a decimal value in an intelligent manner; mainly by not showing the decimal places if"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the input is a whole number."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the value to format"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the formatted value as a string"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    static String formatDecimalValue(double value) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (value \u003d\u003d (int) value) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return String.format(\"%d\", (int) value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (value * 10 \u003d\u003d (int) (value * 10)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return String.format(\"%.1f\", value);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (value * 100 \u003d\u003d (int) (value * 100)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return String.format(\"%.2f\", value);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return String.format(\"%.3f\", value);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 92,
      "Trav1sT": 14,
      "seowalex": 26
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Step.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Steps should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public final String step;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs a {@code Step}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param step A valid step."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.step \u003d step;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns true if a given string is a valid step."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return !test.isBlank() \u0026\u0026 test.equals(test.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.step;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof Step"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.step.equals(((Step) other).step));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.step.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 39,
      "seowalex": 8
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a Tag for both Recipe and Ingredient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * E.G. \"Halal\", \"Vegetarian\" for Recipe. \"Carbs\", \"Vitamin E\" for Ingredient."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTag(String)} (String)}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final String tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param tag A valid tag name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Tag(String tag) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        checkArgument(isValidTag(tag), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static boolean isValidTag(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return !test.isBlank() \u0026\u0026 test.equals(test.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                || (other instanceof Tag"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.tag.equalsIgnoreCase(((Tag) other).tag)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof String"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.tag.equalsIgnoreCase((String) other)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.tag.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 34,
      "seowalex": 18
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": " * Tests that an item\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cEntry\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean test(Entry entry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        if (entry.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this.keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .map(kw -\u003e kw.toLowerCase())"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .allMatch(keyword -\u003e entry.getTags()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .map(Tag::toString)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                    .anyMatch(tagName -\u003e tagName.toLowerCase().contains(keyword)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 36,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/units/Count.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.attributes.units;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Count implements Quantity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Count(double value) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Result\u003cCount\u003e add(Quantity qty) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(qty instanceof Count)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Cannot add \u0027%s\u0027 to \u0027%s\u0027 (incompatible units)\", qty, this);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var cnt \u003d (Count) qty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Count(this.value + cnt.value));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Count negate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new Count(-this.value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isZero() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.value \u003d\u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isNegative() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.value \u003c 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean compatibleWith(Quantity qty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return qty instanceof Count;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public int compareTo(Quantity other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!(other instanceof Count)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IncompatibleIngredientsException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    String.format(\"Cannot compare \u0027%s\u0027 with \u0027%s\u0027 (incompatible units)\", other, this));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Double.compare(this.value, ((Count) other).value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Quantity.formatDecimalValue(this.value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (obj instanceof Count)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 (((Count) obj).value \u003d\u003d this.value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns representation of the count."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the numerical value of the quantity"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param unit  the unit string, which should be empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity, if the unit was valid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cQuantity\u003e of(double value, String unit) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (unit.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Count(value));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"count should not have units (found \u0027%s\u0027)\", unit);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a unitless count"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of things"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Count of(double value) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Count(value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 70,
      "seowalex": 19
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/units/Mass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.attributes.units;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * This class represents a quantity of mass, eg. grams, kilograms, etc. For the purposes of this class,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * a ratio of 1.0 represents the gram (because it is unlikely you will be cooking with kilograms of"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * ingredients)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Mass implements Quantity {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double ratio;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new mass quantity with the given value and ratio."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Mass(double value, double ratio) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // adjust the ratio if we have to. don\u0027t want to show 0.0001kg for 100mg,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // nor 15000g for 15kg. for now, the cutoff is 5; ie. if you have 5001g of something,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // it\u0027ll show as 5.00kg. if you have 0.499kg, it\u0027ll show as 499g. of course, this"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // only works for SI units. if you decide to be a dunce and use customary or imperial"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // units, ownself settle."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (ratio \u003d\u003d 1 || ratio \u003d\u003d 0.001) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (value \u003e 5000) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ratio *\u003d 1000;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                value /\u003d 1000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (ratio \u003d\u003d 1000) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (value \u003c 0.500) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ratio /\u003d 1000;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                value *\u003d 1000;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ratio \u003d ratio;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Result\u003cMass\u003e add(Quantity qty) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(qty instanceof Mass)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Cannot add \u0027%s\u0027 to \u0027%s\u0027 (incompatible units)\", qty, this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var mass \u003d (Mass) qty;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var newval \u003d this.value + (mass.value * (mass.ratio / this.ratio));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Mass(newval, this.ratio));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Mass negate() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new Mass(-this.value, this.ratio);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isZero() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.ratio * this.value) \u003d\u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isNegative() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.ratio * this.value) \u003c 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean compatibleWith(Quantity qty) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return qty instanceof Mass;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public int compareTo(Quantity other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!(other instanceof Mass)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IncompatibleIngredientsException("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    String.format(\"Cannot compare \u0027%s\u0027 with \u0027%s\u0027 (incompatible units)\", other, this));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Double.compare(this.value * this.ratio, ((Mass) other).value * ((Mass) other).ratio);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var unit \u003d \"?\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.ratio \u003d\u003d 1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"g\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d 1000) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"kg\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d 0.001) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d \"mg\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s%s\", Quantity.formatDecimalValue(this.value), unit);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Mass)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var m \u003d (Mass) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.value * this.ratio) \u003d\u003d (m.value * m.ratio);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns representation of the mass."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the numerical value of the quantity"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param unit  the unit string, eg. \"kg\" or \"g\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the mass quantity, if the unit was valid."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cQuantity\u003e of(double value, String unit) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        switch (unit.toLowerCase()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case \"mg\":  return Result.of(milligrams(value));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case \"g\":   return Result.of(grams(value));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        case \"kg\":  return Result.of(kilograms(value));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        default:    return Result.error(\"Invalid unit \u0027%s\u0027\", unit);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a mass in grams"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of grams"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Mass grams(double value) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Mass(value, 1.0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a mass in milligrams"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of milligrams"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Mass milligrams(double value) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Mass(value, 0.001);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a mass in kilograms"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of kilograms"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Mass kilograms(double value) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Mass(value, 1000);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 131,
      "seowalex": 21
    }
  },
  {
    "path": "src/main/java/chopchop/model/attributes/units/Volume.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.attributes.units;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class Volume implements Quantity {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_LITRE       \u003d 1.0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_MILLILITRE  \u003d 0.001;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_CUP         \u003d 0.250;    // we\u0027re using the metric cup, for obvious reasons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_TEASPOON    \u003d 0.005;    // and metric tea and tablespoons."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static double RATIO_TABLESPOON  \u003d 0.015;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_LITRE        \u003d \"L\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_MILLILITRE   \u003d \"mL\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_CUP          \u003d \"cup\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_CUPS         \u003d \"cups\";   // this is for convenience."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_TEASPOON     \u003d \"tsp\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static String UNIT_TABLESPOON   \u003d \"tbsp\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final double ratio;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Volume(double value, double ratio) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // see the comment in Mass.java for an explanation of this."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (ratio \u003d\u003d 0.001 \u0026\u0026 value \u003e 5000) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio *\u003d 1000;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            value /\u003d 1000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (ratio \u003d\u003d 1 \u0026\u0026 value \u003c 1.0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio /\u003d 1000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            value *\u003d 1000;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.ratio \u003d ratio;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Result\u003cVolume\u003e add(Quantity qty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(qty instanceof Volume)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Cannot add \u0027%s\u0027 to \u0027%s\u0027 (incompatible units)\", qty, this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var vol \u003d (Volume) qty;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var newval \u003d this.value + (vol.value * (vol.ratio / this.ratio));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.of(new Volume(newval, this.ratio));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Volume negate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new Volume(-this.value, this.ratio);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isZero() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.ratio * this.value) \u003d\u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean isNegative() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.ratio * this.value) \u003c 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean compatibleWith(Quantity qty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return qty instanceof Volume;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public int compareTo(Quantity other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!(other instanceof Volume)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IncompatibleIngredientsException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    String.format(\"Cannot compare \u0027%s\u0027 with \u0027%s\u0027 (incompatible units)\", other, this));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Double.compare(this.value * this.ratio, ((Volume) other).value * ((Volume) other).ratio);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        String unit \u003d \"?\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.ratio \u003d\u003d RATIO_MILLILITRE) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_MILLILITRE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_LITRE) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_LITRE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_CUP) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d (this.value \u003d\u003d 1 ? UNIT_CUP : UNIT_CUPS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_TABLESPOON) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_TABLESPOON;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (this.ratio \u003d\u003d RATIO_TEASPOON) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            unit \u003d UNIT_TEASPOON;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s%s\", Quantity.formatDecimalValue(this.value), unit);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!(obj instanceof Volume)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var v \u003d (Volume) obj;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return (this.value * this.ratio) \u003d\u003d (v.value * v.ratio);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns representation of the volume."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the numerical value of the quantity"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param unit  the unit string, eg. \"l\" or \"cups\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the volume quantity, if the unit was valid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Result\u003cQuantity\u003e of(double value, String unit) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        double ratio \u003d 1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (unit.equalsIgnoreCase(UNIT_MILLILITRE)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_MILLILITRE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else if (unit.equalsIgnoreCase(UNIT_LITRE)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_LITRE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else if (unit.equalsIgnoreCase(UNIT_CUP) || unit.equalsIgnoreCase(UNIT_CUPS)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_CUP;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else if (unit.equalsIgnoreCase(UNIT_TABLESPOON)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_TABLESPOON;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        } else if (unit.equalsIgnoreCase(UNIT_TEASPOON)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ratio \u003d RATIO_TEASPOON;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return Result.error(\"Unknown unit \u0027%s\u0027\", unit);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return Result.of(new Volume(value, ratio));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in millilitres"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of millilitres"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume millilitres(double value) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_MILLILITRE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in litres"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of litres"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume litres(double value) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_LITRE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in (metric) cups -- 250ml."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of (metric) cups"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume cups(double value) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_CUP);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in (metric) teaspoons -- 5ml"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of (metric) teaspoons"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume teaspoons(double value) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_TEASPOON);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Returns a volume in (metric) tablespoons -- 15ml"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param value the number of (metric) tablespoons"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      the quantity"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static Volume tablespoons(double value) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Volume(value, RATIO_TABLESPOON);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 161,
      "seowalex": 25
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/DuplicateEntryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Signals that the operation will result in duplicate Entries (Entries are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicateEntryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public DuplicateEntryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        super(\"Operation would result in duplicate entries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 9,
      "seowalex": 2
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/EntryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Signals that the operation is unable to find the specified entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class EntryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 5,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/model/exceptions/IncompatibleIngredientsException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "package chopchop.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * An exception that is thrown when attempting to add ingredients with incompatible"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * quantities (eg. volume and mass) or names."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class IncompatibleIngredientsException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public IncompatibleIngredientsException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 9,
      "seowalex": 2
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/Ingredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents an Ingredient in the recipe manager."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class Ingredient extends Entry {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // comparator that compares expiry dates, and puts empty expiries at the end."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final Comparator\u003cOptional\u003cExpiryDate\u003e\u003e SET_COMPARATOR \u003d (a, b) -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (a.isEmpty() \u0026\u0026 b.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (a.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else if (b.isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return a.get().compareTo(b.get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e sets;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Every field (less expiry date) must be present and not null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Guarantees: details (less expiry date) are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Ingredient(String name, Quantity quantity, ExpiryDate expiryDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireAllNonNull(quantity, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.sets \u003d new TreeMap\u003c\u003e(SET_COMPARATOR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.sets.put(Optional.ofNullable(expiryDate), quantity);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructor that accepts optionals for quantity and expiry date for convenience."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Ingredient(String name, Optional\u003cQuantity\u003e quantity, Optional\u003cExpiryDate\u003e expiryDate, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireAllNonNull(quantity, expiryDate, tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.sets \u003d new TreeMap\u003c\u003e(SET_COMPARATOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.sets.put(expiryDate, quantity.orElse(Count.of(1)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a set of ingredients directly from the map of expiry dates and quantities."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient(String name, TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e sets, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireAllNonNull(sets, tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.sets \u003d new TreeMap\u003c\u003e(SET_COMPARATOR);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.sets.putAll(sets);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assert !this.sets.isEmpty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // we *COULD* make an \"identity\" for Quantity, but that\u0027s too much effort, and each"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // class of Quantity would need to explicitly handle that. Sadge."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // if we have at least 2, then we can get() the optional."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.sets.size() \u003e\u003d 2) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.sets.values()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .reduce((a, b) -\u003e a.add(b).getValue())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // well. then it\u0027s just the first one."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.sets.firstEntry().getValue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assert !this.sets.isEmpty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // just return the first expiry date."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.sets.firstKey();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e getIngredientSets() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // i want const correctness dammit"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e(SET_COMPARATOR);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ret.putAll(this.sets);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Collections.unmodifiableSet(this.tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Combines the quantities of this ingredient and the provided ingredient."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @param other the other ingredient"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @return      a new {@code Ingredient} with the combined quantities"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * @throws IncompatibleIngredientsException if the units of both ingredients were not compatible"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Ingredient combine(Ingredient other) throws IncompatibleIngredientsException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!this.isSame(other)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IncompatibleIngredientsException(String.format(\"Cannot combine \u0027%s\u0027 with \u0027%s\u0027\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                this.name, other.name));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // the validity of quantities is kinda like induction. Assume that we start with a series of valid sets;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // if each new addition was compatible, then the final set will be compatible."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var thisQty \u003d this.getQuantity();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // there\u0027s no constructor that takes both an existing map and the comparator..."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var newSets \u003d new TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e(SET_COMPARATOR);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        newSets.putAll(this.sets);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // because of exceptions, we cannot do this using nice lambdas and stuff."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // so write some dirty imperative code to merge the ingredients."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var entry : other.sets.entrySet()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var exp \u003d entry.getKey();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var qty \u003d entry.getValue();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // get the existing quantity of ingredient with the given expiry date"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var existingQty \u003d newSets.get(exp);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (existingQty !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // it exists; time to combine them using Quantity::add()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // (assuming they are compatible, of course)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var newQty \u003d existingQty.add(qty)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    .orElseThrow(IncompatibleIngredientsException::new);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                newSets.put(exp, newQty);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (!thisQty.compatibleWith(qty)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    throw new IncompatibleIngredientsException("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                        String.format(\"Incompatible units \u0027%s\u0027 and \u0027%s\u0027\", thisQty, qty)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    );"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                // it doesn\u0027t exist; so just add it in."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                newSets.put(exp, qty);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // here we combine the tags."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // TODO: investigate if this is something we should actually do"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var newTags \u003d new HashSet\u003c\u003e(this.tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        newTags.addAll(other.tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new Ingredient(this.name.toString(), newSets, newTags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Splits this ingredient into two ingredients, one containing the given quantity,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * and one containing the remaining quantity. Ingredients which expire earlier will be"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * split first."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @param quantity the quantity to split by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @return a {@code Pair} of {@code Ingredient}s split by the given quantity"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @throws IllegalValueException if the quantity provided is larger than the total quantity"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * of the ingredient"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Pair\u003cIngredient, Ingredient\u003e split(Quantity quantity)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throws IllegalValueException, IncompatibleIngredientsException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.getQuantity().compareTo(quantity) \u003c 0 || quantity.isNegative()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IllegalValueException(String.format(\"Insufficient \u0027%s\u0027 to remove given quantity\","
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    this.name.toString()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var firstSets \u003d new TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e(SET_COMPARATOR);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var secondSets \u003d new TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e(SET_COMPARATOR);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var currQuantity \u003d quantity;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var splitKey \u003d this.sets.firstKey();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (var entry : this.sets.entrySet()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (entry.getValue().compareTo(currQuantity) \u003c 0) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                currQuantity \u003d currQuantity.subtract(entry.getValue())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .orElseThrow(IncompatibleIngredientsException::new);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                splitKey \u003d entry.getKey();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        firstSets.putAll(this.sets.subMap(this.sets.firstKey(), splitKey));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        firstSets.put(splitKey, currQuantity);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        secondSets.putAll(this.sets.subMap(splitKey, false, this.sets.lastKey(), true));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var remainingQuantity \u003d this.sets.get(splitKey).subtract(currQuantity)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .orElseThrow(IncompatibleIngredientsException::new);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (!remainingQuantity.isZero()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            secondSets.put(splitKey, remainingQuantity);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new Pair\u003c\u003e(new Ingredient(this.name.toString(), firstSets, this.tags),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new Ingredient(this.name.toString(), secondSets, this.tags));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean isSame(Entry other) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof Ingredient"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.name.equals(((Ingredient) other).name));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                || (other instanceof Ingredient"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u0026\u0026 this.name.equals(((Ingredient) other).name)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 this.sets.equals(((Ingredient) other).sets))"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \u0026\u0026 this.tags.equals(((Ingredient) other).tags);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Objects.hash(this.name, this.sets, this.tags);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var tagJoiner \u003d new StringJoiner(\", \", \"\u003cTags: \", \"\u003e\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        tagJoiner.setEmptyValue(\"\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.getTags().forEach(tag -\u003e tagJoiner.add(tag.toString()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Stream.of(String.format(\"%s (%s)\", this.getName(), this.getQuantity()),"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                this.getExpiryDate().map(expiryDate -\u003e String.format(\"\u003cExpiry Date: %s\u003e\", expiryDate)).orElse(\"\"),"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                tagJoiner.toString())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .filter(field -\u003e !field.isEmpty())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 19,
      "zhiayang": 94,
      "Trav1sT": 41,
      "seowalex": 104
    }
  },
  {
    "path": "src/main/java/chopchop/model/ingredient/IngredientReference.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A reference to an ingredient. Not the actual {@code Ingredient}, and knows nothing about it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class IngredientReference {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs an ingredient reference with the given name and quantity."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public IngredientReference(String name, Quantity quantity) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs an ingredient reference with the given name and quantity."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public IngredientReference(String name, Optional\u003cQuantity\u003e quantity) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this(name, quantity.orElse(Count.of(1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.quantity;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return String.format(\"%s (%s)\", this.name, this.quantity);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            || (other instanceof IngredientReference"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 this.name.equals(((IngredientReference) other).name)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u0026\u0026 this.quantity.equals(((IngredientReference) other).quantity));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "zhiayang": 33,
      "Trav1sT": 4,
      "seowalex": 17
    }
  },
  {
    "path": "src/main/java/chopchop/model/recipe/Recipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.concurrent.atomic.AtomicInteger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.Entry;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class Recipe extends Entry {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cIngredientReference\u003e ingredients;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Recipe(String name, List\u003cIngredientReference\u003e ingredients, List\u003cStep\u003e steps, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        requireAllNonNull(name, ingredients, steps, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredients \u003d new ArrayList\u003c\u003e(ingredients);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.steps \u003d new ArrayList\u003c\u003e(steps);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns an immutable ingredient set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cIngredientReference\u003e getIngredients() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Collections.unmodifiableList(this.ingredients);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns an immutable step list, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public List\u003cStep\u003e getSteps() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Collections.unmodifiableList(this.steps);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Collections.unmodifiableSet(this.tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Optional\u003cExpiryDate\u003e getExpiryDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean isSame(Entry other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            || (other instanceof Recipe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u0026\u0026 this.name.equals(((Recipe) other).name));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            || (other instanceof Recipe"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u0026\u0026 this.name.equals(((Recipe) other).name)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u0026\u0026 this.ingredients.equals(((Recipe) other).ingredients)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \u0026\u0026 this.steps.equals(((Recipe) other).steps))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \u0026\u0026 this.tags.equals(((Recipe) other).tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return Objects.hash(name, ingredients, steps, tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var ingredientJoiner \u003d new StringJoiner(\", \", \"\u003cIngredients: \", \"\u003e\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var stepJoiner \u003d new StringJoiner(\", \", \"\u003cSteps: \", \"\u003e\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var tagJoiner \u003d new StringJoiner(\", \", \"\u003cTags: \", \"\u003e\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var counter \u003d new AtomicInteger(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ingredientJoiner.setEmptyValue(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        stepJoiner.setEmptyValue(\"\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        tagJoiner.setEmptyValue(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.getIngredients().forEach(ingredient -\u003e ingredientJoiner.add(ingredient.toString()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.getSteps().forEach(step -\u003e stepJoiner.add(counter.getAndIncrement() + \". \" + step.toString()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.getTags().forEach(tag -\u003e tagJoiner.add(tag.toString()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return Stream.of(this.getName(), ingredientJoiner.toString(), stepJoiner.toString(), tagJoiner.toString())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            .filter(field -\u003e !field.isEmpty())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 58,
      "zhiayang": 2,
      "Trav1sT": 3,
      "seowalex": 43
    }
  },
  {
    "path": "src/main/java/chopchop/model/usage/IngredientUsage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.usage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientUsage extends Usage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final Quantity qty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Construct an {@code IngredientUsage} given the name, date and quantity."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientUsage(String name, LocalDateTime date, Quantity qty) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name, date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(qty);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Quantity getQty() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.qty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"%s [%s] Qty: %s\", this.getName(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.getQty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 32
    }
  },
  {
    "path": "src/main/java/chopchop/model/usage/RecipeUsage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.usage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class RecipeUsage extends Usage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public RecipeUsage(String name, LocalDateTime date) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(name, date);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return String.format(\"%s [%s]\", this.getName(),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 16
    }
  },
  {
    "path": "src/main/java/chopchop/model/usage/Usage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.usage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public abstract class Usage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final LocalDateTime date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    protected Usage(String name, LocalDateTime date) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(name, date);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public String getPrintableDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd hh:mm a\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.format(formatter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if u2 is \u0027more later\u0027."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isAfter(Usage u2) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(u2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.isAfter(u2.date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if u2 is \u0027more later\u0027."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isAfter(LocalDateTime u2) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (u2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.isAfter(u2);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if u2 is earlier."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isBefore(Usage u2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(u2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.isBefore(u2.date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns true if u2 is earlier."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isBefore(LocalDateTime u2) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (u2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.date.isBefore(u2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean isSame(Usage u2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.getName().equals(u2.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 71
    }
  },
  {
    "path": "src/main/java/chopchop/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Ingredient[] getSampleIngredients() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Ingredient[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            new Ingredient(\"Apple\", Mass.grams(10), new ExpiryDate(\"2020-04-04\"), new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            new Ingredient(\"Blueberry\", Count.of(5), null, new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            new Ingredient(\"Custard\", Volume.millilitres(200.5), null, new HashSet\u003c\u003e()),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        };"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static ReadOnlyEntryBook\u003cIngredient\u003e getSampleIngredientBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e sampleIngredientBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            sampleIngredientBook.add(sampleIngredient);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return sampleIngredientBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Recipe[] getSampleRecipe() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new Recipe[] {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            new Recipe(\"Apple blue mix\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Arrays.stream(getSampleIngredients())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .map((x)-\u003e new IngredientReference(x.getName(), x.getQuantity()))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Step(\"Put them on a table.\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    new Step(\"Cut and chop them.\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    new Step(\"Mix them.\"))),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"fruit\"), new Tag(\"simple\")))),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            new Recipe(\"Blue custard cream\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Arrays.stream(getSampleIngredients())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    .map((x)-\u003e new IngredientReference(x.getName(), x.getQuantity()))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    .collect(Collectors.toList()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                new ArrayList\u003c\u003e(Arrays.asList(new Step(\"Blend them.\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                    new Step(\"Stir them well.\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    new Step(\"Leave it in the refrigerator for 8 hours\"))),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(\"sweet\"), new Tag(\"cold\"))))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static ReadOnlyEntryBook\u003cRecipe\u003e getSampleRecipeBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e sampleRecipeBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipe()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            sampleRecipeBook.add(sampleRecipe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return sampleRecipeBook;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 39,
      "seowalex": 26
    }
  },
  {
    "path": "src/main/java/chopchop/storage/IngredientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface IngredientBookStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getIngredientBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns IngredientBook data as a {@link ReadOnlyEntryBook}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Optional\u003cReadOnlyEntryBook\u003cIngredient\u003e\u003e readIngredientBook() throws DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getIngredientBookFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Optional\u003cReadOnlyEntryBook\u003cIngredient\u003e\u003e readIngredientBook(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Saves the given {@link ReadOnlyEntryBook} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void saveIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyEntryBook)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void saveIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 30,
      "seowalex": 10
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedIngredient.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final JsonAdaptedIngredientSet sets;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given ingredient details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                 @JsonProperty(\"sets\") JsonAdaptedIngredientSet sets,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                 @JsonProperty(\"tags\") List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.sets \u003d sets;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d tags \u003d\u003d null ? null : new ArrayList\u003c\u003e(tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.sets \u003d new JsonAdaptedIngredientSet(source.getIngredientSets());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d source.getTags().stream().map(Tag::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IllegalValueException(String.format(INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.sets \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IllegalValueException(String.format(INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT, \"sets\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IllegalValueException(String.format(INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (String tag : this.tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            modelTags.add(new Tag(tag));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new Ingredient(this.name, this.sets.toModelType(), modelTags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 6,
      "Trav1sT": 41,
      "seowalex": 27
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedIngredientReference.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "public class JsonAdaptedIngredientReference {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String INGREDIENT_REFERENCE_MISSING_FIELD_MESSAGE_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \"Ingredient reference\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredientReference} with the given ingredient reference details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param name name of ingredient."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param quantity just quantity to string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public JsonAdaptedIngredientReference(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                          @JsonProperty(\"quantity\") String quantity) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Converts a given {@code IngredientReference} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public JsonAdaptedIngredientReference(IngredientReference source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Converts this into Jackson-friendly adapted ingredient reference object into the model\u0027s"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code IngredientReference} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted reference."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientReference toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IllegalValueException(String.format(INGREDIENT_REFERENCE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IllegalValueException(String.format(INGREDIENT_REFERENCE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        Result\u003cQuantity\u003e modelQuantity \u003d Quantity.parse(this.quantity);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (modelQuantity.isError()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new IngredientReference(this.name, modelQuantity.getValue());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 44,
      "seowalex": 20
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedIngredientSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// JsonAdaptedIngredientSet.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class JsonAdaptedIngredientSet {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final List\u003cJsonAdaptedPair\u003e sets;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredientSet} with the given ingredient details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public JsonAdaptedIngredientSet(@JsonProperty(\"sets\") List\u003cJsonAdaptedPair\u003e sets) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.sets \u003d sets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Converts a given ingredient set into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public JsonAdaptedIngredientSet(TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.sets \u003d source"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .entrySet()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(e -\u003e Pair.of(e.getKey(), e.getValue()))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .map(JsonAdaptedPair::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Converts this from the json thingy to the real thingy."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var missingMsg \u003d JsonAdaptedIngredient.INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (this.sets \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new IllegalValueException(String.format(missingMsg, \"sets\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ret \u003d new TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e(Ingredient.SET_COMPARATOR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // again, can\u0027t use lambdas here because eXcEpTiOnS"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        for (var pair : this.sets) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var m \u003d pair.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ret.put(m.fst(), m.snd());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return ret;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    // this is dumb."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    static class JsonAdaptedPair {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private final String quantity;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private final String expiryDate;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         * Constructs a {@code JsonAdaptedPair} with the given ingredient details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @JsonCreator"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public JsonAdaptedPair(@JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                               @JsonProperty(\"expiryDate\") String expiryDate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.expiryDate \u003d expiryDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public JsonAdaptedPair(Pair\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e source) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.expiryDate \u003d source.fst().map(ExpiryDate::toString).orElse(\"\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.quantity \u003d source.snd().toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         * Converts this from the json thingy to the real thingy."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public Pair\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var missingMsg \u003d JsonAdaptedIngredient.INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw new IllegalValueException(String.format(missingMsg, Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.expiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw new IllegalValueException(String.format(missingMsg, ExpiryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var qty \u003d Quantity.parse(this.quantity);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (qty.isError()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw new IllegalValueException(qty.getError());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (this.expiryDate.isBlank()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Pair.of(Optional.empty(), qty.getValue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                if (!ExpiryDate.isValidDate(this.expiryDate)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    throw new IllegalValueException(ExpiryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                var exp \u003d new ExpiryDate(this.expiryDate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                return Pair.of(Optional.of(exp), qty.getValue());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 124,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedIngredientUsage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedIngredientUsage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String USAGE_MISSING_FIELD_MESSAGE_FORMAT \u003d \"Usage\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String qty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredientUsage} with the given command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedIngredientUsage(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                  @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                  @JsonProperty(\"quantity\") String qty) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code IngredientUsage} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedIngredientUsage(IngredientUsage ingredientUsage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d ingredientUsage.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d ingredientUsage.getDate().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.qty \u003d ingredientUsage.getQty().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this Jackson-friendly adapted Ingredient Usage into its original object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientUsage toType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(USAGE_MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(USAGE_MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (this.qty \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(USAGE_MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var result \u003d Quantity.parse(qty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (result.isError()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(result.getError());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new IngredientUsage(this.name, LocalDateTime.parse(this.date), result.getValue());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 60
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedRecipe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String RECIPE_MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cJsonAdaptedIngredientReference\u003e ingredients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cString\u003e steps;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cString\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredientReference\u003e ingredients,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                             @JsonProperty(\"steps\") List\u003cString\u003e steps,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                             @JsonProperty(\"tags\") List\u003cString\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredients \u003d ingredients \u003d\u003d null ? null : new ArrayList\u003c\u003e(ingredients);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.steps \u003d steps \u003d\u003d null ? null : new ArrayList\u003c\u003e(steps);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d tags \u003d\u003d null ? null : new ArrayList\u003c\u003e(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.name \u003d source.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredients \u003d source.getIngredients().stream().map(JsonAdaptedIngredientReference::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.steps \u003d source.getSteps().stream().map(Step::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d source.getTags().stream().map(Tag::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.ingredients \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                IngredientReference.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        List\u003cIngredientReference\u003e modelIngredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (JsonAdaptedIngredientReference ingredient : this.ingredients) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            modelIngredients.add(ingredient.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.steps \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                Step.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        List\u003cStep\u003e modelSteps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (String step : this.steps) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            modelSteps.add(new Step(step));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (this.tags \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new IllegalValueException(String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (String tag : this.tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            modelTags.add(new Tag(tag));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new Recipe(this.name, modelIngredients, modelSteps, modelTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "Trav1sT": 53,
      "seowalex": 41
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedRecipeUsage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedRecipeUsage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String USAGE_MISSING_FIELD_MESSAGE_FORMAT \u003d \"Usage\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipeUsage} with the given command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedRecipeUsage(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                  @JsonProperty(\"date\") String date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code RecipeUsage} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedRecipeUsage(RecipeUsage recipeUsage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.name \u003d recipeUsage.getName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.date \u003d recipeUsage.getDate().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this Jackson-friendly adapted Recipe Usage into its original object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public RecipeUsage toType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(USAGE_MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(String.format(USAGE_MISSING_FIELD_MESSAGE_FORMAT, \"date\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new RecipeUsage(this.name, LocalDateTime.parse(this.date));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 47
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonAdaptedUsageList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedUsageList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cString\u003e usages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonAdaptedUsageSet} with given list of localdatetime strings."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonAdaptedUsageList(@JsonProperty(\"usages\") List\u003cString\u003e usages) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.usages \u003d usages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts JsonAdaptedUsages to Usages itself."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public List\u003cLocalDateTime\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cLocalDateTime\u003e newUsages \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            for (String usage: this.usages) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                newUsages.add(LocalDateTime.parse(usage));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new IllegalValueException(\"LocalDateTime cannot be parsed.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return newUsages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 39
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonIngredientBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonIngredientBookStorage implements IngredientBookStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIngredientBookStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonIngredientBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns IngredientBook data as a {@link ReadOnlyEntryBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cIngredient\u003e\u003e readIngredientBook() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.readIngredientBook(this.filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getIngredientBookFilePath()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cIngredient\u003e\u003e readIngredientBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        Optional\u003cJsonSerializableIngredientBook\u003e jsonIngredientBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            filePath, JsonSerializableIngredientBook.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (jsonIngredientBook.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return Optional.of(jsonIngredientBook.get().toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Saves the given {@link ReadOnlyEntryBook} to the storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.saveIngredientBook(ingredientBook, this.filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates the json file with the current state of ingredient book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook updated ingredient book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is at."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyEntryBook)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(ingredientBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIngredientBook(ingredientBook), filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 75,
      "seowalex": 19
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonIngredientUsageStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonIngredientUsageStorage implements UsageStorage\u003cIngredientUsage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIngredientUsageStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonIngredientUsageStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getUsageFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cIngredientUsage\u003e\u003e readUsages() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.readUsages(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cIngredientUsage\u003e\u003e readUsages(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cJsonSerializableIngredientUsageList\u003e jsonUsageList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            filePath, JsonSerializableIngredientUsageList.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (jsonUsageList.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.of(jsonUsageList.get().toType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUsages(UsageList\u003cIngredientUsage\u003e usages) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.saveUsages(usages, this.filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUsages(UsageList\u003cIngredientUsage\u003e usages, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(usages, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIngredientUsageList(usages), filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 71
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonRecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonRecipeBookStorage implements RecipeBookStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonRecipeBookStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constucts a {@code JsonRecipeBookStorage} based on filePath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonRecipeBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert filePath !\u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyEntryBook}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cRecipe\u003e\u003e readRecipeBook() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.readRecipeBook(this.filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Read and parse the json file to a serializable recipe book"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath the relative path where the json file of recipe book is saved."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cRecipe\u003e\u003e readRecipeBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        Optional\u003cJsonSerializableRecipeBook\u003e jsonRecipeBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            filePath, JsonSerializableRecipeBook.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        if (jsonRecipeBook.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return Optional.of(jsonRecipeBook.get().toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Saves the given {@link ReadOnlyEntryBook} to the storage."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.saveRecipeBook(recipeBook, this.filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates the json file with the current state of recipe book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook updated recipe book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is at."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyEntryBook)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(recipeBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeBook(recipeBook), filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 82,
      "seowalex": 18
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonRecipeUsageStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonRecipeUsageStorage implements UsageStorage\u003cRecipeUsage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIngredientUsageStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonRecipeUsageStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getUsageFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cRecipeUsage\u003e\u003e readUsages() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.readUsages(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cRecipeUsage\u003e\u003e readUsages(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Optional\u003cJsonSerializableRecipeUsageList\u003e jsonUsageList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            filePath, JsonSerializableRecipeUsageList.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        if (jsonUsageList.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            return Optional.of(jsonUsageList.get().toType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            logger.info(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUsages(UsageList\u003cRecipeUsage\u003e usages) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.saveUsages(usages, this.filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUsages(UsageList\u003cRecipeUsage\u003e usages, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        requireAllNonNull(usages, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecipeUsageList(usages), filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 71
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonSerializableIngredientBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonSerializableIngredientBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Ingredient list contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonSerializableIngredientBook} with the given inds."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public JsonSerializableIngredientBook(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredients \u003d new ArrayList\u003c\u003e(ingredients);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code ReadOnlyIngredientBook} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIngredientBook}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public JsonSerializableIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredients \u003d source.getEntryList().stream().map(JsonAdaptedIngredient::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this ingredient book into the model\u0027s {@code IngredientBook} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public EntryBook\u003cIngredient\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e ingredientBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : this.ingredients) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (ingredientBook.has(ingredient)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            ingredientBook.add(ingredient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 37,
      "seowalex": 16
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonSerializableIngredientUsageList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonSerializableIngredientUsageList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cJsonAdaptedIngredientUsage\u003e usages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonSerializableIngredientBook} with the given ingredients."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableIngredientUsageList(@JsonProperty(\"usages\") List\u003cJsonAdaptedIngredientUsage\u003e u) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.usages \u003d new ArrayList\u003c\u003e(u);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code ReadOnlyIngredientBook} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIngredientBook}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableIngredientUsageList(UsageList\u003cIngredientUsage\u003e source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.usages \u003d source.getUsages().stream().map(JsonAdaptedIngredientUsage::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this ingredient book into the model\u0027s {@code IngredientBook} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList\u003cIngredientUsage\u003e toType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cIngredientUsage\u003e recordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (JsonAdaptedIngredientUsage jsonAdaptedRecord : this.usages) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            IngredientUsage record \u003d jsonAdaptedRecord.toType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            recordList.add(record);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new UsageList\u003cIngredientUsage\u003e(recordList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 47
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonSerializableRecipeBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonSerializableRecipeBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipe list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeBook} with the given recipes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableRecipeBook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipes \u003d new ArrayList\u003c\u003e(recipes);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeBook}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public JsonSerializableRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipes \u003d source.getEntryList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this recipe book into the model\u0027s {@code RecipeBook} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public EntryBook\u003cRecipe\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e recipeBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : this.recipes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            if (recipeBook.has(recipe)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            recipeBook.add(recipe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 40,
      "seowalex": 13
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonSerializableRecipeUsageList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonSerializableRecipeUsageList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final List\u003cJsonAdaptedRecipeUsage\u003e usages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Constructs a {@code JsonSerializableRecipeBook} with the given recipes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableRecipeUsageList(@JsonProperty(\"usages\") List\u003cJsonAdaptedRecipeUsage\u003e records) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.usages \u003d new ArrayList\u003c\u003e(records);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts a given {@code ReadOnlyRecipeBook} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecipeBook}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public JsonSerializableRecipeUsageList(UsageList\u003cRecipeUsage\u003e source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.usages \u003d source.getUsages().stream().map(JsonAdaptedRecipeUsage::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Converts this recipe book into the model\u0027s {@code RecipeBook} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList\u003cRecipeUsage\u003e toType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cRecipeUsage\u003e recordList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (JsonAdaptedRecipeUsage jsonAdaptedRecord : this.usages) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            RecipeUsage record \u003d jsonAdaptedRecord.toType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            recordList.add(record);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new UsageList\u003cRecipeUsage\u003e(recordList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 47
    }
  },
  {
    "path": "src/main/java/chopchop/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.readUserPrefs(this.filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, this.filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 5,
      "seowalex": 4,
      "-": 36
    }
  },
  {
    "path": "src/main/java/chopchop/storage/RecipeBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface RecipeBookStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getRecipeBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Returns RecipeBook data as a {@link ReadOnlyEntryBook}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Optional\u003cReadOnlyEntryBook\u003cRecipe\u003e\u003e readRecipeBook() throws DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Optional\u003cReadOnlyEntryBook\u003cRecipe\u003e\u003e readRecipeBook(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Saves the given {@link ReadOnlyEntryBook} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void saveRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @see #saveRecipeBook(ReadOnlyEntryBook)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    void saveRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 30,
      "seowalex": 10
    }
  },
  {
    "path": "src/main/java/chopchop/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface Storage extends IngredientBookStorage, RecipeBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeUsageFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cRecipeUsage\u003e\u003e readRecipeUsages() throws DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cRecipeUsage\u003e\u003e readRecipeUsages(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeUsages(UsageList\u003cRecipeUsage\u003e usages) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeUsages(UsageList\u003cRecipeUsage\u003e usages, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientUsageFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cIngredientUsage\u003e\u003e readIngredientUsages() throws DataConversionException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cIngredientUsage\u003e\u003e readIngredientUsages(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientUsages(UsageList\u003cIngredientUsage\u003e usages) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientUsages(UsageList\u003cIngredientUsage\u003e usages, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 36
    }
  },
  {
    "path": "src/main/java/chopchop/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": " * Manages storage of IngredientBook and RecipeBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final IngredientBookStorage ingredientBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final RecipeBookStorage recipeBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UsageStorage\u003cRecipeUsage\u003e recipeUsageStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final UsageStorage\u003cIngredientUsage\u003e ingredientUsageStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code RecipeBookStorage}, {@code IngredientBookStorage} and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * {@code UserPrefStorage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public StorageManager(RecipeBookStorage recipeBookStorage, IngredientBookStorage ingredientBookStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                          UsageStorage\u003cRecipeUsage\u003e recipeUsageStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                          UsageStorage\u003cIngredientUsage\u003e ingredientUsageStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeBookStorage \u003d recipeBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredientBookStorage \u003d ingredientBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeUsageStorage \u003d recipeUsageStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientUsageStorage \u003d ingredientUsageStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.ingredientBookStorage.getIngredientBookFilePath();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cRecipe\u003e\u003e readRecipeBook() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.readRecipeBook(this.recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Read and parse json file into recipe book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is saved."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getRecipeBookFilePath()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cRecipe\u003e\u003e readRecipeBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recipeBookStorage.readRecipeBook(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.recipeBookStorage.getRecipeBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cIngredient\u003e\u003e readIngredientBook() throws DataConversionException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.readIngredientBook(this.ingredientBookStorage.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Read and parse json file into ingredient book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath relative path where the json file is saved."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @see #getIngredientBookFilePath()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public Optional\u003cReadOnlyEntryBook\u003cIngredient\u003e\u003e readIngredientBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.ingredientBookStorage.readIngredientBook(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.saveIngredientBook(ingredientBook, this.ingredientBookStorage.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Write to ingredient book data file."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param ingredientBook the ingredient book to be written from."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath the path where the data file is saved."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyEntryBook)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e ingredientBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.ingredientBookStorage.saveIngredientBook(ingredientBook, filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.saveRecipeBook(recipeBook, this.recipeBookStorage.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Write to recipe book data file."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param recipeBook the ingredient book to be written from."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * @param filePath the path where the data file is saved."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * @see #saveIngredientBook(ReadOnlyEntryBook)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void saveRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e recipeBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.recipeBookStorage.saveRecipeBook(recipeBook, filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeUsageFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.recipeUsageStorage.getUsageFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cRecipeUsage\u003e\u003e readRecipeUsages() throws DataConversionException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.readRecipeUsages(this.getRecipeUsageFilePath());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cRecipeUsage\u003e\u003e readRecipeUsages(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.recipeUsageStorage.readUsages(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeUsages(UsageList\u003cRecipeUsage\u003e usages) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.saveRecipeUsages(usages, this.getRecipeUsageFilePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeUsages(UsageList\u003cRecipeUsage\u003e usages, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeUsageStorage.saveUsages(usages, filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientUsageFilePath() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.ingredientUsageStorage.getUsageFilePath();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cIngredientUsage\u003e\u003e readIngredientUsages() throws DataConversionException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.readIngredientUsages(this.getIngredientUsageFilePath());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Optional\u003cUsageList\u003cIngredientUsage\u003e\u003e readIngredientUsages(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this.ingredientUsageStorage.readUsages(filePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientUsages(UsageList\u003cIngredientUsage\u003e usages) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.saveIngredientUsages(usages, this.getIngredientUsageFilePath());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientUsages(UsageList\u003cIngredientUsage\u003e usages, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientUsageStorage.saveUsages(usages, filePath);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 158,
      "seowalex": 36
    }
  },
  {
    "path": "src/main/java/chopchop/storage/UsageStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.Usage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public interface UsageStorage \u003cT extends Usage\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Path getUsageFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cUsageList\u003cT\u003e\u003e readUsages() throws DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Optional\u003cUsageList\u003cT\u003e\u003e readUsages(Path filePath) throws DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveUsages(UsageList\u003cT\u003e usages) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    void saveUsages(UsageList\u003cT\u003e usages, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 24
    }
  },
  {
    "path": "src/main/java/chopchop/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 7,
      "seowalex": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/chopchop/ui/ClickableLink.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ClickableLink.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.scene.control.Hyperlink;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ClickableLink extends Hyperlink {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final String url;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Constructs a new Clickable link; the label has the text, but clicking it takes you to"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * the url."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ClickableLink(String text, String url) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.setOnAction(t -\u003e MainApp.the().getHostServices().showDocument(ClickableLink.this.url));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 22,
      "seowalex": 1
    }
  },
  {
    "path": "src/main/java/chopchop/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private int historyPointer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs {@code CommandBox}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, Logic logic) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e this.setStyleToDefault());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // No commands entered yet."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.historyPointer \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandTextField.addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (event.getCode().equals(KeyCode.DOWN) \u0026\u0026 this.historyPointer \u003c logic.getInputHistory().size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.historyPointer++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                if (this.historyPointer \u003d\u003d logic.getInputHistory().size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    this.commandTextField.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    var command \u003d logic.getInputHistory().get(this.historyPointer);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    this.commandTextField.setText(command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    this.commandTextField.positionCaret(command.length());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else if (event.getCode().equals(KeyCode.UP) \u0026\u0026 this.historyPointer \u003e 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.historyPointer--;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                var command \u003d logic.getInputHistory().get(this.historyPointer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandTextField.setText(command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandTextField.positionCaret(command.length());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else if (event.getCode().equals(KeyCode.TAB)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                var text \u003d this.commandTextField.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                var cursor \u003d this.commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                // first split the thing by cursor position -- only complete the first portion."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                var fst \u003d text.substring(0, cursor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                var snd \u003d text.substring(cursor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                var completion \u003d logic.getCompletionForInput(fst);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                // now, we can change the cursor position accordingly."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                cursor \u003d completion.length();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandTextField.setText(completion + snd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandTextField.positionCaret(cursor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                // when the user presses any other key, just reset the completion state."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                logic.resetCompletionState();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var command \u003d this.commandTextField.getText();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!command.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandExecutor.execute(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.historyPointer \u003d this.logic.getInputHistory().size();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandTextField.clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void setFocus(String keypress) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!this.commandTextField.isFocused()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.commandTextField.appendText(keypress);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.commandTextField.requestFocus();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.commandTextField.end();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var styleClass \u003d this.commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 145
    }
  },
  {
    "path": "src/main/java/chopchop/ui/CommandOutput.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandOutput extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"CommandOutput.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextFlow displayBox;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs {@code CommandBox}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandOutput() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Clear wtv is displayed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var texts \u003d displayBox.getChildren();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        texts.clear();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the commandResult to the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param result the command result"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setFeedbackToUser(CommandResult result) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        requireNonNull(result);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var texts \u003d this.displayBox.getChildren();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        texts.clear();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var shouldUnCaps \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (result.isError()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var foo \u003d new Text(\"Error: \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            foo.setStyle(\"-fx-font-family: \u0027Source Sans Pro SemiBold\u0027\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            foo.setFill(Color.valueOf(\"#ff1744\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            texts.add(foo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            shouldUnCaps \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (var part : result.getParts()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var msg \u003d part.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (shouldUnCaps) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                shouldUnCaps \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                if (msg.length() \u003e 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    msg \u003d msg.substring(0, 1).toLowerCase() + msg.substring(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (part.isLink()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                texts.add(new Text(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                texts.add(new ClickableLink(msg, part.getUrl()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                texts.add(new Text(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                texts.add(new Text(msg));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (part.appendNewline()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                texts.add(new Text(\"\\n\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 84
    }
  },
  {
    "path": "src/main/java/chopchop/ui/DisplayController.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Controller class for the swappable display region."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class DisplayController extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"DisplayPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to ChopChop, a food recipe management system!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String NOTIFICATION_MESSAGE \u003d \"Feature will be coming soon!!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final TextDisplay textDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e recipeObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e ingredientObservableList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e recommendedRecipeObservableList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e expiringRecipeObservableList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane displayAreaPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Button recipeButton;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Button ingredientButton;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Button recommendationButton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code DisplayController} with the given {@code Logic}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public DisplayController(Logic logic) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.textDisplay \u003d new TextDisplay(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeObservableList \u003d logic.getFilteredRecipeList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientObservableList \u003d logic.getFilteredIngredientList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recommendedRecipeObservableList \u003d logic.getRecommendedRecipeList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.expiringRecipeObservableList \u003d logic.getExpiringRecipeList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // TODO: Edit to account for loading of recipes/ingredients after UI"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeObservableList.addListener((ListChangeListener\u003cRecipe\u003e) c -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            // we don\u0027t actually care about the incremental changes, just"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            // the final state. so, exhaust all the things."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                // nothing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "             * TODO: Make logic more robust"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "             * Check if a recipe was replaced in the recipe book, with an extra check to account for"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "             * updateFilteredRecipeList(PREDICATE_SHOW_ALL_ENTRIES)."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "             */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (c.wasReplaced() \u0026\u0026 !c.getAddedSubList().equals(c.getRemoved())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.displayRecipe(c.getAddedSubList().get(c.getAddedSize() - 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else if (c.wasAdded()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.displayRecipe(c.getAddedSubList().get(c.getAddedSize() - 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.displayRecipeList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientObservableList.addListener((ListChangeListener\u003cIngredient\u003e) c -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.displayIngredientList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!logic.getFilteredRecipeList().isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.displayRecipeList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.displayWelcomeMessage();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the RecipeViewPanel on the swappable display region."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayWelcomeMessage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayAreaPlaceholder.getChildren().setAll(this.textDisplay.getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the RecipeViewPanel on the swappable display region."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayRecipeList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var recipeViewPanel \u003d new RecipeViewPanel(this.recipeObservableList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayAreaPlaceholder.getChildren().setAll(recipeViewPanel.getRoot());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.selectRecipeButton();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the RecipeDisplay on the swappable display region."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var recipeDisplay \u003d new RecipeDisplay(recipe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayAreaPlaceholder.getChildren().setAll(recipeDisplay.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.selectRecipeButton();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the IngredientViewPanel on the swappable display region."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayIngredientList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var ingredientViewPanel \u003d new IngredientViewPanel(this.ingredientObservableList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayAreaPlaceholder.getChildren().setAll(ingredientViewPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.selectIngredientButton();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the RecommendationViewPanel on the swappable display region."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected void displayRecommendationList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var recommendationViewPanel \u003d new RecommendationViewPanel(this.recommendedRecipeObservableList,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.expiringRecipeObservableList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayAreaPlaceholder.getChildren().setAll(recommendationViewPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.selectRecommendationButton();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Opens the notification window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleNotification() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var image \u003d new ImageView(MainApp.class.getResource(\"/images/timer.png\").toExternalForm());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        image.setFitHeight(40);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        image.setFitWidth(40);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var alert \u003d new Alert(Alert.AlertType.INFORMATION, NOTIFICATION_MESSAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setTitle(\"Notification\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setHeaderText(null);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setGraphic(image);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Resets buttons in navigation bar to default style."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void resetButtons() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeButton.getStyleClass().remove(\"tab-button-selected\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientButton.getStyleClass().remove(\"tab-button-selected\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recommendationButton.getStyleClass().remove(\"tab-button-selected\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Changes the recipe button style to selected."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void selectRecipeButton() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.resetButtons();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeButton.getStyleClass().add(\"tab-button-selected\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void selectIngredientButton() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.resetButtons();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientButton.getStyleClass().add(\"tab-button-selected\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void selectRecommendationButton() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.resetButtons();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recommendationButton.getStyleClass().add(\"tab-button-selected\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recipe panel."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleRecipePanel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayRecipeList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recipe panel."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleIngredientPanel() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayIngredientList();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recommendations panel."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleRecommendations() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayRecommendationList();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 203
    }
  },
  {
    "path": "src/main/java/chopchop/ui/DisplayNavigator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Utility class for controlling navigation between displays."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * All methods on the navigator are static to facilitate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * simple access from the different displays."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class DisplayNavigator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static DisplayController displayController;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the displayController for the navigator."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected static void setDisplayController(DisplayController displayController) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        DisplayNavigator.displayController \u003d displayController;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the RecipeDisplay onto the swappable display region."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param recipe"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static void loadRecipeDisplay(Recipe recipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayController.displayRecipe(recipe);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the RecipeViewPanel onto the swappable display region."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static void loadRecipePanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayController.displayRecipeList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the IngredientViewPanel into the swappable display region."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static void loadIngredientPanel() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayController.displayIngredientList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Loads the RecommendationViewPanel into the swappable display region."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static void loadRecommendationPanel() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        displayController.displayRecommendationList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true iff there is a valid display controller."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static boolean hasDisplayController() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return displayController !\u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 59
    }
  },
  {
    "path": "src/main/java/chopchop/ui/IngredientCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// IngredientCard.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"IngredientCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label ingredientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label expiryDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private FlowPane tagList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private HBox expiryBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeCard} with the given {@code Recipe}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public IngredientCard(Ingredient ingredient, int id) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.index.setText(String.format(\"#%d\", id));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientName.setText(ingredient.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.quantity.setText(ingredient.getQuantity().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredient.getExpiryDate().ifPresentOrElse(exp -\u003e this.expiryDate.setText(exp.toString()), () -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.expiryBox.setVisible(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.expiryBox.setManaged(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredient.getTags().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .map(Object::toString)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .sorted()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .map(Label::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .forEach(this.tagList.getChildren()::add);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!(other instanceof IngredientCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return ingredient.equals(card.ingredient);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "fall9x": 77
    }
  },
  {
    "path": "src/main/java/chopchop/ui/IngredientViewPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class IngredientViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"IngredientViewPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String EMPTY_PROMPT \u003d \"You do not have any ingredients yet.\\nAdd one today!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FILTER_NO_MATCH \u003d \"No matching ingredients found\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private List\u003cIngredient\u003e ingredientList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ScrollPane ingredientPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private FlowPane ingredientGridView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeView} with the given {@code List}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public IngredientViewPanel(List\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientList \u003d ingredientList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.fillDisplay();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Checks if the display contains any recipes, and fills the recipe grid view."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void fillDisplay() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        ingredientGridView.getChildren().clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.getPlaceholderText().ifPresentOrElse("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            t -\u003e this.ingredientPanel.setContent(new TextDisplay(t).getRoot()), this::populate"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Populates the gridPane with recipes stored."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void populate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (int i \u003d 0; i \u003c this.ingredientList.size(); i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var ingredient \u003d this.ingredientList.get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var ingredientCard \u003d new IngredientCard(ingredient, i + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.ingredientGridView.getChildren().add(ingredientCard.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    // TODO: copy-paste from RecipeViewPanel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Gets the appropriate text to show in the pane if there are no recipes to show."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * If there are recipes to show, returns an empty optional."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Optional\u003cString\u003e getPlaceholderText() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (this.ingredientList instanceof FilteredList\u003c?\u003e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var src \u003d ((FilteredList\u003c?\u003e) this.ingredientList).getSource();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            // if the source was not empty but the filter view is empty,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            // then we have no results."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (!src.isEmpty() \u0026\u0026 this.ingredientList.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                return Optional.of(FILTER_NO_MATCH);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return this.ingredientList.isEmpty()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ? Optional.of(EMPTY_PROMPT)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 81
    }
  },
  {
    "path": "src/main/java/chopchop/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandOutput commandOutput;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StatsBox statsOutput;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private MenuItem fileMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane displayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane pinBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane commandOutputPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.setAccelerators();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage.setMinWidth(820);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage.setMinHeight(520);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return this.primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.helpMenuItem.setAccelerator(KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.fileMenuItem.setAccelerator(KeyCombination.valueOf(\"Alt+F4\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void fillInnerParts() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var commandOutput \u003d new CommandOutput();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandOutput \u003d commandOutput;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandOutputPlaceholder.getChildren().add(commandOutput.getRoot());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.statsOutput \u003d new StatsBox(this.model);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.pinBoxPlaceholder.getChildren().add(statsOutput.getRoot());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var displayController \u003d new DisplayController(logic);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        DisplayNavigator.setDisplayController(displayController);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayPlaceholder.getChildren().setAll(displayController.getRoot());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var commandBox \u003d new CommandBox(this::executeCommand, this.logic);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandBox \u003d commandBox;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandBoxPlaceholder.getChildren().setAll(commandBox.getRoot());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage.addEventFilter(KeyEvent.KEY_TYPED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            commandBox.setFocus(event.getCharacter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage.show();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void showCommandOutput(CommandResult output) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.commandOutput.setFeedbackToUser(output);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var result \u003d this.logic.execute(commandText);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            logger.info(\"Result: \" + result.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (result.isStatsOutput()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandOutput.clear(); // clear cmd box"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.statsOutput.setMessage(result);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.commandOutput.setFeedbackToUser(result);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                this.statsOutput.clearMessage();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (result.shouldExit()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.commandOutput.setFeedbackToUser(CommandResult.error(e.getMessage()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.executeCommand(\"help\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (CommandException | ParseException ignored) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            // Command cannot fail"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(this.primaryStage.getWidth(), this.primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                (int) this.primaryStage.getX(), (int) this.primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.primaryStage.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 184
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecipeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecipeCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Recipe recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Button recipeButton;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label recipeIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeCard} with the given {@code Recipe}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeCard(Recipe recipe, int id) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeIndex.setText(String.format(\"#%d\", id));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeButton.setText(recipe.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleSelectRecipe() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        DisplayNavigator.loadRecipeDisplay(this.recipe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return this.recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 54
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecipeDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// RecipeDisplay.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.util.StreamUtils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.ColumnConstraints;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecipeDisplay.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Recipe recipe;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private GridPane gridPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label recipeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label ingredientHeader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextFlow ingredientList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label stepHeader;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextFlow stepList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private FlowPane tagList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeDisplay} with a {@code Recipe}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param recipe"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeDisplay(Recipe recipe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.display();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Implements responsive percentage widths for columns"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.getRoot().widthProperty().addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var col1 \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var col2 \u003d new ColumnConstraints();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.gridPane.getColumnConstraints().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (newValue.doubleValue() \u003c 768) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col1.setPercentWidth(50);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col2.setPercentWidth(50);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else if (newValue.doubleValue() \u003e\u003d 992) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col1.setPercentWidth(30);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col2.setPercentWidth(70);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col1.setPercentWidth(40);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                col2.setPercentWidth(60);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.gridPane.getColumnConstraints().addAll(col1, col2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Displays the recipe on the recipeDisplay."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void display() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeName.setText(this.recipe.getName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.stepHeader.setText(\"Steps\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientHeader.setText(\"Ingredients\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.tagList.getChildren().clear();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.stepList.getChildren().clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.ingredientList.getChildren().clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (this.recipe.getIngredients().isEmpty()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.ingredientList.getChildren().add(new Text(\"Recipe uses no ingredients\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.recipe.getIngredients().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(s -\u003e new Text(s + \"\\n\"))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .forEach(this.ingredientList.getChildren()::add);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (this.recipe.getSteps().isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.stepList.getChildren().add(new Text(\"Recipe has no steps\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            StreamUtils.indexed(this.recipe.getSteps().stream())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .flatMap(s -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    var label \u003d new Label(String.format(\"%d.\", 1 + s.fst()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    label.setPrefWidth(20);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return List.of("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                        label, new Text(String.format(\"%s\\n\", s.snd()))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    ).stream();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                })"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .forEach(this.stepList.getChildren()::add);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (this.recipe.getTags().isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.tagList.getChildren().add(new Text(\"Recipe has no tags\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.recipe.getTags().stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Object::toString)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(s -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    var t \u003d new Label(s);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    t.getStyleClass().add(\"recipe-tag\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                })"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .forEach(this.tagList.getChildren()::add);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "fall9x": 128
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecipeViewPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecipeViewPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String EMPTY_PROMPT \u003d \"You do not have any recipes yet.\\nAdd one today!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FILTER_NO_MATCH \u003d \"No matching recipes found\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private List\u003cRecipe\u003e recipeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ScrollPane recipePanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private FlowPane recipeGridView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeView} with the given {@code List}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeViewPanel(List\u003cRecipe\u003e filteredList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeList \u003d filteredList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.fillDisplay();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Checks if the display contains any recipes, and fills the recipe grid view."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void fillDisplay() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipeGridView.getChildren().clear();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.getPlaceholderText().ifPresentOrElse("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            t -\u003e this.recipePanel.setContent(new TextDisplay(t).getRoot()), this::populate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Populates the gridPane with recipes stored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void populate() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (int i \u003d 0; i \u003c this.recipeList.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var recipe \u003d this.recipeList.get(i);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var recipeCard \u003d new RecipeCard(recipe, i + 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.recipeGridView.getChildren().add(recipeCard.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Gets the appropriate text to show in the pane if there are no recipes to show."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * If there are recipes to show, returns an empty optional."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Optional\u003cString\u003e getPlaceholderText() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (this.recipeList instanceof FilteredList\u003c?\u003e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var src \u003d ((FilteredList\u003c?\u003e) this.recipeList).getSource();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            // if the source was not empty but the filter view is empty,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            // then we have no results."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (!src.isEmpty() \u0026\u0026 this.recipeList.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                return Optional.of(FILTER_NO_MATCH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return this.recipeList.isEmpty()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ? Optional.of(EMPTY_PROMPT)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            : Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 79
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecommendationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecommendationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecommendationCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String RECOMMENDED_MESSAGE \u003d \"These recommended recipes all contain ingredients that you \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            + \"currently have.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String EXPIRING_MESSAGE \u003d \"Consider cooking this recipe to use ingredients that are about to\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            + \" expire.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String OLD_MESSAGE \u003d \"Consider cooking this recipe that you haven\u0027t tried for a while.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea recommendationText;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea expiringRecipeText;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private TextArea oldRecipeText;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane expiringRecipeContainer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StackPane oldRecipeContainer;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeCard} with the given {@code Recipe}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecommendationCard(Recipe recipe, int id) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recommendationText.setText(RECOMMENDED_MESSAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeCard expiringRecipeCard \u003d new RecipeCard(recipe, id);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        expiringRecipeContainer.getChildren().add(expiringRecipeCard.getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        expiringRecipeText.setText(EXPIRING_MESSAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeCard oldRecipeCard \u003d new RecipeCard(recipe, id);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        oldRecipeContainer.getChildren().add(oldRecipeCard.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        oldRecipeText.setText(OLD_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!(other instanceof RecommendationCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecommendationCard card \u003d (RecommendationCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 73
    }
  },
  {
    "path": "src/main/java/chopchop/ui/RecommendationViewPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecommendationViewPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"RecommendationViewPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String EMPTY_PROMPT \u003d \"You do not have any recipes yet.\\nAdd one today!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private FilteredList\u003cRecipe\u003e recommendedRecipeObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private FilteredList\u003cRecipe\u003e expiringRecipeObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ScrollPane recommendationPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private FlowPane recommendationGridView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code RecipeView} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecommendationViewPanel(FilteredList\u003cRecipe\u003e recommendationList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                   FilteredList\u003cRecipe\u003e expiringList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recommendedRecipeObservableList \u003d recommendationList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.expiringRecipeObservableList \u003d expiringList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recommendedRecipeObservableList.addListener((ListChangeListener\u003cRecipe\u003e) c -\u003e this.fillDisplay());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.fillDisplay();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Checks if the display contains any recipes, and fills the recipe grid view."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void fillDisplay() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.recommendationGridView.getChildren().clear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.getPlaceholderText().ifPresentOrElse("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            t -\u003e this.recommendationPanel.setContent(new TextDisplay(t).getRoot()), this::populate"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * TODO: Doesn\u0027t properly reset recipe filters when using GUI"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Populates the gridPane with recipes stored."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void populate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (!this.expiringRecipeObservableList.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            Recipe expiringRecipe \u003d this.expiringRecipeObservableList.get(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            RecommendationCard expiringCard \u003d new RecommendationCard(expiringRecipe,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    this.expiringRecipeObservableList.getSourceIndex(this.expiringRecipeObservableList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            .indexOf(expiringRecipe)) + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.recommendationGridView.getChildren().add(expiringCard.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (int i \u003d 0; i \u003c this.recommendedRecipeObservableList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var recipe \u003d this.recommendedRecipeObservableList.get(i);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            var recipeCard \u003d new RecipeCard(recipe, this.recommendedRecipeObservableList.getSourceIndex(i) + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.recommendationGridView.getChildren().add(recipeCard.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Gets the appropriate text to show in the pane if there are no recipes to show."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * If there are recipes to show, returns an empty optional."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Optional\u003cString\u003e getPlaceholderText() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return this.recommendedRecipeObservableList.isEmpty()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                ? Optional.of(EMPTY_PROMPT)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 81
    }
  },
  {
    "path": "src/main/java/chopchop/ui/StatsBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StatsBox.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "//@@author trav1sT"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * The UI component that is responsible for displaying pinned information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * Displays results of statistics."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String SUBTITLE_NO_RECIPES \u003d \"No recipes were made recently\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String SUBTITLE_NO_INGREDIENTS \u003d \"No ingredients were made recently\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String SUBTITLE_DEFAULT \u003d \"Showing recently made recipes\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final ArrayList\u003cPair\u003cString, String\u003e\u003e EMPTY_RESULT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new ArrayList\u003c\u003e(Collections.singletonList(new Pair\u003c\u003e(\"No results found\", \"\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String FXML \u003d \"StatsBox.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    // MVC? what is that?"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Label subtitle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private VBox recipeList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates a {@code StatsBox}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public StatsBox(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.model.getObservableRecipeUsages().addListener((ListChangeListener\u003cRecipeUsage\u003e) e -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            // consume all"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            while (e.next()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.clearMessage();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private String formatRecords(ObservableList\u003cPair\u003cString, LocalDateTime\u003e\u003e records) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cPair\u003cString, LocalDateTime\u003e\u003e outputList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        while (i \u003c 3 \u0026\u0026 records.size() !\u003d 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            outputList.add(records.remove(records.size() - 1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String output \u003d outputList.stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .map(x -\u003e String.format(\"%s, %s\", x.fst(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                x.snd().format(DateTimeFormatter.ofPattern(\"dd-MMM-yy hh:mm a\"))))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.joining(\"\\n\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Sets the content based on the command result"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setMessage(CommandResult result) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.subtitle.setText(result.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.showRecentRecipes(result.toString(), result.getStatsMessage());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Clears the message and goes back to the recent recipes view"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void clearMessage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var list \u003d this.model.getRecentlyUsedRecipes(10)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .map(u -\u003e Pair.of(u.getName(), u.getPrintableDate()))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.showRecentRecipes(SUBTITLE_DEFAULT, list);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void showRecentRecipes(String subtitle, List\u003cPair\u003cString, String\u003e\u003e list) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.recipeList.getChildren().clear();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.subtitle.setText(subtitle);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (var usage : list) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.recipeList.getChildren().add(new StatsItemView(usage.fst(), usage.snd()).getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "Trav1sT": 107
    }
  },
  {
    "path": "src/main/java/chopchop/ui/StatsItemView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StatsItemView.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StatsItemView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private static final String FXML \u003d \"StatsItemView.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Label recipeName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private Label recipeDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Creates a {@code RecipeCard} with the given {@code Recipe}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public StatsItemView(String name, String date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipeName.setText(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.recipeDate.setText(date);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 29
    }
  },
  {
    "path": "src/main/java/chopchop/ui/TextDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Class for showing prompts to user when the main display area is empty."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class TextDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String FXML \u003d \"TextDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Label textDisplay;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code PinBox}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public TextDisplay(String text) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Have to decide what to do with this real estate uwu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.textDisplay.setText(text);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 26
    }
  },
  {
    "path": "src/main/java/chopchop/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Displays a modal dialog box"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void displayModalDialog(AlertType alertType, String title, String header, String body);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Displays text in the command output box."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void showCommandOutput(String text, boolean isError);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 13,
      "fall9x": 12
    }
  },
  {
    "path": "src/main/java/chopchop/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "//@@author fall9x"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.Logic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/chopchop.png\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public UiManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        primaryStage.getIcons().add(this.getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            this.showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void showCommandOutput(String text, boolean isError) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.mainWindow.showCommandOutput(isError"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            ? CommandResult.error(text)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            : CommandResult.message(text)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void displayModalDialog(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        showAlertDialogAndWait(this.mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"stylesheets/Style.css\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.displayModalDialog(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 102
    }
  },
  {
    "path": "src/main/java/chopchop/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final FXMLLoader fxmlLoader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this.fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            this.fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 11,
      "fall9x": 1,
      "-": 76
    }
  },
  {
    "path": "src/main/resources/stylesheets/Fonts.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    src: url(\"../fonts/SourceSansPro-ExtraLight.ttf\");"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    src: url(\"../fonts/SourceSansPro-Light.ttf\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    src: url(\"../fonts/SourceSansPro-Regular.ttf\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    src: url(\"../fonts/SourceSansPro-Bold.ttf\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    src: url(\"../fonts/SourceSansPro-SemiBold.ttf\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "@font-face {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-style: normal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    src: url(\"../fonts/SourceSansPro-Black.ttf\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seowalex": 29
    }
  },
  {
    "path": "src/main/resources/stylesheets/Style.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* APPLICATION */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ".main-pane {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #fafafa;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Source Sans Pro\", sans-serif;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-color: #212121;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* OVERRIDES */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane .viewport {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane .scroll-bar {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane .scroll-bar .thumb {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #757575;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane .scroll-bar .increment-button,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane .scroll-bar .increment-button .increment-arrow,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".scroll-pane .scroll-bar .decrement-button .decrement-arrow {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".hyperlink {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* SIDEBAR */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".sidebar {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 12px;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".sidebar-container {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 6px;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-radius: 6px;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 4px 0 4px;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".sidebar-container .scroll-pane {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 4px 12px;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".command-output-container {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #fbe9e7;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #ff7043;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-insets: 0 0 12px 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-insets: 0 0 12px 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".stats-container {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #fffde7;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #fbc02d;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* MAIN PANE */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".content-pane {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 12px 0 12px 12px;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #eeeeee;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-prompt-text-fill: #757575;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 4px;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #757575;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-radius: 4px;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 12px 10px;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".command-input-container {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0 0 12px 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".tab-bar {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #fff3e0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 4px;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #ffb74d;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-radius: 4px;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-insets: 12px 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-insets: 12px 0 0 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".tab-button {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Source Sans Pro\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 8px 32px;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 4px;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-content-display: top;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".tab-button:hover {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #ffe0b2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".tab-button:pressed,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".tab-button-selected,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".tab-button-selected:hover {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #ffcc80;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".welcome-pane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 20px 60px;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".welcome-message {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 40px 0px 0px 0px;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Source Sans Pro Light\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 36px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* RECIPE CARD THINGS */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-card-number {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 12px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-card-button {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #795548;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-radius: 6px;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #efebe9;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 6px;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-content-display: top;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-card-button:hover {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #d7ccc8;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-card-button:pressed {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #bcaaa4;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recommendationCardContainer {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #e8eaf6;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-color: #212121;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 6;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #3f51b5;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-radius: 6;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 12 20 0 12;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recommendationContainer {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0 16 0 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recommendationText,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recommendationText .scroll-pane,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recommendationText .scroll-pane .viewport,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recommendationText .scroll-pane .content {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #e8eaf6;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* RECIPE VIEW THINGS */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-name {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 36px;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 16px 8px 8px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-ingredients-container,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-steps-container {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-background-radius: 6;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-border-radius: 6;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 12px 16px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-ingredients-container {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #f1f8e9;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #8bc34a;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-steps-container {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #fff3e0;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #ff9800;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-insets: 0 0 0 12px;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-insets: 0 0 0 12px;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-ingredients-header,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-steps-header {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-underline: true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0 0 12px 0;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Source Sans Pro SemiBold\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-ingredients,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-steps {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-line-spacing: 4px;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-tags-container {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 12px 6px;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".recipe-tag {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #ff8a65;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 5px;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 4px 8px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* INGREDIENT CARD THINGS */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".ingredient-name {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-text-align: center;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-vertical-align: top;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".ingredient-number, .ingredient-quantity {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   -fx-font-size: 14px;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   -fx-padding: 12px;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".ingredient-expiry-date {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".ingredient-button {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0 0 16px 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-border-color: #795548;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-border-radius: 4;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-background-color: #efebe9;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".ingredient-tags {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 6px;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".ingredient-tags .label {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-text-fill: #fafafa;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #00897b;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 2px 4px;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-radius: 3px;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 3px;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ".stats-header {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-padding: 12px 0 12px 0;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-font-family: \"Source Sans Pro SemiBold\";"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ".stats-subtitle {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    -fx-padding: 0 8px 8px 8px;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ".stats-item-container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-border-color: #80d8ff;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-background-color: #c2eafc;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-background-radius: 4;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-border-radius: 4;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    -fx-padding: 4px 4px 4px 8px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#pins {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-color: #575555;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "seowalex"
        },
        "content": "/* ListView CSS */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#listView {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-color: #212121;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-prompt-text-fill: #212121;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-border-color: #FFFFFF;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#listView .scroll-pane .content{"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #0093ff;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 6;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#listView {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-selection-bar: green ;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-selection-bar-non-focused: green ;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".list-cell:filled:selected:focused, .list-cell:filled:selected {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #d30063;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#listView .scroll-arrow {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".list-cell:even {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".list-cell:filled:hover {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: #fedaeb;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".pair-name {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 1.4em;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "seowalex"
        },
        "content": ".pair-second {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 1.2em;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#header1 {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-font-color: #575555;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#header1 .scroll-pane {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 0 0 10 10;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#header1 .scroll-pane .viewport {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 0 0 10 10;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "seowalex"
        },
        "content": "#header1 .scroll-pane .content{"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    -fx-background-radius: 0 0 10 10;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seowalex"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 41,
      "Trav1sT": 1,
      "seowalex": 317,
      "fall9x": 5
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "           xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "seowalex": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/CommandOutput.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003cScrollPane minHeight\u003d\"120\" styleClass\u003d\"edge-to-edge\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\" fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cTextFlow fx:id\u003d\"displayBox\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "seowalex": 5,
      "fall9x": 3
    }
  },
  {
    "path": "src/main/resources/view/DisplayPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cStackPane fx:id\u003d\"displayAreaPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cHBox styleClass\u003d\"tab-bar\" maxWidth\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cButton fx:id\u003d\"recipeButton\" styleClass\u003d\"tab-button\" mnemonicParsing\u003d\"false\" text\u003d\"Recipes\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                onAction\u003d\"#handleRecipePanel\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cImageView fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    \u003cImage url\u003d\"@../images/recipes.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cButton fx:id\u003d\"ingredientButton\" styleClass\u003d\"tab-button\" mnemonicParsing\u003d\"false\" text\u003d\"Ingredients\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                onAction\u003d\"#handleIngredientPanel\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cImageView fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cImage url\u003d\"@../images/ingredients.png\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cButton fx:id\u003d\"recommendationButton\" styleClass\u003d\"tab-button\" mnemonicParsing\u003d\"false\" text\u003d\"Recommendations\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                onAction\u003d\"#handleRecommendations\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cImageView fitHeight\u003d\"30.0\" fitWidth\u003d\"30.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                    \u003cImage url\u003d\"@../images/recommendations.png\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        \u003c/Button\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 20,
      "fall9x": 18
    }
  },
  {
    "path": "src/main/resources/view/IngredientCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    \u003cButton mnemonicParsing\u003d\"false\" maxHeight\u003d\"125.0\" maxWidth\u003d\"148.0\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            prefHeight\u003d\"126.0\" prefWidth\u003d\"148.0\" styleClass\u003d\"ingredient-button\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                \u003cLabel fx:id\u003d\"ingredientName\" styleClass\u003d\"ingredient-name\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cHBox fx:id\u003d\"expiryBox\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    \u003cLabel styleClass\u003d\"ingredient-expiry-date\" text\u003d\"exp: \"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    \u003cLabel fx:id\u003d\"expiryDate\" styleClass\u003d\"ingredient-expiry-date\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cLabel fx:id\u003d\"index\" styleClass\u003d\"ingredient-number\" StackPane.alignment\u003d\"TOP_LEFT\" mouseTransparent\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"ingredient-quantity\" StackPane.alignment\u003d\"TOP_RIGHT\" mouseTransparent\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"tagList\" styleClass\u003d\"ingredient-tags\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"148.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "              StackPane.alignment\u003d\"BOTTOM_CENTER\" hgap\u003d\"4\" vgap\u003d\"2\" mouseTransparent\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "seowalex": 14,
      "fall9x": 8
    }
  },
  {
    "path": "src/main/resources/view/IngredientViewPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cScrollPane fx:id\u003d\"ingredientPanel\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" vbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"ingredientGridView\" orientation\u003d\"VERTICAL\" hgap\u003d\"12\" vgap\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 6,
      "fall9x": 4
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" title\u003d\"ChopChop\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cURL value\u003d\"@../stylesheets/Fonts.css\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cURL value\u003d\"@../stylesheets/Style.css\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cBorderPane styleClass\u003d\"main-pane\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003ctop\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    \u003cMenuBar fx:id\u003d\"menuBar\" styleClass\u003d\"menu-bar\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                            \u003cMenuItem fx:id\u003d\"fileMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                      text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Docs\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003c/top\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cright\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    \u003cVBox prefWidth\u003d\"300.0\" styleClass\u003d\"sidebar\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"commandOutputPlaceholder\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                   styleClass\u003d\"sidebar-container, command-output-container\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                   prefHeight\u003d\"140.0\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"pinBoxPlaceholder\" styleClass\u003d\"sidebar-container, stats-container\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                                   VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003c/right\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    \u003cVBox styleClass\u003d\"content-pane\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"command-input-container\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"displayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 28,
      "-": 22,
      "fall9x": 1
    }
  },
  {
    "path": "src/main/resources/view/RecipeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cButton fx:id\u003d\"recipeButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSelectRecipe\" prefHeight\u003d\"126.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            prefWidth\u003d\"148.0\" styleClass\u003d\"recipe-card-button\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u003cImageView fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                \u003cImage url\u003d\"@../images/meal.png\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    \u003cLabel fx:id\u003d\"recipeIndex\" styleClass\u003d\"recipe-card-number\" StackPane.alignment\u003d\"TOP_LEFT\" mouseTransparent\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 1,
      "seowalex": 11,
      "fall9x": 7
    }
  },
  {
    "path": "src/main/resources/view/RecipeDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cGridPane fx:id\u003d\"gridPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003cColumnConstraints percentWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003cColumnConstraints percentWidth\u003d\"60.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003cVBox GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003cLabel styleClass\u003d\"recipe-name\" fx:id\u003d\"recipeName\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003cVBox styleClass\u003d\"recipe-tags-container\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"tagList\" hgap\u003d\"8\" vgap\u003d\"6\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003cScrollPane styleClass\u003d\"recipe-ingredients-container\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "         \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cLabel styleClass\u003d\"recipe-ingredients-header\" fx:id\u003d\"ingredientHeader\" underline\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cTextFlow styleClass\u003d\"recipe-ingredients\" fx:id\u003d\"ingredientList\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003cScrollPane styleClass\u003d\"recipe-steps-container\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seowalex"
        },
        "content": "         \u003cLabel styleClass\u003d\"recipe-steps-header\" fx:id\u003d\"stepHeader\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "         \u003cTextFlow styleClass\u003d\"recipe-steps\" fx:id\u003d\"stepList\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "seowalex": 31,
      "fall9x": 5
    }
  },
  {
    "path": "src/main/resources/view/RecipeViewPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cScrollPane fx:id\u003d\"recipePanel\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" vbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "   \u003cFlowPane fx:id\u003d\"recipeGridView\" orientation\u003d\"VERTICAL\" hgap\u003d\"12\" vgap\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 6,
      "fall9x": 4
    }
  },
  {
    "path": "src/main/resources/view/RecommendationCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cVBox styleClass\u003d\"recommendationCardContainer\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"  alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cTextArea fx:id\u003d\"recommendationText\" styleClass\u003d\"recommendationText\" maxHeight\u003d\"58.0\" maxWidth\u003d\"390.0\" wrapText\u003d\"true\" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cHBox styleClass\u003d\"recommendationCard\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cStackPane fx:id\u003d\"expiringRecipeContainer\" styleClass\u003d\"recommendationContainer\" minHeight\u003d\"158\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cTextArea fx:id\u003d\"expiringRecipeText\" styleClass\u003d\"recommendationText\" maxHeight\u003d\"60.0\" maxWidth\u003d\"240.0\" wrapText\u003d\"true\" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cHBox styleClass\u003d\"recommendationCard\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cStackPane fx:id\u003d\"oldRecipeContainer\" styleClass\u003d\"recommendationContainer\" minHeight\u003d\"158\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \u003cTextArea fx:id\u003d\"oldRecipeText\" styleClass\u003d\"recommendationText\" maxHeight\u003d\"42.0\" maxWidth\u003d\"240.0\" wrapText\u003d\"true\" editable\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 18
    }
  },
  {
    "path": "src/main/resources/view/RecommendationViewPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cScrollPane fx:id\u003d\"recommendationPanel\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" vbarPolicy\u003d\"NEVER\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"recommendationGridView\" orientation\u003d\"VERTICAL\" hgap\u003d\"12\" vgap\u003d\"12\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 10
    }
  },
  {
    "path": "src/main/resources/view/StatsBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?import javafx.scene.shape.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003cStackPane alignment\u003d\"CENTER_LEFT\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003cVBox alignment\u003d\"TOP_CENTER\" fx:id\u003d\"statsBox\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        \u003cLabel styleClass\u003d\"stats-header\" text\u003d\"Statistics\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        \u003cLabel fx:id\u003d\"subtitle\" styleClass\u003d\"stats-subtitle\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        \u003cScrollPane fitToWidth\u003d\"true\"\u003e\u003ccontent\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \u003cVBox fx:id\u003d\"recipeList\" spacing\u003d\"7\"\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        \u003c/content\u003e\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 5,
      "Trav1sT": 4,
      "fall9x": 9
    }
  },
  {
    "path": "src/main/resources/view/StatsItemView.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    \u003cVBox styleClass\u003d\"stats-item-container\"\u003e\u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        \u003cLabel fx:id\u003d\"recipeName\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        \u003cLabel fx:id\u003d\"recipeDate\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 11
    }
  },
  {
    "path": "src/main/resources/view/TextDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003cVBox fx:id\u003d\"welcomeMessage\" styleClass\u003d\"welcome-pane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cImageView fitHeight\u003d\"240.0\" fitWidth\u003d\"240.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        \u003cImage url\u003d\"@../images/chopchop.png\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \u003cLabel fx:id\u003d\"textDisplay\" styleClass\u003d\"welcome-message\" wrapText\u003d\"true\" textAlignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "seowalex": 11,
      "fall9x": 3
    }
  },
  {
    "path": "src/test/data/JsonIndBookStorageTest/invalidAndValidIndBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \"ingredients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"name\": \"Valid Ind\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    \"sets\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \"quantity\": \"9482424\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \"expiryDate\": \"2020-04-04\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"name\": \"Ind With Invalid qty Field\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"quantity\": \"\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \"expiryDate\": \"20202-04-04\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 4,
      "Trav1sT": 9,
      "seowalex": 2
    }
  },
  {
    "path": "src/test/data/JsonIndBookStorageTest/invalidIndBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \"ingredients\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"name\": \"\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"quantity\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \"expiryDate\": \"2020-04-04\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 6,
      "seowalex": 1
    }
  },
  {
    "path": "src/test/data/JsonRecipeBookStorageTest/invalidAndValidRecBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \"recipes\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"name\": \"Valid Recipe\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"ingredients\": [\"Apple (14g)\"],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \"steps\": [\"CUT\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \"name\": \"Person With Invalid ingredient Field\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \"ingredients\": [\"\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \"steps\": [\"CUT\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 7,
      "seowalex": 4
    }
  },
  {
    "path": "src/test/data/JsonRecipeBookStorageTest/invalidRecBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"name\": \"Valid Recipe\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    \"ingredients\": [\"Apple (14g)\"],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    \"steps\": [\"CUT\"]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 6,
      "seowalex": 1
    }
  },
  {
    "path": "src/test/data/JsonRecipeBookStorageTest/notJsonRecBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "not json format!"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/recipes.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "seowalex": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/EitherTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// EitherTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class EitherTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Either\u003cString, Integer\u003e l1 \u003d Either.left(\"foo\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Either\u003cString, Integer\u003e l2 \u003d Either.left(\"foofoo\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Either\u003cString, Integer\u003e r1 \u003d Either.right(123);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Either\u003cString, Integer\u003e r2 \u003d Either.right(246);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_values() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(l1.isLeft());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(l1.isRight());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(r1.isRight());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(r1.isLeft());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"foo\", l1.fromLeft());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(123, r1.fromRight());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e l1.fromRight());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e r1.fromLeft());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(l1.fromLeftOpt().isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(l1.fromRightOpt().isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(r1.fromRightOpt().isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(r1.fromLeftOpt().isEmpty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Either\u003c\u003e(\"asdf\", \"bsdf\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this is a bit hacky, but just make a new Strings() class owo"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var s \u003d new Strings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_mapping() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(l2, l1.mapLeft(x -\u003e x + x));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r2, r1.mapRight(x -\u003e x + x));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(l1, l1.mapRight(x -\u003e x + x));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r1, r1.mapLeft(x -\u003e x + x));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(l1, \"foo\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(l1, l1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(l2, l1.mapLeft(x -\u003e x + x));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r2, r1.mapRight(x -\u003e x + x));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var n1 \u003d Either.left(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var n2 \u003d Either.right(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(n1, n2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(n1, l1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(n1, r1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"Left(foo)\", l1.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"Right(123)\", r1.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 82
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/PairTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// PairTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class PairTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_pairs() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p1 \u003d new Pair\u003c\u003e(\"asdf\", 1234);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p2 \u003d Pair.of(\"asdf\", 1234);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"asdf\", p1.fst());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1234, p1.snd());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"asdf\", p2.fst());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1234, p2.snd());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p3 \u003d p1.map((a, b) -\u003e Pair.of(a.toUpperCase(), b * b));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p4 \u003d p2.map((a, b) -\u003e Pair.of(a.toUpperCase(), b * b));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"ASDF\", p3.fst());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1522756, p3.snd());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"ASDF\", p4.fst());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1522756, p4.snd());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(p3, p4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(p4, p3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(p3, p3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(p4, p4);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p5 \u003d p1.mapFst(x -\u003e x + x);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p6 \u003d p1.mapSnd(x -\u003e x + x);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"asdfasdf\", p5.fst());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(2468, p6.snd());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"(asdf, 1234)\", p1.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(p1, \"asdf\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(p3, p1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(p5, p1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(p6, p1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 51
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/ResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ResultTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ResultTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Result\u003cInteger\u003e r1 \u003d Result.of(1234);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final Result\u003cInteger\u003e e1 \u003d Result.error(\"an error\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_values() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1234, r1.getValue());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.of(1234), r1.getValueOpt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.empty(), r1.getErrorOpt());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"an error\", e1.getError());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.of(\"an error\"), e1.getErrorOpt());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.empty(), e1.getValueOpt());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e r1.getError());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e e1.getValue());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(r1.hasValue());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(r1.isError());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(e1.hasValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(e1.isError());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_mapping() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r1.map(x -\u003e x + x), Result.of(2468));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(e1.map(x -\u003e x + x), Result.error(\"an error\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(RuntimeException.class, () -\u003e r1.perform(x -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new RuntimeException(\"kekw\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // there\u0027s no assertNoThrow, so just perform the thing -- if we threw, then the test will fail anyway."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        e1.perform(x -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new RuntimeException(\"shouldn\u0027t be thrown!\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_monadic() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1234, e1.orElse(1234));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(2468), r1.then(x -\u003e Result.of(x + x)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(e1, e1.then(x -\u003e Result.of(x + x)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.of(1234), r1.toOptional());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.empty(), e1.toOptional());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(RuntimeException.class, () -\u003e e1.throwIfError(e -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new RuntimeException(\"kekw\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // same thing -- this shouldn\u0027t throw."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        r1.throwIfError(e -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new RuntimeException(\"shouldn\u0027t be thrown!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1234, r1.orElseThrow(e -\u003e new RuntimeException(\"\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(RuntimeException.class, () -\u003e e1.orElseThrow(e -\u003e new RuntimeException(\"\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(RuntimeException.class, () -\u003e e1.throwIfError(e -\u003e new RuntimeException(\"\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(RuntimeException.class, () -\u003e r1.perform(x -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new RuntimeException(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        r1.perform(x -\u003e {});"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"Result(1234)\", r1.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"Error(an error)\", e1.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(r1, 1234);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(e1, \"an error\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r1, r1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(e1, e1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(r1, e1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(r1, Result.of(2345));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(e1, Result.\u003cInteger\u003eerror(\"some other error\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r1, Result.of(1234));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(e1, Result.\u003cInteger\u003eerror(\"an error\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(e1, Result.ofNullable(null, \"an error\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r1, Result.ofNullable(1234, \"an error\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(e1, Result.ofOptional(Optional.empty(), \"an error\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(r1, Result.ofOptional(Optional.of(1234), \"an error\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_flattening() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.flatten(Result.of(r1)), r1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.flatten(Result.of(e1)), e1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.flatten(Result.\u003cResult\u003cInteger\u003e\u003eerror(\"owo\")), Result.\u003cInteger\u003eerror(\"owo\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.empty(), Result.flattenOptional(Optional.of(e1)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.empty(), Result.flattenOptional(Optional.empty()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.of(1234), Result.flattenOptional(Optional.of(r1)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_transposition() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.transpose(Optional.of(r1)), Result.of(Optional.of(1234)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.transpose(Optional.empty()), Result.of(Optional.empty()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.transpose(Optional.of(e1)), e1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_extraction() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.extractException(Result.error(\"an error\")), Result.error(\"an error\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var re1 \u003d Result.of(Either.left(new RuntimeException(\"oops\")));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var rr1 \u003d Result.of(Either.\u003cRuntimeException, Integer\u003eright(1234));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(RuntimeException.class, () -\u003e Result.extractException(re1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(1234), Result.extractException(rr1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_sequencing() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ok \u003d List.of(Result.of(11), Result.of(22), Result.of(33));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var seq1 \u003d Result.sequence(ok);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(seq1.hasValue());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(List.of(11, 22, 33), seq1.getValue());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        List\u003cResult\u003cInteger\u003e\u003e notOk \u003d List.of(Result.of(11), Result.of(22), Result.error(\"owo\"), Result.of(44));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var seq2 \u003d Result.sequence(notOk);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(seq2.isError());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.error(\"owo\"), seq2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var r1 \u003d Result.of(1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var r2 \u003d Result.of(2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var r3 \u003d Result.of(3);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var e1 \u003d Result.error(\"e1\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var e2 \u003d Result.error(\"e2\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var e3 \u003d Result.error(\"e3\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.of(\"e1\"), Result.firstError(r1, r2, e1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.empty(), Result.firstError(r1, r2, r3));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var pi \u003d Result.of(3.14);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(pi, Result.allOf(() -\u003e pi));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(e3, Result.allOf(() -\u003e Result.of(3.14), r1, r2, e3));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhiayang": 186
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/StreamUtilsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StreamUtilsTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StreamUtilsTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_streamUtils() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var s1 \u003d Stream.iterate(0, i -\u003e i + 1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var s2 \u003d Stream.iterate(\"\", x -\u003e x + \"a\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var s3 \u003d Stream.iterate(0, i -\u003e i + 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var s4 \u003d Stream.iterate(\"\", x -\u003e x + \"a\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var s5 \u003d Stream.iterate(\"\", x -\u003e x + \"a\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var z1 \u003d StreamUtils.zip(s1, s2).map(p -\u003e p.fst() \u003d\u003d p.snd().length());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(z1.limit(10).allMatch(x -\u003e x));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(StreamUtils.zip(s3, s4).limit(10).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            StreamUtils.indexed(s5).limit(10).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 30
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/chopchop/commons/util/StringViewTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StringViewTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.commons.util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StringViewTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final StringView sv1 \u003d new StringView(\"abcdef ghi jklmno \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final StringView sv2 \u003d new StringView(\"owo uwu AYAYA\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_stringViews() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(3, sv1.find(\"def\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(7, sv1.find(new StringView(\"ghi\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1, sv1.find(\u0027b\u0027));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(sv2.startsWith(\"owo\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(sv2.startsWith(new StringView(\"owo\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\u0027o\u0027, sv2.at(2));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\u0027a\u0027, sv1.front());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\u0027A\u0027, sv2.back());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e new StringView(\"\").front());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e new StringView(\"\").back());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e new StringView(\"3\").drop(-1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e new StringView(\"3\").takeLast(-1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"owo\", sv2.take(3).toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"AYAYA\", sv2.takeLast(5).toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"owo uwu AYAYA\", sv2.take(400).toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"owo uwu AYAYA\", sv2.takeLast(400).toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"wo uwu AYAYA\", sv2.drop(3).undrop(2).toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv4 \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv5 \u003d new StringView(\"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"asdf\", new StringView(\"asdfxxxxxuwuwu\").bisect(\u0027x\u0027).fst().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"asdf\", new StringView(\"asdfxxxxxuwuwu\").bisect(\u0027x\u0027, sv4).toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        new StringView(\"asdfxxxxxuwuwu\").bisect(sv4, \u0027x\u0027, sv5);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"asdf\", sv4.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"uwuwu\", sv5.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new StringView(\"ayaya\").uppercase().toString(), \"AYAYA\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new StringView(\"AYAYA\").lowercase().toString(), \"ayaya\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(new StringView(\"asdf\").equals(\"asdf\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(sv1, sv1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(sv1, new StringView(sv1.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(sv1, 3);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(sv1.startsWith(\"owo\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(sv2.startsWith(new StringView(\"kekw\")));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"asdf\".hashCode(), new StringView(\"asdf\").hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var sv3 \u003d new StringView(\"AAA      BBB CCC\\t\\t\\tDDD    \\t  \\t\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(List.of(\"owo\", \"uwu\", \"AYAYA\"), sv2.words());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(List.of(\"AAA\", \"BBB\", \"CCC\", \"DDD\"), sv3.words());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(List.of(\"AAA\"), new StringView(\"AAA::::\").splitBy(c -\u003e c \u003d\u003d \u0027:\u0027));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 76
    }
  },
  {
    "path": "src/test/java/chopchop/logic/autocomplete/AutoCompleterTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// AutoCompleterTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.autocomplete;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.TypicalRecipes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class AutoCompleterTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private final ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void runTests(HashMap\u003cString, String\u003e cases) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var completer \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var output \u003d completer.getCompletionForInput(parser, model, k).strip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, output);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            completer.resetCompletionState();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_commandCompletions() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // Map.of() doesn\u0027t take enough arguments."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // test command completion"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"a\",                                      \"add\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"f\",                                      \"find\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"l\",                                      \"list\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"q\",                                      \"quit\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"h\",                                      \"help\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"e\",                                      \"edit\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"v\",                                      \"view\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"m\",                                      \"make\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"u\",                                      \"undo\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"r\",                                      \"redo\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"s\",                                      \"stats\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"d\",                                      \"delete\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"fil\",                                    \"filter\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_targetCompletionRecipes() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // target completion (recipes)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add r\",                                  \"add recipe\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"find r\",                                 \"find recipe\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"list r\",                                 \"list recipe\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete r\",                               \"delete recipe\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_targetCompletionIngredients() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // target completion (ingredients)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add i\",                                  \"add ingredient\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"find i\",                                 \"find ingredient\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"list i\",                                 \"list ingredient\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete i\",                               \"delete ingredient\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_argumentCompletions() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // argument completion"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /i\",                     \"add recipe cake /ingredient\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /q\",                     \"add recipe cake /qty\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient milk /q\",                 \"add ingredient milk /qty\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient milk /e\",                 \"add ingredient milk /expiry\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete ingredient milk /q\",              \"delete ingredient milk /qty\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /i\",                       \"filter recipe /ingredient\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /t\",                       \"filter recipe /tag\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient /e\",                   \"filter ingredient /expiry\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient /t\",                   \"filter ingredient /tag\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // no completions"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete recipe cake /q\",                  \"delete recipe cake /q\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_ingredientCompletions() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // ingredient name completion"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /ingredient a\",          \"add recipe cake /ingredient Apricot\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /ingredient ban\",        \"add recipe cake /ingredient Banana\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /ingredient baked b\",    \"add recipe cake /ingredient Baked beans\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete ingredient a\",                    \"delete ingredient Apricot\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient c\",                       \"add ingredient Custard\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_recipeCompletions() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // recipe name completion"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete recipe a\",                        \"delete recipe Apricot Salad\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"make cus\",                               \"make Custard Salad\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"view b\",                                 \"view Banana Salad\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this should not complete"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe a\",                           \"add recipe a\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_tagCompletions() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // tag completion"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /tag r\",                 \"add recipe cake /tag round\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient chocolate /tag b\",        \"add ingredient chocolate /tag brown\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // no completion"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add owo uwu /tag k\",                     \"add owo uwu /tag k\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // no completion -- can\u0027t complete ingredient tags in recipe and vice versa"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /tag b\",                 \"add recipe cake /tag b\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient cake /tag g\",             \"add ingredient cake /tag g\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_editCompletions() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // edit completion (a whole thing on its own)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit r\",                                 \"edit recipe\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe c\",                          \"edit recipe Custard Salad\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /i\",                    \"edit recipe cake /ingredient:\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /ingredient:a\",         \"edit recipe cake /ingredient:add\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /ingredient:e\",         \"edit recipe cake /ingredient:edit\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /ingredient:d\",         \"edit recipe cake /ingredient:delete\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /ingredient:add a\",     \"edit recipe cake /ingredient:add Apricot\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /ingredient:add Apricot /q\", \"edit recipe cake /ingredient:add Apricot /qty\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /step:a\",               \"edit recipe cake /step:add\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /step:e\",               \"edit recipe cake /step:edit:\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /step:d\",               \"edit recipe cake /step:delete:\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /tag:a\",                \"edit recipe cake /tag:add\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /tag:d\",                \"edit recipe cake /tag:delete\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // this one shouldn\u0027t work cos you can\u0027t do /tag:edit"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /tag:e\",                \"edit recipe cake /tag:e\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /tag:a\",                \"edit recipe cake /tag:add\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /tag:d\",                \"edit recipe cake /tag:delete\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // no completions:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit ingredient /f\",                     \"edit ingredient /f\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe /qty:e\",                     \"edit recipe /qty:e\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe /qty:e:f:g\",                 \"edit recipe /qty:e:f:g\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /step:add:\",            \"edit recipe cake /step:add:\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe cake /step:\",                \"edit recipe cake /step:\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_completionCycling() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"f\",                                      List.of(\"find\", \"filter\"));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe cake /ingredient b\",          List.of(\"add recipe cake /ingredient Banana\","
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add recipe cake /ingredient Baked beans\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help f\",                                 List.of(\"help find\", \"help filter\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"list r\",                                 List.of(\"list recipe\", \"list recommendation\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var completer \u003d new AutoCompleter();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var input \u003d k;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var outputs \u003d v;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            for (var out : outputs) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                input \u003d completer.getCompletionForInput(parser, model, input);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                assertEquals(out.strip(), input.strip());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_helpCompletions() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help a\",                                 \"help add\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help d\",                                 \"help delete\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help add r\",                             \"help add recipe\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help stats r\",                           \"help stats recipe\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help stats recipe t\",                    \"help stats recipe top\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help stats recipe top asdf\",             \"help stats recipe top asdf\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help stats i\",                           \"help stats ingredient\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help stats ingredient u\",                \"help stats ingredient used\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help stats recommendation u\",            \"help stats recommendation u\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help stats\",                             \"help stats\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_statsCompletions() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats r\",                                \"stats recipe\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats i\",                                \"stats ingredient\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe t\",                         \"stats recipe top\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe m\",                         \"stats recipe made\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe c\",                         \"stats recipe clear\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe r\",                         \"stats recipe recent\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient u\",                     \"stats ingredient used\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient c\",                     \"stats ingredient clear\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient r\",                     \"stats ingredient recent\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used asdf\",             \"stats ingredient used asdf\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_noCompletions() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // things that don\u0027t change"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"\",                                       \"\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"kk\",                                     \"kk\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add\",                                    \"add\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add owo /q\",                             \"add owo /q\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add owo\",                                \"add owo\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe\",                             \"add recipe\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recommendation owo\",                 \"add recommendation owo\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recommendation owo /tag a\",          \"add recommendation owo /tag a\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe /ingredient qqq\",             \"add recipe /ingredient qqq\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"find recipe\",                            \"find recipe\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"find recipe /\",                          \"find recipe /\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter owo /f\",                          \"filter owo /f\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"list /f\",                                \"list /f\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"list /tag t\",                            \"list /tag t\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"list /qty 5\",                            \"list /qty 5\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"undo f\",                                 \"undo f\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter owo /f \",                         \"filter owo /f\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        runTests(cases);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private class ModelStub extends chopchop.model.ModelStub {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private final EntryBook\u003cRecipe\u003e recipes;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        private final EntryBook\u003cIngredient\u003e ingredients;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public ModelStub() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.recipes \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ingredients \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.recipes.setAll(List.of("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                TypicalRecipes.APRICOT_SALAD,"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                TypicalRecipes.BANANA_SALAD,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                TypicalRecipes.CUSTARD_SALAD"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.recipes.add(new Recipe("
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"Peanut Salad\", List.of(TypicalIngredients.APRICOT_REF), List.of(new Step(\"mix\")),"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                Set.of(new Tag(\"gross\"), new Tag(\"round\"))"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ingredients.setAll(List.of("
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                TypicalIngredients.APRICOT,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                TypicalIngredients.BANANA,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                TypicalIngredients.CUSTARD,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                TypicalIngredients.BAKED_BEANS"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ingredients.add(new Ingredient("
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"Peanut\", Optional.empty(), Optional.empty(),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                Set.of(new Tag(\"brown\"), new Tag(\"round\"))"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public ReadOnlyEntryBook\u003cIngredient\u003e getIngredientBook() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.ingredients;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public ReadOnlyEntryBook\u003cRecipe\u003e getRecipeBook() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.recipes;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 353,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/AddIngredientCommandIntTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddIngredientCommandIntTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model \u003d new ModelManager(new EntryBook\u003c\u003e(), getTypicalIngredientBook(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_newIngredient_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var validIngredient \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new EntryBook\u003c\u003e(), model.getIngredientBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new UsageList\u003cRecipeUsage\u003e(), new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.addIngredient(validIngredient);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandSuccess(new AddIngredientCommand("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            validIngredient.getName(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Optional.of(validIngredient.getQuantity()),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            validIngredient.getExpiryDate(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            validIngredient.getTags()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        ), model, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 13,
      "Trav1sT": 30,
      "seowalex": 2
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/AddIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class AddIngredientCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_ingredientAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var modelStub \u003d new ModelStubAcceptingIngredientAdded();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingr \u003d new IngredientBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var result \u003d new AddIngredientCommand(ingr.getName(), Optional.of(ingr.getQuantity()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            ingr.getExpiryDate(), ingr.getTags())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .execute(modelStub, new CommandTestUtil.HistoryManagerStub());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(result.didSucceed());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Arrays.asList(ingr), modelStub.ingredientsAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void add_ingredients_combine() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var milk1 \u003d new IngredientBuilder().withName(\"milk\").withQuantity(Volume.litres(0.7)).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var milk2 \u003d new IngredientBuilder().withName(\"MILK\").withQuantity(Volume.cups(1)).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var modelStub \u003d new ModelStubAcceptingIngredientAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var historyStub \u003d new CommandTestUtil.HistoryManagerStub();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var out \u003d new AddIngredientCommand(\"milk\", Optional.of(Volume.litres(0.7)), Optional.empty(), Set.of())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .execute(modelStub, historyStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(out.didSucceed());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var out2 \u003d new AddIngredientCommand(\"MILK\", Optional.of(Volume.cups(1)), Optional.empty(), Set.of())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .execute(modelStub, historyStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(out2.didSucceed());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var apple \u003d new IngredientBuilder().withName(\"Apple\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var banana \u003d new IngredientBuilder().withName(\"Banana\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var appleCmd \u003d new AddIngredientCommand(\"Apple\", Optional.empty(), Optional.empty(), Set.of());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var bananaCmd \u003d new AddIngredientCommand(\"Banana\", Optional.empty(), Optional.empty(), Set.of());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(appleCmd.equals(appleCmd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var appleCmdCopy \u003d new AddIngredientCommand(\"Apple\", Optional.empty(), Optional.empty(), Set.of());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(appleCmd.equals(appleCmdCopy));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(appleCmd.equals(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(appleCmd.equals(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(appleCmd.equals(bananaCmd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A Model stub that contains a single ingredient."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private class ModelStubWithIngredient extends ModelStub {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        private final Ingredient ingredient;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelStubWithIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return this.ingredient.isSame(ingredient);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public Optional\u003cIngredient\u003e findIngredientWithName(String name) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return this.ingredient.getName().equalsIgnoreCase(name)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ? Optional.of(this.ingredient)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * A Model stub that always accepts the ingredient being added."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static class ModelStubAcceptingIngredientAdded extends ModelStub {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        final ArrayList\u003cIngredient\u003e ingredientsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return ingredientsAdded.stream().anyMatch(ingredient::isSame);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            requireNonNull(ingredient);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ingredientsAdded.add(ingredient);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public Optional\u003cIngredient\u003e findIngredientWithName(String name) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            return this.ingredientsAdded"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                .filter(i -\u003e i.getName().equalsIgnoreCase(name))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var i \u003d this.ingredientsAdded.indexOf(target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            if (i \u003d\u003d -1) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                throw new NoSuchElementException(\"ingredient not found\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.ingredientsAdded.set(i, editedIngredient);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public ReadOnlyEntryBook\u003cIngredient\u003e getIngredientBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 65,
      "Trav1sT": 73,
      "seowalex": 12
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/AddRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class AddRecipeCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_recipeAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var modelStub \u003d new ModelStubAcceptingRecipeAdded();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var validRecipe \u003d new RecipeBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var result \u003d new AddRecipeCommand(validRecipe.getName(), validRecipe.getIngredients(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            validRecipe.getSteps(), validRecipe.getTags())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .execute(modelStub, new CommandTestUtil.HistoryManagerStub());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(result.didSucceed());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(validRecipe), modelStub.recipesAdded);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var appleSalad \u003d new RecipeBuilder().withName(\"Apple Salad\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var bananaSalad \u003d new RecipeBuilder().withName(\"Banana Salad\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var addAppleSaladCommand \u003d new AddRecipeCommand(appleSalad.getName(), List.of(), List.of(), Set.of());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var addBananaSaladCommand \u003d new AddRecipeCommand(bananaSalad.getName(), List.of(), List.of(), Set.of());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(addAppleSaladCommand.equals(addAppleSaladCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var addAmericanoCommand \u003d new AddRecipeCommand(\"Apple Salad\", List.of(), List.of(), Set.of());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(addAppleSaladCommand.equals(addAmericanoCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(addAppleSaladCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(addAppleSaladCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(addAppleSaladCommand.equals(addBananaSaladCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * A Model stub that contains a single recipe."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private class ModelStubWithRecipe extends ModelStub {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        private final Recipe recipe;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ModelStubWithRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return this.recipe.isSame(recipe);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public Optional\u003cRecipe\u003e findRecipeWithName(String name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return this.recipe.getName().equalsIgnoreCase(name)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                ? Optional.of(this.recipe)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                : Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * A Model stub that always accepts the recipe being added."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private class ModelStubAcceptingRecipeAdded extends ModelStub {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final ArrayList\u003cRecipe\u003e recipesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return recipesAdded.stream().anyMatch(recipe::isSame);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            requireNonNull(recipe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            recipesAdded.add(recipe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public Optional\u003cRecipe\u003e findRecipeWithName(String name) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            requireNonNull(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return this.recipesAdded"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .filter(r -\u003e r.getName().equalsIgnoreCase(name))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            var r \u003d this.recipesAdded.indexOf(target);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            if (r \u003d\u003d -1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                throw new NoSuchElementException(\"recipe not found\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.recipesAdded.set(r, editedRecipe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        public ReadOnlyEntryBook\u003cRecipe\u003e getRecipeBook() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 129
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_APRICOT \u003d \"Apricot\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_BANANA \u003d \"Banana\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_CUSTARD \u003d \"Custard\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_APRICOT \u003d 1000000;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_BANANA \u003d 17;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final double VALID_INGREDIENT_QTY_CUSTARD \u003d 18;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_APRICOT \u003d \"2020-12-01\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_BANANA \u003d \"2021-10-13\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_INGREDIENT_EXPIRY_CUSTARD \u003d \"2020-04-04\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALID_RECIPE_NAME_APRICOT_SALAD \u003d \"Apricot Salad\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String VALID_RECIPE_NAME_BANANA_SALAD \u003d \"Banana Salad\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String VALID_RECIPE_NAME_CUSTARD_SALAD \u003d \"Custard Salad\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Executes the given command and asserts that it succeeds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model model, Model expectedModel) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var result \u003d command.execute(model, new HistoryManagerStub());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(result.didSucceed());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "     * Executes the given command and asserts that it fails."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static void assertCommandFailure(Command command, Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        EntryBook\u003cIngredient\u003e expectedIndBook \u003d new EntryBook\u003c\u003e(model.getIngredientBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        List\u003cIngredient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var result \u003d command.execute(model, new HistoryManagerStub());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(result.isError());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(expectedIndBook, model.getIngredientBook());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(expectedFilteredList, model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Updates {@code model}\u0027s filtered ingredient list to show only the ingredient at the given {@code targetIndex}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * in the {@code model}\u0027s ingredient book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void showIngredientAtIndex(Model model, ItemReference targetIndex) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(targetIndex.getZeroIndex() \u003c model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Ingredient ind \u003d model.getFilteredIngredientList().get(targetIndex.getZeroIndex());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final String[] splitName \u003d ind.getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(1, model.getFilteredIngredientList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Updates {@code model}\u0027s filtered recipe list to show only the recipe at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * {@code model}\u0027s recipe book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param targetIndex"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static void showRecipeAtIndex(Model model, ItemReference targetIndex) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(targetIndex.getZeroIndex() \u003c model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe rec \u003d model.getFilteredRecipeList().get(targetIndex.getZeroIndex());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        final String[] splitName \u003d rec.getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(1, model.getFilteredRecipeList().size());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * A default history stub that have all of the methods failing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static class HistoryManagerStub extends HistoryManager {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public void add(Command command) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public CommandResult undo(Model model) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public CommandResult redo(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 24,
      "zhiayang": 27,
      "Trav1sT": 46,
      "seowalex": 20
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/DeleteIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showIngredientAtIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_FIRST;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_SECOND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DeleteIngredientCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model \u003d new ModelManager(new EntryBook\u003c\u003e(), getTypicalIngredientBook(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var indToDelete \u003d model.getFilteredIngredientList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteCommand \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var expectedModel \u003d new ModelManager(new EntryBook\u003c\u003e(), model.getIngredientBook(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new UsageList\u003cRecipeUsage\u003e(), new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.deleteIngredient(indToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var outOfBoundIndex \u003d ItemReference.ofOneIndex(model.getFilteredIngredientList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandFailure(deleteCommand, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        showIngredientAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var indToDelete \u003d model.getFilteredIngredientList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteCommand \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var expectedModel \u003d new ModelManager(new EntryBook\u003c\u003e(), model.getIngredientBook(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.deleteIngredient(indToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        showNoIngredient(expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        showIngredientAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var outOfBoundIndex \u003d INDEXED_SECOND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of ingredient book list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroIndex() \u003c model.getIngredientBook().getEntryList().size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteCommand \u003d new DeleteIngredientCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandFailure(deleteCommand, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteFirstCommand \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteSecondCommand \u003d new DeleteIngredientCommand(INDEXED_SECOND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var deleteFirstCommandCopy \u003d new DeleteIngredientCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private void showNoIngredient(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model.updateFilteredIngredientList(p -\u003e false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(model.getFilteredIngredientList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 4,
      "zhiayang": 24,
      "Trav1sT": 77,
      "seowalex": 2
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/DeleteRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class DeleteRecipeCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var recToDelete \u003d model.getFilteredRecipeList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var deleteCommand \u003d new DeleteRecipeCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var expectedModel \u003d new ModelManager(model.getRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.deleteRecipe(recToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var outOfBoundIndex \u003d ItemReference.ofOneIndex(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var deleteCommand \u003d new DeleteRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandFailure(deleteCommand, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        showRecipeAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var recToDelete \u003d model.getFilteredRecipeList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var deleteCommand \u003d new DeleteRecipeCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var expectedModel \u003d new ModelManager(model.getRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.deleteRecipe(recToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        showNoRecipe(expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        showRecipeAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var outOfBoundIndex \u003d INDEXED_SECOND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroIndex() \u003c model.getRecipeBook().getEntryList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var deleteCommand \u003d new DeleteRecipeCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandFailure(deleteCommand, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var deleteFirstCommand \u003d new DeleteRecipeCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var deleteSecondCommand \u003d new DeleteRecipeCommand(INDEXED_SECOND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var deleteFirstCommandCopy \u003d new DeleteRecipeCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no recipe."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private void showNoRecipe(Model model) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 107
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/FilterIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.ExpiryDateMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FilterIngredientCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model model \u003d new ModelManager(new EntryBook\u003c\u003e(), getTypicalIngredientBook(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new EntryBook\u003c\u003e(), getTypicalIngredientBook(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        new UsageList\u003cRecipeUsage\u003e(), new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var firstTagPredicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"firstTag\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var secondTagPredicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"secondTag\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var firstExpiryPredicate \u003d new ExpiryDateMatchesKeywordsPredicate(new ExpiryDate(\"2020-12-31\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var secondExpiryPredicate \u003d new ExpiryDateMatchesKeywordsPredicate(new ExpiryDate(\"2022-01-01\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterFirstCommand \u003d new FilterIngredientCommand(firstExpiryPredicate, firstTagPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterSecondCommand \u003d new FilterIngredientCommand(secondExpiryPredicate, firstTagPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterThirdCommand \u003d new FilterIngredientCommand(firstExpiryPredicate, secondTagPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterFourthCommand \u003d new FilterIngredientCommand(secondExpiryPredicate, secondTagPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterFirstCommandCopy \u003d new FilterIngredientCommand(firstExpiryPredicate, firstTagPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterThirdCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterFourthCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTags_noIngredientFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Sweet\", \"Vegetable\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterIngredientCommand(null, tagPredicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredIngredientList(tagPredicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTags_multipleRecipesFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Sweet\", \"Fruit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterIngredientCommand(null, tagPredicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredIngredientList(tagPredicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT, BANANA), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleIngredients_multipleIngredientsFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var expiryPredicate \u003d prepareExpiryPredicate(\"2023-12-12\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterIngredientCommand(expiryPredicate, null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredIngredientList(expiryPredicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT, BANANA), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTagsIngredients_multipleIngredientsFound() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Sweet\", \"Fruit\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var expiryPredicate \u003d prepareExpiryPredicate(\"2023-01-01\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterIngredientCommand(expiryPredicate, tagPredicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredIngredientList(expiryPredicate.and(tagPredicate));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT, BANANA), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTagsIngredients_noIngredientFound() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Spicy\", \"Sweet\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var expiryPredicate \u003d prepareExpiryPredicate(\"2020-01-01\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterIngredientCommand(expiryPredicate, tagPredicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredIngredientList(expiryPredicate.and(tagPredicate));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses {@code userInputs} into a {@code TagContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private TagContainsKeywordsPredicate prepareTagPredicate(String... userInputs) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new TagContainsKeywordsPredicate(Arrays.asList(userInputs));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses {@code userInput} into a {@code ExpiryDateMatchesKeywordsPredicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private ExpiryDateMatchesKeywordsPredicate prepareExpiryPredicate(String userInput) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new ExpiryDateMatchesKeywordsPredicate(new ExpiryDate(userInput));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 125
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/FilterRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.IngredientsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FilterRecipeCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new EntryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        new UsageList\u003cRecipeUsage\u003e(), new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var firstTagPredicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"firstTag\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var secondTagPredicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"secondTag\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var firstIngredientPredicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"firstIngredient\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var secondIngredientPredicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"secondIngredient\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterFirstCommand \u003d new FilterRecipeCommand(firstTagPredicate, firstIngredientPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterSecondCommand \u003d new FilterRecipeCommand(firstTagPredicate, secondIngredientPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterThirdCommand \u003d new FilterRecipeCommand(secondTagPredicate, firstIngredientPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterFourthCommand \u003d new FilterRecipeCommand(secondTagPredicate, secondIngredientPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var filterFirstCommandCopy \u003d new FilterRecipeCommand(firstTagPredicate, firstIngredientPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterThirdCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(filterFirstCommand.equals(filterFourthCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTags_noRecipeFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Salad\", \"Spicy\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterRecipeCommand(tagPredicate, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredRecipeList(tagPredicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTags_multipleRecipesFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Salad\", \"Cold Food\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterRecipeCommand(tagPredicate, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredRecipeList(tagPredicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT_SALAD, BANANA_SALAD), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleIngredients_moreThanZeroRecipeFound() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var indPredicate \u003d prepareIngredientPredicate(\"Apricot\", \"Custard\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterRecipeCommand(null, indPredicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredRecipeList(indPredicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT_SALAD), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTagsIngredients_multipleRecipesFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Salad\", \"Cold Food\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var indPredicate \u003d prepareIngredientPredicate(\"Custard\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterRecipeCommand(tagPredicate, indPredicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredRecipeList(indPredicate.and(tagPredicate));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT_SALAD, BANANA_SALAD), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleTagsIngredients_noRecipeFound() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var tagPredicate \u003d prepareTagPredicate(\"Spicy\", \"Salad\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var indPredicate \u003d prepareIngredientPredicate(\"Custard\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FilterRecipeCommand(tagPredicate, indPredicate);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredRecipeList(indPredicate.and(tagPredicate));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses {@code userInputs} into a {@code TagContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private TagContainsKeywordsPredicate prepareTagPredicate(String... userInputs) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new TagContainsKeywordsPredicate(Arrays.asList(userInputs));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses {@code userInputs} into a {@code IngredientContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private IngredientsContainsKeywordsPredicate prepareIngredientPredicate(String... userInputs) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new IngredientsContainsKeywordsPredicate(Arrays.asList(userInputs));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 125
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/FindIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class FindIngredientCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model \u003d new ModelManager(new EntryBook\u003c\u003e(), getTypicalIngredientBook(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new EntryBook\u003c\u003e(), getTypicalIngredientBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new UsageList\u003cRecipeUsage\u003e(), new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var firstPredicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var secondPredicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var findFirstCommand \u003d new FindIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var findSecondCommand \u003d new FindIngredientCommand(secondPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var findFirstCommandCopy \u003d new FindIngredientCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_zeroKeywords_noIngredientFound() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var command \u003d new FindIngredientCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_multipleKeywords_multipleIngredientsFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var predicate \u003d preparePredicate(\"apricot banana\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var command \u003d new FindIngredientCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel.updateFilteredIngredientList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT, BANANA), model.getFilteredIngredientList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 2,
      "zhiayang": 11,
      "Trav1sT": 63,
      "seowalex": 2
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/FindRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class FindRecipeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalRecipeBook(), new EntryBook\u003c\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new UsageList\u003cRecipeUsage\u003e(), new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var firstPredicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var secondPredicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var findFirstCommand \u003d new FindRecipeCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var findSecondCommand \u003d new FindRecipeCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var findFirstCommandCopy \u003d new FindRecipeCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        //different values -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_zeroKeywords_noRecipeFound() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FindRecipeCommand(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_multipleKeyWords_mutipleRecipesFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var predicate \u003d preparePredicate(\"apricot salad banana salad\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        var command \u003d new FindRecipeCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel.updateFilteredRecipeList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(command, model, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(Arrays.asList(APRICOT_SALAD, BANANA_SALAD), model.getFilteredRecipeList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 79
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// HelpCommandTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Strings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ModelStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.history.HistoryManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private void test(HashMap\u003cPair\u003cString, String\u003e, String\u003e cases) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var model \u003d new ModelStub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var history \u003d new HistoryManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var cmd \u003d new HelpCommand(Optional.ofNullable(k.fst()), Optional.ofNullable(k.snd()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, cmd.execute(model, history).toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_helpCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"help\", \"\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"help: Shows a link to the user guide for ChopChop, and offers help for individual commands\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + \" see the User Guide\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_addCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"add\", \"\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"add: Adds an item; see \u0027add recipe\u0027 or \u0027add ingredient\u0027\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"add\", \"recipe\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                AddRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                AddRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"add\", \"ingredient\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                AddIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                AddIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_deleteCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"delete\", \"\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"delete: Deletes an item; see \u0027delete recipe\u0027 or \u0027delete ingredient\u0027\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"delete\", \"recipe\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                DeleteRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                DeleteRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"delete\", \"ingredient\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                DeleteIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                DeleteIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_editCommand() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"edit\", \"\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"edit: Edits an item; see \u0027edit recipe\u0027 or \u0027edit ingredient\u0027\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"edit\", \"recipe\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                EditRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                EditRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_listCommand() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"list\", \"\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"list: Lists items; see \u0027list recipes\u0027 or \u0027list ingredients\u0027\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"list\", \"recipe\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"list\", \"recipes\"),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"list\", \"ingredient\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"list\", \"ingredients\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                ListIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void findCommand() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"find\", \"\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"find: Finds items; see \u0027find recipes\u0027 or \u0027find ingredients\u0027\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"find\", \"recipe\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"find\", \"recipes\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"find\", \"ingredient\"),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"find\", \"ingredients\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FindIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void filterCommand() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"filter\", \"\"),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"filter: Filters items; see \u0027filter recipes\u0027 or \u0027filter ingredients\u0027\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"filter\", \"recipe\"),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"filter\", \"recipes\"),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterRecipeCommand.getCommandString(),"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterRecipeCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"filter\", \"ingredient\"),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"filter\", \"ingredients\"),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"%s: %s %s\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterIngredientCommand.getCommandString(),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                FilterIngredientCommand.getCommandHelp(),"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                \"see the User Guide\")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_badCommand() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cPair\u003cString, String\u003e, String\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"\", \"\"), \"Refer to the User Guide for more detailed help\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(null, \"\"), \"Refer to the User Guide for more detailed help\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"add\", \"omo\"),"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add: Adds an item; see \u0027add recipe\u0027 or \u0027add ingredient\u0027\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(Pair.of(\"owo\", \"\"),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            String.format(\"Error: Unknown command \u0027owo\u0027; see the User Guide for a list of commands: %s\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                Strings.USER_GUIDE_BASE_URL)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        test(cases);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 245
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/ListIngredientCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showIngredientAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ListIngredientCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        model \u003d new ModelManager(new EntryBook\u003c\u003e(), getTypicalIngredientBook(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expectedModel \u003d new ModelManager(new EntryBook\u003c\u003e(), model.getIngredientBook(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandSuccess(new ListIngredientCommand(), model, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        showIngredientAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertCommandSuccess(new ListIngredientCommand(), model, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 3,
      "zhiayang": 3,
      "Trav1sT": 34,
      "seowalex": 2
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/ListRecipeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ListRecipeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        model \u003d new ModelManager(getTypicalRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(new ListRecipeCommand(), model, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void execute_listIfFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        showRecipeAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertCommandSuccess(new ListRecipeCommand(), model, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 41
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/StatsRecipeMostMadeCommand.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsRecipeMostMadeCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 5
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/StatsRecipeRecentlyMadeCommand.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StatsRecipeRecentlyMadeCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 5
    }
  },
  {
    "path": "src/test/java/chopchop/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.showRecipeAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.testutil.TypicalReferences.INDEXED_SECOND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var recToView \u003d model.getFilteredRecipeList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var viewCommand \u003d new ViewCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var expectedModel \u003d new ModelManager(model.getRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        expectedModel.findRecipeWithName(recToView.getName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var outOfBoundIndex \u003d ItemReference.ofOneIndex(model.getFilteredRecipeList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertCommandFailure(viewCommand, model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        showRecipeAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var recToView \u003d model.getFilteredRecipeList().get(INDEXED_FIRST.getZeroIndex());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var viewCommand \u003d new ViewCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var expectedModel \u003d new ModelManager(model.getRecipeBook(), new EntryBook\u003c\u003e(), new UsageList\u003cRecipeUsage\u003e(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                new UsageList\u003cIngredientUsage\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        showSpecificRecipe(expectedModel, recToView);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        expectedModel.findRecipeWithName(recToView.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertCommandSuccess(viewCommand, model, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        showRecipeAtIndex(model, INDEXED_FIRST);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var outOfBoundIndex \u003d INDEXED_SECOND;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of recipe book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroIndex() \u003c model.getRecipeBook().getEntryList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertCommandFailure(viewCommand, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var viewFirstCommand \u003d new ViewCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var viewSecondCommand \u003d new ViewCommand(INDEXED_SECOND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        var viewFirstCommandCopy \u003d new ViewCommand(INDEXED_FIRST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show all recipe."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void showSpecificRecipe(Model model, Recipe recipe) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        model.updateFilteredRecipeList(p -\u003e true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        final String[] splitName \u003d recipe.getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        model.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertTrue(!model.getFilteredRecipeList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 113
    }
  },
  {
    "path": "src/test/java/chopchop/logic/edit/EditDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// EditDescriptorTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.edit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class EditDescriptorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_descriptors() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"add\", EditOperationType.ADD.toString());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"edit\", EditOperationType.EDIT.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(\"delete\", EditOperationType.DELETE.toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 17
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/ArgNameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ArgNameTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ArgNameTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_argName() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // check that this stuff throws"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ArgName(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ArgName(\"\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ArgName(\"/foo\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"foo\").name(), \"foo\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"foo\").toString(), \"/foo\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new ArgName(\"foo\"), \"foo\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"foo\"), new ArgName(\"foo\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new ArgName(\"FOO\"), new ArgName(\"foo\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"foo\").hashCode(), new ArgName(\"foo\").hashCode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new ArgName(\"FOO\").hashCode(), new ArgName(\"foo\").hashCode());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"step:\").name(), \"step\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"step:add:1\").name(), \"step\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"step:add:1\").getComponents(), List.of(\"add\", \"1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"step:edit:30:40:50\").getComponents(), List.of(\"edit\", \"30\", \"40\", \"50\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new ArgName(\"step:add:1\"), new ArgName(\"step:add:1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new ArgName(\"step:add:1\"), new ArgName(\"step:add:2\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 41
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// CommandParserTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.AddCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.EditCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.FilterCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.FindCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.HelpCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.ListCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.MakeCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.StatsCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.ViewCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.commands.CommonParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_parseCommands() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"add ingredient squid /qty 30g /expiry 2020-12-24\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            \"Result(AddIngredientCommand: squid (30g) \u003cExpiry Date: 2020-12-24\u003e)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"add ingredient milk /qty 600ml /tag wet\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"Result(AddIngredientCommand: milk (600mL))\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"add recipe cake /ingredient milk /qty 400ml /ingredient flour /qty 500g \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            + \"/ingredient egg /qty 7 /step mix /step bake /step eat /tag baked /ingredient uwu\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"Result(AddRecipeCommand(cake, ingr: [milk (400mL), flour (500g), \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                + \"egg (7), uwu (1)], steps: [mix, bake, eat]))\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"delete recipe cake\", \"Result(DeleteRecipeCommand(cake))\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"delete recipe #4\", \"Result(DeleteRecipeCommand(#4))\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        tests.put(\"delete recipe #-1\", \"Error(Invalid index (cannot be zero or negative))\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"delete ingredient milk\", \"Result(DeleteIngredientCommand(milk))\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"delete ingredient milk /qty 500ml\", \"Result(DeleteIngredientCommand(milk (500mL)))\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"help\", \"Result(HelpCommand)\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"quit\", \"Result(QuitCommand)\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"undo\", \"Result(UndoCommand)\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"redo\", \"Result(RedoCommand)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"list recipe\", \"Result(ListRecipeCommand)\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"list recipes\", \"Result(ListRecipeCommand)\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"list ingredient\", \"Result(ListIngredientCommand)\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"list ingredients\", \"Result(ListIngredientCommand)\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"make cake\", \"Result(MakeRecipeCommand(cake))\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"view cake\", \"Result(ViewCommand(cake))\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"filter recipe /tag owo\", \"Result(FilterRecipeCommand(...))\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"edit recipe cake\", \"Result(EditRecipeCommand(cake))\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"find recipe cake cucumber\", \"Result(FindRecipeCommand(keywords: [cake, cucumber]))\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"find ingredient cake cucumber\", \"Result(FindIngredientCommand(keywords: [cake, cucumber]))\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"find recipe\", \"Error(\u0027find\u0027 command requires at least one search term)\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"add recipe cake /\", \"Error(Expected argument name after \u0027/\u0027)\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"add recipe cake /   \", \"Error(Expected argument name after \u0027/\u0027)\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        tests.put(\"view cake cucumber\", \"Result(ViewCommand(cake cucumber))\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        tests.put(\"view\", \"Error(Recipe name cannot be empty)\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        tests.put(\"view #1\", \"Result(ViewCommand(#1))\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        tests.put(\"view #0\", \"Error(Invalid index (cannot be zero or negative))\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"OWO\", \"Error(Unknown command \u0027OWO\u0027)\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"list uwu\", \"Error(Unknown target \u0027uwu\u0027)\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.put(\"edit ingredients\", \"Error(Unknown target \u0027ingredients\u0027)\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var x \u003d parser.parse(k);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            System.err.println(x);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, x.toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void parse_commandArgs_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                new CommandArguments(\"add\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add /stuff kekw\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                new CommandArguments(\"add\", List.of(Pair.of(new ArgName(\"stuff\"), \"kekw\"))),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add some\\\\/stuff\\\\/here\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                new CommandArguments(\"add\", \"some/stuff/here\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add some\\\\stuff\\\\here\\\\\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                new CommandArguments(\"add\", \"some\\\\stuff\\\\here\\\\\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add some\\\\/step\\\\/here /step \\\\/owo here\\\\/is\\\\/a\\\\/step\\\\/\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                new CommandArguments(\"add\", \"some/step/here\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                    List.of(Pair.of(new ArgName(\"step\"), \"/owo here/is/a/step/\"))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                )"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var x \u003d parser.parseArgs(k);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(x.hasValue());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, x.getValue());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(CommonParser.getCommandTarget(new CommandArguments(\"add\"), false).isError());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // just... force coverage on these classes."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new AddCommandParser();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new DeleteCommandParser();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new EditCommandParser();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new FilterCommandParser();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new FindCommandParser();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new HelpCommandParser();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new ListCommandParser();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new MakeCommandParser();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new StatsCommandParser();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new ViewCommandParser();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new CommonParser();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            throw new ParseException(\"owo\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            FindCommandParser.parseFindCommand(new CommandArguments(\"kekw\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new CommandArguments(\"add\"), \"add\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new CommandArguments(\"add\"), new CommandArguments(\"subtract\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests2 \u003d Map.of("
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add\", new CommandArguments(\"add\"),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"add /stuff kekw\", new CommandArguments(\"add\", List.of(Pair.of(new ArgName(\"stuff\"), \"kekw\")))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new CommandArguments(\"add\", \"aaa\", List.of()), new CommandArguments(\"add\", \"bbb\", List.of()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(new CommandArguments(\"add\", \"aaa\", List.of(Pair.of(new ArgName(\"kekw\"), \"3\"))),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new CommandArguments(\"add\", \"aaa\", List.of(Pair.of(new ArgName(\"kekw\"), \"4\"))));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(CommonParser.checkArguments(parser.parseArgs(\"x /owo:uwu\").getValue(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"x\", List.of(), true).isPresent());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_parseCommands2() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, Boolean\u003e();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"list recipes /uwu\",                                                  false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /qty:kekw\",                                            false);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help /uwu\",                                                          false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"view x /uwu\",                                                        false);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"make /uwu\",                                                          false);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"make x /uwu\",                                                        false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"make\",                                                               false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"find /asdf\",                                                         false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"find /asdf:owo\",                                                     false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe\",                                                      false);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /name x\",                                              false);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /tag\",                                                 false);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /ingredient\",                                          false);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient\",                                                  false);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient /name x\",                                          false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient /tag\",                                             false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient /expiry a a a \",                                   false);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help\",                                                               true);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help add\",                                                           true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"help add recipe\",                                                    true);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f\",                                                   true);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /tag x\",                                               true);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /tag x /ingredient x\",                                 true);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter recipe /ingredient x\",                                        true);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient /tag x\",                                           true);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"filter ingredient /expiry 2020-01-01\",                               true);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, parser.parse(k).hasValue());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 210,
      "seowalex": 1,
      "fall9x": 6
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/ItemReferenceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// ItemReferenceTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ItemReferenceTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_itemReference() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var zi \u003d ItemReference.ofZeroIndex(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var oi \u003d ItemReference.ofOneIndex(4);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var nm \u003d ItemReference.ofName(\"owo\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(ItemReference.parse(\"\"), Result.error(\"Empty input\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(ItemReference.parse(\"#\"), Result.error(\"Couldn\u0027t parse integer: For input string: \\\"\\\"\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(ItemReference.parse(\"#0\"), Result.error(\"Invalid index (cannot be zero or negative)\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(ItemReference.parse(\"#-30\"), Result.error(\"Invalid index (cannot be zero or negative)\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(0, ItemReference.ofZeroIndex(0).getZeroIndex());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(3, ItemReference.ofZeroIndex(3).getZeroIndex());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(4, ItemReference.ofZeroIndex(3).getOneIndex());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e ItemReference.ofZeroIndex(-3));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e ItemReference.ofOneIndex(0));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(oi, ItemReference.parse(\"#4\").getValue());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(nm), ItemReference.parse(\"OWO\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(nm.isNamed());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(zi.isIndexed());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(oi.isIndexed());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(zi.getZeroIndex(), 3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(oi.getZeroIndex(), 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(nm.getName(), \"owo\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(ItemReference.ofName(\"OWO\"), ItemReference.ofName(\"owo\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(oi, zi);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(zi, zi);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(ItemReference.ofZeroIndex(3), ItemReference.ofOneIndex(3));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(ItemReference.ofName(\"owo\"), \"owo\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(zi, nm);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 53
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/commands/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// AddCommandParserTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_parse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, Boolean\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe\",                                                         false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe f /name\",                                                 false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe f /ingredient:add\",                                       false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe f /ingredient /qty 5\",                                    false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe f /ingredient x /ingredient\",                             false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe f /ingredient x /ingredient y /qty zzz\",                  false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add recipe f /qty 700\",                                              false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient\",                                                     false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /name\",                                             false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /qty:add\",                                          false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /qty\",                                              false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /qty /qty\",                                         false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /qty 1 /qty 2\",                                     false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /qty x\",                                            false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /qty x y /qty zzz\",                                 false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /expiry\",                                           false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"add ingredient f /expiry /expiry\",                                   false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, parser.parse(k).hasValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 42
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/commands/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// DeleteCommandParserTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_parse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, Boolean\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete recipe\",                                                      false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete recipe f /name\",                                              false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete recipe f /ingredient:delete\",                                 false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete ingredient\",                                                  false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete ingredient f /name\",                                          false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete ingredient f /ingredient:delete\",                             false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete ingredient f /qty\",                                           false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"delete ingredient f /qty /qty\",                                      false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, parser.parse(k).hasValue());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 33
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/commands/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// EditCommandParserTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ArgName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_parse() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, Boolean\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe\",                                                        false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit ingredient x\",                                                  false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient\",                                          false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:owo\",                                      false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:owo:uwu\",                                  false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:add:add\",                                  false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:add\",                                      false);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:edit y\",                                   false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:add y\",                                    false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:delete y /qty 6\",                          false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:delete y /qty z\",                          false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /tag\",                                                 false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /tag:owo\",                                             false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /tag:owo:uwu\",                                         false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /tag:add:add\",                                         false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /tag:add\",                                             false);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step\",                                                false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:owo\",                                            false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:owo:uwu\",                                        false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:add\",                                            false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:add:zzz\",                                        false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:add:999\",                                        false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:add:-3\",                                         false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:add:3:3\",                                        false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:delete y\",                                       false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:delete: y\",                                      false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:edit y\",                                         false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /name\",                                                false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /name asdf /name uwu\",                                 false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /qty\",                                                 false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /expiry\",                                              false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /tag:add y\",                                           true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /tag:delete y\",                                        true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:add y\",                                          true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /step:edit:4 y\",                                       true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:edit y /qty 6\",                            true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:add y /qty 1\",                             true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:delete y\",                                 true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"edit recipe x /ingredient:delete y /step:add z\",                     true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, parser.parse(k).hasValue());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var m \u003d EditCommandParser.class.getDeclaredMethod(\"parseTagEdit\", ArgName.class, String.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            m.setAccessible(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            m.invoke(null, new ArgName(\"tag:add\"), \"  owo  \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var m2 \u003d EditCommandParser.class.getDeclaredMethod(\"ensureNoArgsForDeleteAndGetOperationType\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                String.class, String.class, boolean.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            m2.setAccessible(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            m2.invoke(null, \"tag\", \"kekw\", true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            System.err.println(e.getStackTrace());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 86
    }
  },
  {
    "path": "src/test/java/chopchop/logic/parser/commands/StatsCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// StatsCommandParserTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.logic.parser.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_parse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d new HashMap\u003cString, Boolean\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe\",                                                       false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe used\",                                                  false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe top /before never\",                                     false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe made /name owo\",                                        false);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe made /after /after\",                                    false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe made /before /before\",                                  false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe made /after owo\",                                       false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient\",                                                   false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used\",                                              false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient top /before never\",                                 false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used /name owo\",                                    false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used /after /after\",                                false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used /before /before\",                              false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used /after owo\",                                   false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe top\",                                                   true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe made\",                                                  true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe clear\",                                                 true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe recent\",                                                true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe made /after 2019-01-01\",                                true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats recipe made /after 2019-01-01 01:01\",                          true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used\",                                              true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient clear\",                                             true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient recent\",                                            true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used /after 2019-01-01\",                            true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.put(\"stats ingredient used /after 2019-01-01 01:01\",                      true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            System.out.printf(\"%s\\n\", k);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, parser.parse(k).hasValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 54
    }
  },
  {
    "path": "src/test/java/chopchop/model/DuplicatesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class DuplicatesTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 5
    }
  },
  {
    "path": "src/test/java/chopchop/model/IngredientBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.TAG_APRICOT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.TAG_ALL_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.TAG_ALL_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_BANANA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_BANANA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final EntryBook\u003cIngredient\u003e ingredientBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(Collections.emptyList(), ingredientBook.getEntryList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ingredientBook.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_withValidReadOnlyIngredientBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e newData \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ingredientBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(newData, ingredientBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void resetData_withDuplicateIngredients_throwsDuplicateIngredientException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Two ingredients with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Ingredient editedAlice \u003d new IngredientBuilder(APRICOT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Count.of(VALID_INGREDIENT_QTY_BANANA))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        List\u003cIngredient\u003e newIngredients \u003d Arrays.asList(APRICOT, editedAlice);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBookTest.IngredientBookStub newData \u003d new IngredientBookTest.IngredientBookStub(newIngredients);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e ingredientBook.resetData(newData));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ingredientBook.has(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasIngredient_ingredientNotInIngredientBook_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertFalse(ingredientBook.has(APRICOT));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasIngredient_ingredientInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ingredientBook.add(APRICOT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertTrue(ingredientBook.has(APRICOT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasIngredient_ingredientWithSameIdentityFieldsInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ingredientBook.add(APRICOT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Ingredient editedAlice \u003d new IngredientBuilder(APRICOT)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Count.of(VALID_INGREDIENT_QTY_BANANA))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withDate(VALID_INGREDIENT_EXPIRY_BANANA)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withTags(new HashSet\u003c\u003e(Arrays.asList(TAG_APRICOT, TAG_ALL_ONE, TAG_ALL_TWO)))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertTrue(ingredientBook.has(editedAlice)); //Both identity fields must be equal"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e ingredientBook.getEntryList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * A stub ReadOnlyIngredientBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static class IngredientBookStub implements ReadOnlyEntryBook\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        private final ObservableList\u003cIngredient\u003e ingredients \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        IngredientBookStub(Collection\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.ingredients.setAll(ingredients);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getEntryList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            return this.ingredients;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 21,
      "zhiayang": 8,
      "Trav1sT": 65,
      "seowalex": 15
    }
  },
  {
    "path": "src/test/java/chopchop/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.model.Model.PREDICATE_SHOW_ALL_ENTRIES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.RecipeBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(new EntryBook\u003c\u003e(), new EntryBook\u003c\u003e(modelManager.getIngredientBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(new EntryBook\u003c\u003e(), new EntryBook\u003c\u003e(modelManager.getRecipeBook()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasIngredient(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_indNotInIngredientBook_returnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void hasIngredient_ingredientInIngredientBook_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        modelManager.addIngredient(APRICOT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.hasIngredient(APRICOT));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getFilteredPIngredientList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredIngredientList().remove(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasRecipe(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        modelManager.addRecipe(APRICOT_SALAD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(modelManager.hasRecipe(APRICOT_SALAD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void getFilteredRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredRecipeList().remove(0));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e ingredientBook \u003d new IngredientBookBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withIngredient(APRICOT).withIngredient(BANANA).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e differentIngredientBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e recipeBook \u003d new RecipeBookBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withRecipe(APRICOT_SALAD).withRecipe(BANANA_SALAD).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e differentRecipeBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UserPrefs userPrefs \u003d new chopchop.model.UserPrefs();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        modelManager \u003d new ModelManager(recipeBook, ingredientBook,  null, null, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(recipeBook, ingredientBook, null, null, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different ingredientBook -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            recipeBook, differentIngredientBook, null, null, userPrefs)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different recipeBook -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            differentRecipeBook, ingredientBook, null, null, userPrefs)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different filteredIngredientList -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        final String[] indKeywords \u003d APRICOT.getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        modelManager.updateFilteredIngredientList(new NameContainsKeywordsPredicate(Arrays.asList(indKeywords)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, ingredientBook, null, null, userPrefs)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different filteredRecipeList -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        final String[] recKeywords \u003d APRICOT_SALAD.getName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        modelManager.updateFilteredRecipeList(new NameContainsKeywordsPredicate(Arrays.asList(recKeywords)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(recipeBook, ingredientBook, null, null, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        modelManager.updateFilteredIngredientList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        modelManager.updateFilteredRecipeList(PREDICATE_SHOW_ALL_ENTRIES);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 36,
      "zhiayang": 2,
      "Trav1sT": 77,
      "seowalex": 13
    }
  },
  {
    "path": "src/test/java/chopchop/model/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e newData) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ReadOnlyEntryBook\u003cIngredient\u003e getIngredientBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredIngredientList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void updateFilteredIngredientList(Predicate\u003c? super Ingredient\u003e predicate) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeBookFilePath(Path indBookFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void setRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public ReadOnlyEntryBook\u003cRecipe\u003e getRecipeBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void deleteRecipe(Recipe target) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredRecipeList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public void updateFilteredRecipeList(Predicate\u003c? super Recipe\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cRecipe\u003e findRecipeWithName(String name) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public Optional\u003cIngredient\u003e findIngredientWithName(String name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList\u003cRecipeUsage\u003e getRecipeUsageList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public UsageList\u003cIngredientUsage\u003e getIngredientUsageList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ObservableList\u003cRecipeUsage\u003e getObservableRecipeUsages() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public ObservableList\u003cIngredientUsage\u003e getObservableIngredientUsages() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addRecipeUsage(Recipe recipe) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeRecipeUsage(Recipe recipe) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void addIngredientUsage(IngredientReference ingredient) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void removeIngredientUsage(IngredientReference ingredient) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setRecipeUsageList(UsageList\u003cRecipeUsage\u003e rl) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setIngredientUsageList(UsageList\u003cIngredientUsage\u003e rl) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cRecipeUsage\u003e getRecentlyUsedRecipes(int n) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public List\u003cIngredientUsage\u003e getRecentlyUsedIngredients(int n) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 29,
      "Trav1sT": 178,
      "seowalex": 6
    }
  },
  {
    "path": "src/test/java/chopchop/model/RecipeBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.exceptions.DuplicateEntryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA_REF;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.STEP_BANANA_SALAD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private final EntryBook\u003cRecipe\u003e recipeBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(Collections.emptyList(), recipeBook.getEntryList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_withValidReadOnlyRecipeBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e newData \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        recipeBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(newData, recipeBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void resetData_withDuplicateRecipes_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Two recipes with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(APRICOT_SALAD).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cRecipe\u003e newRecipes \u003d Arrays.asList(APRICOT_SALAD, editedRecipe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBookTest.RecipeBookStub newData \u003d new RecipeBookTest.RecipeBookStub(newRecipes);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(DuplicateEntryException.class, () -\u003e recipeBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e recipeBook.has(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeNotInRecipeBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertFalse(recipeBook.has(APRICOT_SALAD));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        recipeBook.add(APRICOT_SALAD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertTrue(recipeBook.has(APRICOT_SALAD));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void hasRecipe_recipeWithSameIdentityFieldsInRecipeBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        recipeBook.add(APRICOT_SALAD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe editedRecipe \u003d new RecipeBuilder(APRICOT_SALAD)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA_REF)))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertTrue(recipeBook.has(editedRecipe)); //Both identity fields must be equal"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void getRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e recipeBook.getEntryList().remove(0));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * A stub ReadOnlyRecipeBook whose recipes list can violate interface constraints."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static class RecipeBookStub implements ReadOnlyEntryBook\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        private final ObservableList\u003cRecipe\u003e recipes \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        RecipeBookStub(Collection\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            this.recipes.setAll(recipes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getEntryList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            return recipes;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 88,
      "zhiayang": 2,
      "seowalex": 14
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/ExpiryDateMatchesKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class ExpiryDateMatchesKeywordsPredicateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ExpiryDate firstPredicateKeyword \u003d new ExpiryDate(\"2020-12-31\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ExpiryDate secondPredicateKeyword \u003d new ExpiryDate(\"2021-01-01\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ExpiryDateMatchesKeywordsPredicate firstPredicate \u003d new ExpiryDateMatchesKeywordsPredicate("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            firstPredicateKeyword);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ExpiryDateMatchesKeywordsPredicate secondPredicate \u003d new ExpiryDateMatchesKeywordsPredicate("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            secondPredicateKeyword);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ExpiryDateMatchesKeywordsPredicate firstPredicateCopy \u003d new ExpiryDateMatchesKeywordsPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            firstPredicateKeyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_expiryDateMatchesKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ExpiryDateMatchesKeywordsPredicate predicate \u003d new ExpiryDateMatchesKeywordsPredicate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new ExpiryDate(\"2020-12-31\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withDate(\"2020-10-10\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withDate(\"2020-11-11\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withDate(\"2020-12-31\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_expiryDateNotMatchingKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ExpiryDateMatchesKeywordsPredicate predicate \u003d new ExpiryDateMatchesKeywordsPredicate("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new ExpiryDate(\"2020-12-30\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withDate(\"2020-12-31\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withDate(\"2021-01-01\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withDate(\"2103-10-03\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 56
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/ExpiryDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class ExpiryDateTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ExpiryDate(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ExpiryDate(invalidDate));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ExpiryDate.isValidDate(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"2020:12-01\")); // invalid date format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(ExpiryDate.isValidDate(\"2020-13-32\")); // valid date format but invalid date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ExpiryDate.isValidDate(\"1990-12-01\")); // a date that has passed, yyyy-MM-dd"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(ExpiryDate.isValidDate(\"2021-12-01\")); // a future date, yyyy-MM-dd"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 37
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/IngredientsContainKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class IngredientsContainKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"firstIngredient\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"firstIngredient\", \"secondIngredient\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IngredientsContainsKeywordsPredicate firstPredicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IngredientsContainsKeywordsPredicate secondPredicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IngredientsContainsKeywordsPredicate firstPredicateCopy \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_ingredientsContainKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IngredientsContainsKeywordsPredicate predicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Collections.singletonList(\"white\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"white\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Partially matching keywords (keywords are contained in the ingredient list)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new IngredientsContainsKeywordsPredicate(Collections.singletonList(\"white\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"white vinegar\", Optional.empty()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new IngredientReference(\"snowWhite\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"white chocolate\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new IngredientsContainsKeywordsPredicate(Arrays.asList(\"white\", \"chocolate\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"white\", Optional.empty()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new IngredientReference(\"chocolate\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"white chocolate\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new IngredientsContainsKeywordsPredicate(Arrays.asList(\"wHIte\", \"ChocolaTE\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"WhiTE\", Optional.empty()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new IngredientReference(\"cHOCOLAte\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                Arrays.asList(new IngredientReference(\"WHITE CHOCOLATE\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Combined keywords"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new IngredientsContainsKeywordsPredicate(Arrays.asList(\"white chocolate\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"white chocolate\", Optional.empty()),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new IngredientReference(\"sweet white chocolate powder\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withIngredients("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(\"white chocolate\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_ingredientsDoNotContainKeywords_noMatchingTagReturnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IngredientsContainsKeywordsPredicate predicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"white chocolate\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withIngredients(Arrays.asList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new IngredientReference(\"green beans\", Optional.empty()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new IngredientReference(\"oranges\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_ingredientsDoNotContainKeywords_partiallyMatchingTagReturnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // keywords are only partially contained in any the ingredients"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IngredientsContainsKeywordsPredicate predicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"white chocolate\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withIngredients(Arrays.asList("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new IngredientReference(\"white\", Optional.empty()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new IngredientReference(\"chocolate\", Optional.empty()))).build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_ingredientsDoesNotContainKeywords_onlyMatchingOtherCriteriaReturnsFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // keywords match other fields but not ingredients"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        IngredientsContainsKeywordsPredicate predicate \u003d new IngredientsContainsKeywordsPredicate("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"white chocolate 123 *\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withName(\"white chocolate 123 *\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withIngredients(Arrays.asList("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new IngredientReference(\"white chocolate\", Optional.empty()),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                new IngredientReference(\"123 *\", Optional.empty())))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(Arrays.asList(new Step(\"white chocolate\")))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withTags(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"white\"), new Tag(\"chocolate\"))))"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 120
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA_REF;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.STEP_BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                                                            .singletonList(\"Apricot\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apricot\", \"Banana\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Apricot\", \"Caramel\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Alice Caramel\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Salad\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aPRIcot\", \"bAnAnA\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withName(\"Apricot banana\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Caramel\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot Banana\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .withDate(\"2020-05-10\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // For Recipe, keywords match ingredient name and step content, but does not match name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"Banana\", \"Cut\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withName(\"Apricot Salad\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA_REF)))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hjl99": 19,
      "zhiayang": 2,
      "Trav1sT": 17,
      "-": 58
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"corn*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"egg plant\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"eggplant the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"Corn Starch\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(Name.isValidName(\"The Great 2nd Corn Starch of the U.K.\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void caseInsensitiveComparison() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new Name(\"aaaaa\"), new Name(\"aAaAa\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(new Name(\"aaaaa\"), \"AAAAA\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 7,
      "Trav1sT": 8,
      "-": 31
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/QuantityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// QuantityTest.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.commons.util.Result;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Volume;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void equals_sameUnits_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Mass.grams(133),       Mass.kilograms(0.133));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Mass.kilograms(23),    Mass.grams(23000));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Volume.cups(3.2),      Volume.millilitres(800));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Volume.litres(67.33),  Volume.millilitres(67330));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Volume.teaspoons(3),   Volume.litres(0.015));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Count.of(3),           Count.of(3));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void equals_notSameUnits_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.grams(133),        Mass.kilograms(133));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.kilograms(23),     Mass.grams(23));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Volume.cups(3.2),       Volume.millilitres(3.2));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Volume.teaspoons(3),    Volume.litres(2));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Count.of(3),            Count.of(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.grams(133),        Count.of(133));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Mass.kilograms(23),     Volume.tablespoons(23));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(Volume.litres(133),     Count.of(133));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void parse_validUnits_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"10 g\",     Mass.grams(10),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3.1kg\",    Mass.grams(3100),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"60kg\",     Mass.grams(60000),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"40ml\",     Volume.millilitres(40),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3.7tbsp\",  Volume.tablespoons(3.7),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"1 cup\",    Volume.teaspoons(50),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"2 cups\",   Volume.litres(0.5),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3\",        Count.of(3)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var parsed \u003d Quantity.parse(k);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(parsed.hasValue());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, parsed.getValue());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void parse_invalidUnits_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"10 lg\",        \"Unknown unit \u0027lg\u0027 (from \u002710 lg\u0027)\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"3.1.4 cups\",   \"Couldn\u0027t parse number from quantity \u00273.1.4 cups\u0027: multiple points\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            \"\",             \"Quantity string cannot be empty\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(Result.error(v), Quantity.parse(k));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void add_compatibleUnits_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"185 g\", \"3.7 kg\"),     Mass.kilograms(3.885),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"185 g\", \"-53g\"),       Mass.grams(132),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"45ml\", \"3tsp\"),        Volume.tablespoons(4),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"3 cups\", \"1 cup\"),     Volume.litres(1),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"1\", \"7\"),              Count.of(8)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var a \u003d k.fst();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var b \u003d k.snd();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(Result.of(v), Quantity.parse(a)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .then(x -\u003e Quantity.parse(b).then(y -\u003e x.add(y)))"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void add_incompatibleUnits_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var tests \u003d Map.of("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"185 g\", \"3.7 mL\"),     \"Cannot add \u00273.7mL\u0027 to \u0027185g\u0027 (incompatible units)\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"1\", \"7g\"),             \"Cannot add \u00277g\u0027 to \u00271\u0027 (incompatible units)\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Pair.of(\"33ml\", \"400\"),         \"Cannot add \u0027400\u0027 to \u002733mL\u0027 (incompatible units)\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        tests.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var a \u003d k.fst();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var b \u003d k.snd();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(Result.error(v), Quantity.parse(a)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .then(x -\u003e Quantity.parse(b).then(y -\u003e x.add(y)))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_values() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Count.of(0).isZero());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Count.of(-1).isNegative());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Count.of(-3).isZero());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Count.of(7).isNegative());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Mass.grams(0).isZero());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Mass.grams(-1).isNegative());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Mass.grams(-3).isZero());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Mass.grams(7).isNegative());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Volume.cups(0).isZero());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Volume.cups(-1).isNegative());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Volume.cups(-3).isZero());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Volume.cups(7).isNegative());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_arithmetic() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Count.of(1).add(Count.of(1).negate()).getValue().isZero());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Mass.kilograms(1).add(Mass.kilograms(1).negate()).getValue().isZero());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Volume.litres(1).add(Volume.litres(1).negate()).getValue().isZero());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Count.of(1).subtract(Count.of(1.1)).getValue().isNegative());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Mass.kilograms(1).subtract(Mass.kilograms(1.1)).getValue().isNegative());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Volume.litres(1).subtract(Volume.litres(1.1)).getValue().isNegative());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_compatibility() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Count.of(1).compatibleWith(Count.of(70)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Mass.milligrams(1).compatibleWith(Mass.milligrams(70)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(Volume.tablespoons(1).compatibleWith(Volume.tablespoons(70)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Count.of(1).compatibleWith(Mass.milligrams(70)));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Mass.milligrams(1).compatibleWith(Volume.tablespoons(1)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(Volume.tablespoons(1).compatibleWith(Count.of(1)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_of() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Mass.milligrams(37)), Mass.of(37, \"mg\"));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Mass.grams(100)), Mass.of(100, \"g\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Mass.kilograms(48)), Mass.of(48, \"kg\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Volume.millilitres(37)), Volume.of(37, \"ml\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Volume.litres(100)), Volume.of(100, \"L\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Volume.cups(48)), Volume.of(48, \"cups\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Volume.teaspoons(31)), Volume.of(31, \"tsp\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Result.of(Volume.tablespoons(19)), Volume.of(19, \"tbsp\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_compare() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(0,  Mass.grams(600).compareTo(Mass.kilograms(0.6)));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1,  Mass.grams(601).compareTo(Mass.kilograms(0.6)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(-1, Mass.grams(599).compareTo(Mass.kilograms(0.6)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(0,  Count.of(6.0).compareTo(Count.of(6)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1,  Count.of(6.1).compareTo(Count.of(6)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(-1, Count.of(5.9).compareTo(Count.of(6)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(0,  Volume.millilitres(600).compareTo(Volume.litres(0.6)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(1,  Volume.millilitres(601).compareTo(Volume.litres(0.6)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(-1, Volume.millilitres(599).compareTo(Volume.litres(0.6)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IncompatibleIngredientsException.class, () -\u003e Count.of(1).compareTo(Mass.grams(1)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IncompatibleIngredientsException.class, () -\u003e Mass.grams(1).compareTo(Volume.litres(1)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IncompatibleIngredientsException.class, () -\u003e Volume.cups(1).compareTo(Count.of(1)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    void test_toString() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var cases \u003d Map.of("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Count.of(1),                \"1\","
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Mass.grams(35.1),           \"35.1g\","
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Mass.milligrams(300),       \"300mg\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Mass.kilograms(25),         \"25kg\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Volume.litres(35.1),        \"35.1L\","
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Volume.millilitres(300),    \"300mL\","
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Volume.cups(1),             \"1cup\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Volume.cups(3),             \"3cups\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Volume.tablespoons(3.5),    \"3.5tbsp\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Volume.teaspoons(1.1),      \"1.1tsp\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, k.toString());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases \u003d Map.of("
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Mass.grams(3.14),           \"3.14g\","
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            Mass.grams(3.1415),         \"3.142g\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        cases.forEach((k, v) -\u003e {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertEquals(v, k.toString());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 216,
      "Trav1sT": 13,
      "seowalex": 2
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/StepTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null Step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // invalid Step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // valid Step"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"recipe*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"rec recipe\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"recipe number seven\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep(\"The Most Unhealthy Recipe\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Step.isValidStep("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "                \"First, place eggs in a large saucepan and cover them with cool water by 1 inch.\")); // long Step"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 39,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void constructor_invalidTag_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        String invalidTag \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTag));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void isValidTag() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null tag"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTag(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // invalid tag name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Tag.isValidTag(\"\"));  // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(Tag.isValidTag(\"  \"));  // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // valid tag name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Tag.isValidTag(\"snacks123\"));  // contains alphanumeric characters with no spaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Tag.isValidTag(\"family dinner\"));  // contains alphanumeric characters with spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Tag.isValidTag(\"Super\"));  // contains capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Tag.isValidTag(\"#favourite\"));  // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(Tag.isValidTag(\"#All time favourites *Top 5\"));  // long tag name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void caseInsensitiveComparison() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(new Tag(\"chopchop\"), new Tag(\"cHopChOP\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertEquals(new Tag(\"chopchop\"), new Tag(\"CHOPCHOP\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 45
    }
  },
  {
    "path": "src/test/java/chopchop/model/attributes/TagsContainKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TagsContainKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"Family 123*\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Family 123*\")))).build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Family 123*\")))).build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"snacks\", \"movie\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"snacks\"), new Tag(\"movie\")))).build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"snacks\"), new Tag(\"movie\")))).build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Partially matching keywords (keywords are contained in the tags)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"christmas\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"christmas eve\")))).build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"christmas eve\"), new Tag(\"dinner time\")))).build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"christmas eve\")))).build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"christmas eve\"), new Tag(\"dinner time\")))).build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"cHrIstMas\", \"DiNNeR\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"chRistmAs\"), new Tag(\"diNnEr tiMe\")))).build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"ChriSTmaS\"), new Tag(\"dInnEr TImE\")))).build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // Combined keywords"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"All Time Favourite\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"All Time Favourite\"), new Tag(\"snacks\")))).build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"All Time Favourite\"), new Tag(\"snacks\")))).build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_tagDoesNotContainKeywords_noMatchingTagReturnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"Family 123*\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"TagOne\"), new Tag(\"TagTwo\")))).build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"TagOne TagTwo\")))).build()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"TagOne\"), new Tag(\"TagTwo\")))).build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"TagOne TagTwo\")))).build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_tagDoesNotContainKeywords_partiallyMatchingTagReturnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // keywords are only partially contained in the tags"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"Family 123*\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Fami\"), new Tag(\"123*\")))).build()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder().withTags("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Fami 123*\")))).build()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Fami\"), new Tag(\"123*\")))).build()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder().withTags("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Fami 123*\")))).build()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void test_tagDoesNotContainKeywords_onlyMatchingOtherCriteriaReturnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // keywords match other fields but not tags"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Collections.singletonList(\"Family 123*\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withName(\"Family 123*\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withTags(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Famil\"), new Tag(\"123*\"))))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new IngredientBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withName(\"Family 123*\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withTags(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Famil 123*\"))))"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withName(\"Family 123*\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(Arrays.asList(new Step(\"Family 123*\")))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withTags(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Famil\"), new Tag(\"123*\"))))"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(predicate.test(new RecipeBuilder()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withName(\"Family 123*\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withSteps(Arrays.asList(new Step(\"Family 123*\")))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .withTags(new HashSet\u003c\u003e(Arrays.asList(new Tag(\"Famil 123*\"))))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            .build()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 139
    }
  },
  {
    "path": "src/test/java/chopchop/model/ingredient/IngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.exceptions.IncompatibleIngredientsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient apricotCopy \u003d new IngredientBuilder(APRICOT).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(apricotCopy));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertTrue(APRICOT.equals(APRICOT));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(5));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(BANANA));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Ingredient editedApricot \u003d new IngredientBuilder(APRICOT).withName(\"DD\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // different date -\u003e returns false. Different ingredients can be of the same name but different expiry"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        editedApricot \u003d new IngredientBuilder(APRICOT).withDate(\"2020-12-02\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(APRICOT.equals(editedApricot));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        // different date -\u003e returns false. Different ingredients can be of the same name but different expiry"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i1 \u003d new IngredientBuilder(APRICOT).withTags(Set.of(new Tag(\"a\"), new Tag(\"b\"))).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i2 \u003d new IngredientBuilder(APRICOT).withTags(Set.of(new Tag(\"c\"), new Tag(\"d\"))).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(i1, i2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertTrue(APRICOT.isSame(APRICOT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertFalse(APRICOT.isSame(APRICOT_SALAD));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_reference() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i1 \u003d new IngredientReference(\"milk\", Quantity.parse(\"77ml\").getValue());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i2 \u003d new IngredientReference(\"milk\", Quantity.parse(\"0.077l\").getValue());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i3 \u003d new IngredientReference(\"bread\", Quantity.parse(\"500g\").getValue());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i4 \u003d new IngredientReference(\"milk\", Quantity.parse(\"500g\").getValue());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(i1, i1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(i1, i2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(i1, \"asdf\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(i1, i3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertNotEquals(i1, i4);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_combine() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i1 \u003d new IngredientBuilder(APRICOT).withDate(\"2020-12-01\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"30g\").getValue()).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i2 \u003d new IngredientBuilder(APRICOT).withDate(\"2019-11-09\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"40g\").getValue()).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i3 \u003d new IngredientBuilder(APRICOT).withDate(\"2021-02-03\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"50g\").getValue()).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i4 \u003d new IngredientBuilder(APRICOT).withDate(\"2021-02-03\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"60g\").getValue()).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i5 \u003d new IngredientBuilder(APRICOT)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"6.9kg\").getValue()).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xx \u003d i1.combine(i2).combine(i3).combine(i4).combine(i5);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Optional.of(new ExpiryDate(\"2019-11-09\")), xx.getExpiryDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(Mass.kilograms(7.08), xx.getQuantity());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var j1 \u003d new IngredientBuilder(BANANA).withQuantity(Quantity.parse(\"300g\").getValue())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withDate(\"2021-02-03\").build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var j2 \u003d new IngredientBuilder(BANANA).withQuantity(Quantity.parse(\"7\").getValue())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withDate(\"2021-02-03\").build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var j3 \u003d new IngredientBuilder(BANANA).withQuantity(Quantity.parse(\"8\").getValue())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withDate(\"2021-11-09\").build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IncompatibleIngredientsException.class, () -\u003e i2.combine(j3));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IncompatibleIngredientsException.class, () -\u003e j1.combine(j2));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IncompatibleIngredientsException.class, () -\u003e j1.combine(j3));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        j3.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void test_split() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i1 \u003d new IngredientBuilder(APRICOT).withDate(\"2020-12-25\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"30g\").getValue()).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i2 \u003d new IngredientBuilder(APRICOT).withDate(\"2019-11-09\")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"40g\").getValue()).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i3 \u003d new IngredientBuilder(APRICOT).withDate(\"2021-02-03\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"50g\").getValue()).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i4 \u003d new IngredientBuilder(APRICOT).withDate(\"2021-02-03\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"60g\").getValue()).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var i5 \u003d new IngredientBuilder().withName(\"Apricot\").withDate(null)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            .withQuantity(Quantity.parse(\"6.9kg\").getValue()).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var xx \u003d i1.combine(i2).combine(i3).combine(i4).combine(i5);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e xx.split(Mass.kilograms(69)));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IllegalValueException.class, () -\u003e xx.split(Mass.kilograms(-7)));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Pair\u003cIngredient, Ingredient\u003e p \u003d null;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            p \u003d xx.split(Mass.kilograms(1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p1 \u003d p.fst();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var p2 \u003d p.snd();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var pp \u003d i1.combine(i2).combine(i3).combine(i4).combine("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new IngredientBuilder()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .withName(\"Apricot\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .withDate(null)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .withQuantity(Mass.kilograms(0.82))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertEquals(pp, p1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ii \u003d new IngredientBuilder().withName(\"owo\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "                .withQuantity(Count.of(40)).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ppp \u003d ii.split(Count.of(40));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ppp1 \u003d ppp.fst();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            var ppp2 \u003d ppp.snd();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            // System.err.printf(\"ppp1 \u003d %s / %s\\n\", ppp1, ppp1.getIngredientSets());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(ppp2.getIngredientSets().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            assertTrue(false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 1,
      "zhiayang": 148,
      "Trav1sT": 32
    }
  },
  {
    "path": "src/test/java/chopchop/model/recipe/RecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        Recipe apricotSaladCopy \u003d new RecipeBuilder(APRICOT_SALAD).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(APRICOT_SALAD.equals(apricotSaladCopy));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertTrue(APRICOT_SALAD.equals(APRICOT_SALAD));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(new IngredientBuilder().build()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different recipe -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(BANANA_SALAD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Recipe editedApricotSalad \u003d new RecipeBuilder(APRICOT_SALAD).withName(\"DD\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        assertFalse(APRICOT_SALAD.equals(editedApricotSalad));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 35,
      "Trav1sT": 1
    }
  },
  {
    "path": "src/test/java/chopchop/model/usage/UsageListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.model.usage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_A_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_A_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_A_C;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_A_D;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_A_E;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_A_F;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_B_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_B_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_B_C;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_B_D;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_B_E;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_B_F;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalUsages.RECIPE_C_A;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.util.Pair;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.testutil.TypicalUsages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class UsageListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //nice chrono order first item being the oldest and last being the future."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final UsageList\u003cRecipeUsage\u003e REC_USAGE_1 \u003d TypicalUsages.getRecipeUsageList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final UsageList\u003cIngredientUsage\u003e IND_USAGE_2 \u003d TypicalUsages.getIngredientUsageList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final UsageList\u003cRecipeUsage\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        REVERSE_ORDER_REC \u003d new UsageList\u003c\u003e(Arrays.asList(RECIPE_A_F, RECIPE_B_F, RECIPE_A_E,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        RECIPE_B_E, RECIPE_A_D, RECIPE_B_D, RECIPE_A_C, RECIPE_B_C, RECIPE_A_B, RECIPE_B_B, RECIPE_A_A, RECIPE_B_A));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getUsageList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert(REVERSE_ORDER_REC.getUsageList().equals(Arrays.asList(RECIPE_A_F, RECIPE_B_F, RECIPE_A_E,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            RECIPE_B_E, RECIPE_A_D, RECIPE_B_D, RECIPE_A_C, RECIPE_B_C, RECIPE_A_B, RECIPE_B_B, RECIPE_A_A,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            RECIPE_B_A)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test void getUsageCountandSetAll_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert(IND_USAGE_2.getUsageCount() \u003d\u003d 12);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert(new UsageList\u003cRecipeUsage\u003e(new ArrayList\u003c\u003e()).getUsageCount() \u003d\u003d 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var elemlst12 \u003d new UsageList\u003cRecipeUsage\u003e(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        elemlst12.setAll(REC_USAGE_1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert(elemlst12.getUsageCount() \u003d\u003d 12);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        elemlst12.setAll(new UsageList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assert(elemlst12.getUsageCount() \u003d\u003d 0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getMostUsed_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UsageList\u003cRecipeUsage\u003e testList \u003d new UsageList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_B_A);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_A);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_A);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_E);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_B);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_B);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_C_A);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var res \u003d testList.getMostUsed();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Pair\u003c\u003e(RECIPE_A_A.getName(), \"No. of times made: 5\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Pair\u003c\u003e(RECIPE_B_A.getName(), \"No. of times made: 1\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new Pair\u003c\u003e(RECIPE_C_A.getName(), \"No. of times made: 1\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        )), res);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getRecentlyUsed_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UsageList\u003cRecipeUsage\u003e testList \u003d new UsageList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_B_A);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_A);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_E);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_A_B);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        testList.add(RECIPE_C_A);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        var res \u003d testList.getRecentlyUsed(4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "             RECIPE_A_E, RECIPE_A_B, RECIPE_A_A, RECIPE_B_A"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            )), res);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 80
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonAdaptedIngredientTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import static chopchop.storage.JsonAdaptedIngredient.INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedIngredientTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_EXPIRY \u003d \"20-10-20\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_QTY \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static final String VALID_NAME \u003d BANANA.getName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String VALID_EXPIRY \u003d BANANA.getExpiryDate().get().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String VALID_QTY \u003d BANANA.getQuantity().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private JsonAdaptedIngredientSet getValidJsonIngredientSet() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var map \u003d new TreeMap\u003cOptional\u003cExpiryDate\u003e, Quantity\u003e(Ingredient.SET_COMPARATOR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        map.put(BANANA.getExpiryDate(), BANANA.getQuantity());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new JsonAdaptedIngredientSet(map);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_validIngredientDetails_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredient \u003d new JsonAdaptedIngredient(BANANA);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(BANANA, ingredient.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        var ingredient \u003d new JsonAdaptedIngredient(INVALID_NAME, getValidJsonIngredientSet(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        assertThrows(IllegalValueException.class, Name.MESSAGE_CONSTRAINTS, ingredient::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(null, getValidJsonIngredientSet(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d String.format(INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredient \u003d new JsonAdaptedIngredient(VALID_NAME,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new JsonAdaptedIngredientSet(Arrays.asList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new JsonAdaptedIngredientSet.JsonAdaptedPair(INVALID_QTY, VALID_EXPIRY))), new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d Quantity.parse(INVALID_QTY).getError();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredient \u003d new JsonAdaptedIngredient(VALID_NAME,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new JsonAdaptedIngredientSet(Arrays.asList("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new JsonAdaptedIngredientSet.JsonAdaptedPair(null, VALID_EXPIRY))), new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d String.format(INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void toModelType_invalidExpiry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredient \u003d new JsonAdaptedIngredient(VALID_NAME,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new JsonAdaptedIngredientSet(Arrays.asList("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new JsonAdaptedIngredientSet.JsonAdaptedPair(VALID_QTY, INVALID_EXPIRY))), new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d ExpiryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public void toModelType_nullExpiry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var ingredient \u003d new JsonAdaptedIngredient(VALID_NAME,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            new JsonAdaptedIngredientSet(Arrays.asList("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                new JsonAdaptedIngredientSet.JsonAdaptedPair(VALID_QTY, null))), new ArrayList\u003c\u003e()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        var expectedMessage \u003d String.format(INGREDIENT_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            ExpiryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 40,
      "Trav1sT": 53,
      "seowalex": 11
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonAdaptedRecipeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.storage.JsonAdaptedRecipe.RECIPE_MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonAdaptedRecipeTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_NAME \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static final JsonAdaptedIngredientReference INVALID_REF \u003d new JsonAdaptedIngredientReference(null, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final String INVALID_STEP \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static final String VALID_NAME \u003d APRICOT_SALAD.getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private static final List\u003cJsonAdaptedIngredientReference\u003e VALID_REFS \u003d BANANA_SALAD.getIngredients()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            .stream().map(JsonAdaptedIngredientReference::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final List\u003cString\u003e VALID_STEPS \u003d BANANA_SALAD.getSteps()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .stream().map(Step::toString).collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_validRecipeDetails_returnsRecipe() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(BANANA_SALAD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(BANANA_SALAD, recipe.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                new JsonAdaptedRecipe(INVALID_NAME, VALID_REFS, VALID_STEPS, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(null, VALID_REFS, VALID_STEPS, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    //IngredientReference has null values."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_invalidReference_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                new JsonAdaptedRecipe(VALID_NAME, Collections.singletonList(INVALID_REF), VALID_STEPS, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seowalex"
        },
        "content": "                JsonAdaptedIngredientReference.INGREDIENT_REFERENCE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullReference_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, null, VALID_STEPS, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                IngredientReference.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void toModelType_nullStep_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonAdaptedRecipe recipe \u003d new JsonAdaptedRecipe(VALID_NAME, VALID_REFS, null, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        String expectedMessage \u003d String.format(RECIPE_MISSING_FIELD_MESSAGE_FORMAT, Step.class.getSimpleName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recipe::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 70,
      "seowalex": 5
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonIngredientBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.CUSTARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonIngredientBookStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIndBookStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readIngredientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readIngredientBook(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEntryBook\u003cIngredient\u003e\u003e readIngredientBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new JsonIngredientBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .readIngredientBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(readIngredientBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIngredientBook(\"notJsonFormatIndBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readIngredientBook_invalidPersonIngredientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIngredientBook(\"invalidIndBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readIngredientBook_invalidAndValidPersonIngredientBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIngredientBook(\"invalidAndValidIndBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readAndSaveIngredientBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempIngredientBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e original \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonIngredientBookStorage jsonIngredientBookStorage \u003d new JsonIngredientBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ReadOnlyEntryBook\u003cIngredient\u003e readBack \u003d jsonIngredientBookStorage.readIngredientBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original.getEntryList(), new EntryBook\u003c\u003e(readBack).getEntryList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        System.out.println(original.getEntryList().stream().map(x-\u003e x.toString()).collect(Collectors.joining()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        original.add(CUSTARD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        original.remove(BANANA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonIngredientBookStorage.readIngredientBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original, new EntryBook\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        original.add(BANANA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonIngredientBookStorage.saveIngredientBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonIngredientBookStorage.readIngredientBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original, new EntryBook\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook_nullIngredientBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIngredientBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private void saveIngredientBook(ReadOnlyEntryBook\u003cIngredient\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonIngredientBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .saveIngredientBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveIngredientBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIngredientBook(new EntryBook\u003c\u003e(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 96,
      "seowalex": 16
    }
  },
  {
    "path": "src/test/java/chopchop/storage/JsonRecipeBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.CUSTARD_SALAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class JsonRecipeBookStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecipeBookStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRecipeBook(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private java.util.Optional\u003cReadOnlyEntryBook\u003cRecipe\u003e\u003e readRecipeBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            .readRecipeBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertFalse(readRecipeBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"notJsonRecBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readRecipeBook_invalidPersonRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidRecBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readRecipeBook_invalidAndValidPersonRecipeBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecipeBook(\"invalidAndValidRecBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void readAndSaveRecipeBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempRecipeBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonRecipeBookStorage jsonRecipeBookStorage \u003d new JsonRecipeBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ReadOnlyEntryBook\u003cRecipe\u003e readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original.getEntryList(), new EntryBook\u003c\u003e(readBack).getEntryList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        System.out.println(original.getEntryList().stream().map(x-\u003e x.toString()).collect(Collectors.joining()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        original.add(CUSTARD_SALAD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        original.remove(BANANA_SALAD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original, new EntryBook\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        original.add(BANANA_SALAD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        jsonRecipeBookStorage.saveRecipeBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        readBack \u003d jsonRecipeBookStorage.readRecipeBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original, new EntryBook\u003c\u003e(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook_nullRecipeBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private void saveRecipeBook(ReadOnlyEntryBook\u003cRecipe\u003e addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            new JsonRecipeBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "                .saveRecipeBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void saveRecipeBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecipeBook(new EntryBook\u003c\u003e(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 95,
      "seowalex": 16
    }
  },
  {
    "path": "src/test/java/chopchop/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.getTypicalIngredientBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.getTypicalRecipeBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ReadOnlyEntryBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonIngredientBookStorage ingredientBookStorage \u003d new JsonIngredientBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(getTempFilePath(\"abc\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonRecipeUsageStorage recipeUsageStorage \u003d new JsonRecipeUsageStorage(getTempFilePath(\"cc\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        JsonIngredientUsageStorage ingredientUsageStorage \u003d new JsonIngredientUsageStorage(getTempFilePath(\"dd\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager \u003d new StorageManager(recipeBookStorage, ingredientBookStorage, recipeUsageStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            ingredientUsageStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void ingredientBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e original \u003d getTypicalIngredientBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager.saveIngredientBook(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ReadOnlyEntryBook\u003cIngredient\u003e retrieved \u003d storageManager.readIngredientBook().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original, new EntryBook\u003c\u003e(retrieved));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getIngredientBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertNotNull(storageManager.getIngredientBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void recipeBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e original \u003d getTypicalRecipeBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        storageManager.saveRecipeBook(original);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ReadOnlyEntryBook\u003cRecipe\u003e retrieved \u003d storageManager.readRecipeBook().get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        assertEquals(original, new EntryBook\u003c\u003e(retrieved));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public void getRecipeBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        assertNotNull(storageManager.getRecipeBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 79,
      "seowalex": 11
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private EntryBook\u003cIngredient\u003e ingredientBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ingredientBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public IngredientBookBuilder(EntryBook\u003cIngredient\u003e ingredientBook) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        this.ingredientBook \u003d ingredientBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBookBuilder withIngredient(Ingredient ind) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        ingredientBook.add(ind);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public EntryBook\u003cIngredient\u003e build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ingredientBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 23,
      "seowalex": 6
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/IngredientBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.ExpiryDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final int DEFAULT_QTY \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final String DEFAULT_EXPIRY \u003d \"2020-10-12\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private Quantity qty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private ExpiryDate expDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code IngredientBuilder} with the default details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        qty     \u003d Count.of(DEFAULT_QTY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        name    \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        expDate \u003d new ExpiryDate(DEFAULT_EXPIRY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        tags    \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes the IngredientBuilder with the data of {@code ingredientToCopy}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder(Ingredient indToCopy) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        name \u003d indToCopy.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        qty \u003d indToCopy.getQuantity();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        expDate \u003d indToCopy.getExpiryDate().orElse(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        tags \u003d indToCopy.getTags();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Name} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public IngredientBuilder withQuantity(Quantity qty) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        this.qty \u003d qty;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code ExpiryDate} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public IngredientBuilder withDate(String date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        if (date \u003d\u003d null || date.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "            this.expDate \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            this.expDate \u003d new ExpiryDate(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Sets the {@code tags} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public IngredientBuilder withTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new Ingredient(name, qty, expDate, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 20,
      "zhiayang": 10,
      "Trav1sT": 47,
      "seowalex": 6
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBookBuilder {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private EntryBook\u003cRecipe\u003e recipeBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        recipeBook \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public RecipeBookBuilder(EntryBook\u003cRecipe\u003e recipeBook) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.recipeBook \u003d recipeBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBookBuilder withRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        recipeBook.add(recipe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public EntryBook\u003cRecipe\u003e build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return recipeBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 23,
      "seowalex": 6
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/RecipeBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Egg\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_NAME \u003d \"Egg\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final String DEFAULT_STEP \u003d \"Heat it for 15 minutes.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static final String DEFAULT_TAG \u003d \"simple\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    private List\u003cIngredientReference\u003e ingredients;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    private List\u003cStep\u003e steps;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Creates a {@code RecipeBuilder} with the default details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ingredients \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            Arrays.asList(new IngredientReference(DEFAULT_INGREDIENT_NAME, Optional.empty())));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        steps \u003d new ArrayList\u003c\u003e(Arrays.asList(new Step(DEFAULT_STEP)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(DEFAULT_TAG)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder(Recipe recToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        name \u003d recToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        ingredients \u003d recToCopy.getIngredients();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        steps \u003d recToCopy.getSteps();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        tags \u003d recToCopy.getTags();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Sets the name of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Sets the lists of ingredients of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public RecipeBuilder withIngredients(List\u003cIngredientReference\u003e ingredients) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Sets the list of steps of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public RecipeBuilder withSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        this.steps \u003d steps;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     * Sets the list of tags of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seowalex"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public RecipeBuilder withTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seowalex"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        return new Recipe(name, ingredients, steps, tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 58,
      "zhiayang": 4,
      "seowalex": 22
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 31
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalIngredients.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seowalex"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.attributes.units.Count;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_CUSTARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_CUSTARD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_BANANA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_APRICOT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_APRICOT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_BANANA;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_EXPIRY_APRICOT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_INGREDIENT_QTY_CUSTARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_APRICOT \u003d new Tag(\"Sweet Apricot\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_BANANA \u003d new Tag(\"Sweet Banana\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_ALL_ONE \u003d new Tag(\"Sweet\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_ALL_TWO \u003d new Tag(\"Fruit\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final Ingredient APRICOT \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withName(VALID_INGREDIENT_NAME_APRICOT)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withDate(VALID_INGREDIENT_EXPIRY_APRICOT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withQuantity(Count.of(VALID_INGREDIENT_QTY_APRICOT))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withTags(new HashSet\u003c\u003e(Arrays.asList(TAG_APRICOT, TAG_ALL_ONE, TAG_ALL_TWO)))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final Ingredient BANANA \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withName(VALID_INGREDIENT_NAME_BANANA)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withDate(VALID_INGREDIENT_EXPIRY_BANANA)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withQuantity(Count.of(VALID_INGREDIENT_QTY_BANANA))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withTags(new HashSet\u003c\u003e(Arrays.asList(TAG_BANANA, TAG_ALL_ONE, TAG_ALL_TWO)))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Ingredient CUSTARD \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withName(VALID_INGREDIENT_NAME_CUSTARD)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withDate(VALID_INGREDIENT_EXPIRY_CUSTARD)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withQuantity(Count.of(VALID_INGREDIENT_QTY_CUSTARD))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final Ingredient BAKED_BEANS \u003d new IngredientBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withName(\"Baked beans\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withDate(\"2020-12-25\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .withQuantity(Count.of(40))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final IngredientReference APRICOT_REF \u003d new IngredientReference("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        VALID_INGREDIENT_NAME_APRICOT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Count.of(VALID_INGREDIENT_QTY_APRICOT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final IngredientReference BANANA_REF \u003d new IngredientReference("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        VALID_INGREDIENT_NAME_BANANA,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Count.of(VALID_INGREDIENT_QTY_BANANA)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientReference CUSTARD_REF \u003d new IngredientReference("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        VALID_INGREDIENT_NAME_CUSTARD,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        Count.of(VALID_INGREDIENT_QTY_CUSTARD)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final IngredientReference BAKED_BEANS_REF \u003d new IngredientReference("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        \"Baked beans\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        Count.of(10)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns an {@code IngredientBook} with all the typical ingredients."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static EntryBook\u003cIngredient\u003e getTypicalIngredientBook() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cIngredient\u003e ab \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        for (Ingredient ind : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            ab.add(ind);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT, BANANA));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static List\u003cIngredientReference\u003e getTypicalIngredientReferences() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT_REF, BANANA_REF));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 9,
      "zhiayang": 46,
      "Trav1sT": 37,
      "seowalex": 4
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalRecipes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hjl99"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_APRICOT_SALAD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_BANANA_SALAD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.logic.commands.CommandTestUtil.VALID_RECIPE_NAME_CUSTARD_SALAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.APRICOT_REF;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.BANANA_REF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import static chopchop.testutil.TypicalIngredients.CUSTARD_REF;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.EntryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.attributes.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hjl99"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hjl99"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Step STEP_APRICOT_SALAD \u003d new Step("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Cut the apricot, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Step STEP_BANANA_SALAD \u003d new Step("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hjl99"
        },
        "content": "            \"Cut the banana, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Step STEP_CUSTARD_SALAD \u003d new Step("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            \"Cut the custard, add salad dressing, and mix well in a bowl.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_APRICOT_SALAD \u003d new Tag(\"Sweet Apricot\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_BANANA_SALAD \u003d new Tag(\"Sweet Banana\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_CUSTARD_SALAD \u003d new Tag(\"Sweet Custard\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_ALL_ONE \u003d new Tag(\"Salad\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Tag TAG_ALL_TWO \u003d new Tag(\"Cold Food\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Recipe APRICOT_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_APRICOT_SALAD)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(APRICOT_REF, CUSTARD_REF)))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_APRICOT_SALAD)))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withTags(new HashSet\u003c\u003e(Arrays.asList(TAG_APRICOT_SALAD, TAG_ALL_ONE, TAG_ALL_TWO)))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static final Recipe BANANA_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_BANANA_SALAD)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(BANANA_REF, CUSTARD_REF)))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_BANANA_SALAD)))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withTags(new HashSet\u003c\u003e(Arrays.asList(TAG_BANANA_SALAD, TAG_ALL_ONE, TAG_ALL_TWO)))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final Recipe CUSTARD_SALAD \u003d new RecipeBuilder().withName(VALID_RECIPE_NAME_CUSTARD_SALAD)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withIngredients(new ArrayList\u003c\u003e(Arrays.asList(CUSTARD_REF)))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .withSteps(new ArrayList\u003c\u003e(Arrays.asList(STEP_CUSTARD_SALAD)))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        .withTags(new HashSet\u003c\u003e(Arrays.asList(TAG_CUSTARD_SALAD, TAG_ALL_ONE, TAG_ALL_TWO)))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     * Returns an {@code IngredientBook} with all the typical ingredients."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hjl99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seowalex"
        },
        "content": "    public static EntryBook\u003cRecipe\u003e getTypicalRecipeBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seowalex"
        },
        "content": "        EntryBook\u003cRecipe\u003e rb \u003d new EntryBook\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seowalex"
        },
        "content": "            rb.add(recipe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return rb;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hjl99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APRICOT_SALAD, BANANA_SALAD));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hjl99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hjl99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hjl99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hjl99": 54,
      "zhiayang": 2,
      "Trav1sT": 9,
      "seowalex": 3
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalReferences.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "// TypicalReferences.java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "import chopchop.logic.parser.ItemReference;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " * A utility class containing a list of {@code ItemReference} objects to be used in tests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhiayang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "public class TypicalReferences {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference INDEXED_FIRST         \u003d ItemReference.ofOneIndex(1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference INDEXED_SECOND        \u003d ItemReference.ofOneIndex(2);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference INDEXED_THIRD         \u003d ItemReference.ofOneIndex(3);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_BANANA          \u003d ItemReference.ofName(\"banana\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_APRICOT         \u003d ItemReference.ofName(\"apricot\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhiayang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_BANANA_SALAD    \u003d ItemReference.ofName(\"Banana Salad\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "    public static final ItemReference NAMED_APRICOT_SALAD   \u003d ItemReference.ofName(\"Apricot Salad\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhiayang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhiayang": 20
    }
  },
  {
    "path": "src/test/java/chopchop/testutil/TypicalUsages.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "package chopchop.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.UsageList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.attributes.units.Mass;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.IngredientUsage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "import chopchop.model.usage.RecipeUsage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "public class TypicalUsages {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    Objects are named this way. \u003cRECIPE/INGREDIENT\u003e_\u003cNAME BY ALPHA ORDER\u003e_\u003cDATE, A BEING THE EARLIEST\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_A_A \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"A\", LocalDateTime.of(1,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_A_B \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"A\", LocalDateTime.of(200,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_A_C \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"A\", LocalDateTime.of(2019,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_A_D \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"A\", LocalDateTime.of(2020,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_A_E \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"A\", LocalDateTime.of(2021,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_A_F \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"A\", LocalDateTime.of(2050,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_B_A \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"B\", LocalDateTime.of(1,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_B_B \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"B\", LocalDateTime.of(200,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_B_C \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"B\", LocalDateTime.of(2019,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_B_D \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"B\", LocalDateTime.of(2020,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_B_E \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"B\", LocalDateTime.of(2021,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_B_F \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"B\", LocalDateTime.of(2050,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final RecipeUsage RECIPE_C_A \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new RecipeUsage(\"C\", LocalDateTime.of(1,  1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_A_A \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"A\", LocalDateTime.of(1,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_A_B \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"A\", LocalDateTime.of(200,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_A_C \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"A\", LocalDateTime.of(2019,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_A_D \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"A\", LocalDateTime.of(2020,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_A_E \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"A\", LocalDateTime.of(2021,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_A_F \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"A\", LocalDateTime.of(2050,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_B_A \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"B\", LocalDateTime.of(1,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_B_B \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"B\", LocalDateTime.of(200,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_B_C \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"B\", LocalDateTime.of(2019,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_B_D \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"B\", LocalDateTime.of(2020,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_B_E \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"B\", LocalDateTime.of(2021,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static final IngredientUsage INGREDIENT_B_F \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        new IngredientUsage(\"B\", LocalDateTime.of(2050,  1, 1, 1, 1),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            Mass.grams(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     * Returns a UsageList with its usages in Chronological order. Both A and B recipes are in it."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static UsageList\u003cRecipeUsage\u003e getRecipeUsageList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new UsageList\u003c\u003e(Arrays.asList(RECIPE_A_A, RECIPE_B_A, RECIPE_A_B, RECIPE_B_B, RECIPE_A_C, RECIPE_B_C,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            RECIPE_A_D, RECIPE_B_D, RECIPE_A_E, RECIPE_B_E, RECIPE_A_F, RECIPE_B_F));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    public static UsageList\u003cIngredientUsage\u003e getIngredientUsageList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "        return new UsageList\u003c\u003e(Arrays.asList(INGREDIENT_A_A, INGREDIENT_B_A, INGREDIENT_A_B, INGREDIENT_B_B,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            INGREDIENT_A_C, INGREDIENT_B_C, INGREDIENT_A_D, INGREDIENT_B_D, INGREDIENT_A_E, INGREDIENT_B_E,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "            INGREDIENT_A_F, INGREDIENT_B_F));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Trav1sT"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Trav1sT": 93
    }
  },
  {
    "path": "src/test/java/chopchop/ui/CommandBoxTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.commons.util.Strings.COMMAND_LIST;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.LogicManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.storage.JsonIngredientBookStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.storage.JsonRecipeBookStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.storage.JsonIngredientUsageStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.storage.JsonRecipeUsageStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.storage.StorageManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d COMMAND_LIST + \" recipe\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"test\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final ArrayList\u003cString\u003e history \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private ModelManager modelManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        JsonIngredientBookStorage ingredientBookStorage \u003d new JsonIngredientBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        JsonRecipeBookStorage recipeBookStorage \u003d new JsonRecipeBookStorage(getTempFilePath(\"abc\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        JsonRecipeUsageStorage recipeUsageStorage \u003d new JsonRecipeUsageStorage(getTempFilePath(\"cc\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        JsonIngredientUsageStorage ingredientUsageStorage \u003d new JsonIngredientUsageStorage(getTempFilePath(\"dd\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        storageManager \u003d new StorageManager(recipeBookStorage, ingredientBookStorage, recipeUsageStorage,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                ingredientUsageStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logic \u003d new LogicManager(modelManager, storageManager);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(commandText -\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            logic.execute(commandText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (commandText.equals(COMMAND_THAT_SUCCEEDS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                return CommandResult.message(\"Command successful\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new CommandException(\"Command failed\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }, logic);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        uiPartExtension.setUiPart(commandBox);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String thirdCommand \u003d \"list recipe\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleKeyPress_tabAutocompleteTargetWithTarget() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(\"\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Autocomplete command"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        executeKeyCodes(KeyCode.L);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.TAB, \"list \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Autocomplete command target"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        executeKeyCodes(KeyCode.R);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.TAB, COMMAND_THAT_SUCCEEDS + \" \");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void handleKeyPress_tabAutocompleteForUserInputs() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // one arg starting with char"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String firstCommand \u003d \"add recipe \";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String firstArg \u003d \"duck soup\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String secondCommand \u003d \"view \";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(firstCommand + firstArg);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        executeKeyCodes(KeyCode.V, KeyCode.TAB, KeyCode.D);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.TAB, secondCommand + firstArg + \" \");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // two args in history with same prefix get second"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String secondArg \u003d \"duck pudding\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(firstCommand + secondArg);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        executeKeyCodes(KeyCode.V, KeyCode.TAB, KeyCode.D, KeyCode.TAB);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.TAB, secondCommand + secondArg + \" \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // two args in history with same prefix get first"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.clearInput();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        executeKeyCodes(KeyCode.V, KeyCode.TAB, KeyCode.D, KeyCode.TAB, KeyCode.TAB);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertInputHistory(KeyCode.TAB, secondCommand + firstArg + \" \");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void executeKeyCodes(KeyCode... keyCodes) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (KeyCode keyCode : keyCodes) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            guiRobot.push(keyCode);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 224
    }
  },
  {
    "path": "src/test/java/chopchop/ui/CommandOutputTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.ui.testutil.GuiTestUtil.parseTextToString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.CommandOutputHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandOutputTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandOutput commandOutput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private CommandOutputHandle commandOutputHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setup() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandOutput \u003d new CommandOutput();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        uiPartExtension.setUiPart(commandOutput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandOutputHandle \u003d new CommandOutputHandle(getChildNode(commandOutput.getRoot(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                CommandOutputHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void displayValidMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(\"\", parseTextToString(commandOutputHandle.getText()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Command output received"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String testFeedback \u003d \"test feedback to user\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.interact(() -\u003e commandOutput.setFeedbackToUser(CommandResult.message(testFeedback)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Command output adds a newline to the end of each text"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(testFeedback + \"\\n\", parseTextToString(commandOutputHandle.getText()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Clear message"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.interact(() -\u003e commandOutput.clear());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(\"\", parseTextToString(commandOutputHandle.getText()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void displayErrorMessage() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String errorWrapper \u003d \"Error: \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String testError \u003d \"test error to user.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.interact(() -\u003e commandOutput.setFeedbackToUser(CommandResult.error(testError)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Command output adds a newline to the end of each text"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(errorWrapper + testError + \"\\n\", parseTextToString(commandOutputHandle.getText()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 52
    }
  },
  {
    "path": "src/test/java/chopchop/ui/GuiUnitTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.extension.RegisterExtension;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.ui.testutil.UiPartExtension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A GUI unit test class for AddressBook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    // TODO: Remove this workaround after using JavaFX version 13 or above"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    // This is a workaround to solve headless test failure on Windows OS"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    // Refer to https://github.com/javafxports/openjdk-jfx/issues/66 for more details."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            System.loadLibrary(\"WindowsCodecs\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @RegisterExtension"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public final UiPartExtension uiPartExtension \u003d new UiPartExtension();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 40
    }
  },
  {
    "path": "src/test/java/chopchop/ui/RecipeDisplayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.testutil.TypicalRecipes.APRICOT_SALAD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.ui.testutil.GuiTestUtil.parseIngredientsToString;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static chopchop.ui.testutil.GuiTestUtil.parseStepList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.RecipeDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void displayRecipe() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeDisplay recipeDisplay \u003d new RecipeDisplay(APRICOT_SALAD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        uiPartExtension.setUiPart(recipeDisplay);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertDisplay(recipeDisplay, APRICOT_SALAD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void assertDisplay(RecipeDisplay recipeDisplay, Recipe expectedRecipe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        RecipeDisplayHandle recipeDisplayHandle \u003d new RecipeDisplayHandle(recipeDisplay.getRoot());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(expectedRecipe.getName(), recipeDisplayHandle.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(parseIngredientsToString(expectedRecipe.getIngredients()), recipeDisplayHandle.getIngredients());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(parseStepList(expectedRecipe.getSteps()), recipeDisplayHandle.getSteps());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 31
    }
  },
  {
    "path": "src/test/java/chopchop/ui/testutil/GuiTestAssert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.CommandOutputHandle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.RecipeCardHandle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static void assertRecipeCardEquals(RecipeCardHandle expectedCard, RecipeCardHandle actualCard) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Asserts the message shown in {@code commandOutputHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static void assertResultMessage(CommandOutputHandle commandOutputHandle, String expected) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertEquals(expected, commandOutputHandle.getText());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 26
    }
  },
  {
    "path": "src/test/java/chopchop/ui/testutil/GuiTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.attributes.Step;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.IngredientReference;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A set of utils for parsing Lists."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class GuiTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Parse a List of {@code Text} into a {@code String}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static String parseTextToString(List\u003cNode\u003e nodeList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        StringBuilder str \u003d new StringBuilder();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        for (Node node : nodeList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (node instanceof Text) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                str.append(((Text) node).getText());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return str.toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Parse a List of {@code IngredientReference} into a {@code String}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static String parseIngredientsToString(List\u003cIngredientReference\u003e ingredientReferenceList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return ingredientReferenceList.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(IngredientReference::toString)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.joining());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Parse a List of {@code Step} into a {@code String}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static String parseStepList(List\u003cStep\u003e stepList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return stepList.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Step::toString)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.joining());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 45
    }
  },
  {
    "path": "src/test/java/chopchop/ui/testutil/StageExtension.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.extension.AfterEachCallback;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.extension.BeforeEachCallback;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.junit.jupiter.api.extension.ExtensionContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Properly sets up and tears down a JavaFx stage for our testing purposes."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class StageExtension implements BeforeEachCallback, AfterEachCallback {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void beforeEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void afterEach(ExtensionContext context) throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 21
    }
  },
  {
    "path": "src/test/java/chopchop/ui/testutil/UiPartExtension.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package chopchop.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Provides an isolated stage to test an individual {@code UiPart}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class UiPartExtension extends StageExtension {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String[] CSS_FILES \u003d {\"view/Style.css\"};"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            FxToolkit.setupScene(() -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                Scene scene \u003d new Scene(uiPart.getRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                scene.getStylesheets().setAll(CSS_FILES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                return scene;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            throw new AssertionError(\"Timeout should not happen.\", te);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 29
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a GuiRobot."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 122
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code CommandBox} with the given {@code commandBoxNode}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Clears the text in the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void clearInput() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        getRootNode().clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 51
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandOutputHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code CommandOutput} in the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class CommandOutputHandle extends NodeHandle\u003cTextFlow\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#displayBox\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code commandOutputHandle} with the given {@code commandOutputNode}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandOutputHandle(TextFlow commandOutputNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(commandOutputNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the text in the display box."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public List\u003cNode\u003e getText() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getRootNode().getChildren();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 28
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DisplayPanelHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class DisplayPanelHandle {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 5
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 23
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/IngredientCardHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code IngredientCard} in the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class IngredientCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#ingredientName\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String QTY_FIELD_ID \u003d \"#quantity\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String EXPIRY_DATE_FIELD_ID \u003d \"#expiryDate\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String TAG_LIST_FIELD_ID \u003d \"#tagList\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Label qtyLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Label expLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code IngredientCardHandle} with the given {@code ingredientCardNode}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public IngredientCardHandle(Node ingredientCardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(ingredientCardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        qtyLabel \u003d getChildNode(QTY_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        expLabel \u003d getChildNode(EXPIRY_DATE_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAG_LIST_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the name of the ingredient in the ingredient card."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the quantity of the ingredient in the ingredient card."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getQty() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return qtyLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the expiry date of the ingredient in the ingredient card."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getExpiryDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return expLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the list of tags of the ingredient in the ingredient card."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Compares an ingredient card to verify if it is equal to an ingredient."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean equals(Ingredient ingredient) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        // Well we gotta change this depending on how we make our ingredient card more presentable uwu"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getName().equals(ingredient.getName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 81
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/IngredientViewPanelHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class IngredientViewPanelHandle {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 4
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String MENU_BAR_FIELD_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void openHelpWindowUsingMenu() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        clickOnMenuItemsSequentially(\"Help\", \"F1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Opens the {@code HelpWindow} by pressing the shortcut key associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void openHelpWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.push(KeyCode.F1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Closes the app by pressing the shortcut key associated"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void exitAppUsingAccelerator() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.push(KeyCode.F4);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 48
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final CommandOutputHandle commandOutput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final StatsBoxHandle statsBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code MainWindowHandle} from the given {@code Stage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        commandOutput \u003d new CommandOutputHandle(getChildNode(CommandOutputHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        statsBox \u003d new StatsBoxHandle(getChildNode(StatsBoxHandle.STATS_FIELD_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_FIELD_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the command output box."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public CommandOutputHandle getCommandOutput() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return commandOutput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the stats box."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public StatsBoxHandle getStatsBox() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return statsBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the main menu."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 54
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code NodeHandle} with the given root node."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the {@code roodNode}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 50
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NotificationWindowHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code NotificationWindow} of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class NotificationWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String NOTIFICATION_WINDOW_TITLE \u003d \"Notification\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public NotificationWindowHandle(Stage notificationWindowStage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(notificationWindowStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true if a notification window is currently present in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return new GuiRobot().isWindowShown(NOTIFICATION_WINDOW_TITLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 23
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RecipeCardHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code RecipeCard} in the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#recipeName\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Button recipeButton;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code RecipeCardHandle} with the given {@code recipeCardNode}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeCardHandle(Node recipeCardNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(recipeCardNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        recipeButton \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the name of the recipe in the recipe card."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return recipeButton.getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 30
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RecipeDisplayHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code RecipeDisplay} in the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeDisplayHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String RECIPE_DISPLAY_FIELD_ID \u003d \"gridPane\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String NAME_FIELD_ID \u003d \"#recipeName\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String INGREDIENT_LIST_FIELD_ID \u003d \"#ingredientList\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String STEP_LIST_FIELD_ID \u003d \"#stepList\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String TAG_LIST_FIELD_ID \u003d \"#tagList\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final List\u003cLabel\u003e tagTexts;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final List\u003cText\u003e ingredientTexts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final List\u003cText\u003e stepTexts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code RecipeDisplayHandle} with the given {@code recipeDisplayNode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeDisplayHandle(Node recipeDisplayHandleNode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(recipeDisplayHandleNode);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAG_LIST_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        tagTexts \u003d tagsContainer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Region ingredientContainer \u003d getChildNode(INGREDIENT_LIST_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        ingredientTexts \u003d ingredientContainer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Text.class::cast)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Region stepContainer \u003d getChildNode(STEP_LIST_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        stepTexts \u003d stepContainer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .filter(x -\u003e (x instanceof Text))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .map(Text.class::cast)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the name of the recipe in the recipe display."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the list of tags of the recipe in the recipe display."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return tagTexts"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(x -\u003e x.trim())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the list of tags of the recipe in the recipe display."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getIngredients() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return ingredientTexts"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Text::getText)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(x -\u003e x.trim())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.joining());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the list of tags of the recipe in the recipe display."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getSteps() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return stepTexts"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(Text::getText)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .map(x -\u003e x.trim())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fall9x"
        },
        "content": "                .collect(Collectors.joining());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 97
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/RecipeViewPanelHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.model.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Provides a handle for {@code RecipeViewPanel} containing the list of {@code RecipeCard}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class RecipeViewPanelHandle extends NodeHandle\u003cGridPane\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String RECIPE_VIEW_PANEL_ID \u003d \"#recipeGridView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String RECIPE_CARD_ID \u003d \"#recipeCard\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Optional\u003cRecipe\u003e lastRememberedSelectedRecipeCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code RecipeViewPanelHandle} with a given {@code GridPane}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public RecipeViewPanelHandle(GridPane recipeViewPanelNode) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(recipeViewPanelNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private void test() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return guiRobot.lookup(RECIPE_CARD_ID).queryAll();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getRootNode().getChildren().size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 38
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import chopchop.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatsBoxHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code StatsBox} in the GUI."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class StatsBoxHandle extends NodeHandle\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String STATS_FIELD_ID \u003d \"statsBox\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String PINS_FIELD_ID \u003d \"#pins\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String HEADER_FIELD_ID \u003d \"#header1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private static final String BODY_FIELD_ID \u003d \"#body1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final TextArea pins;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final TextArea header1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    private final TextArea body1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code StatsBox} with the given {@code commandBoxNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public StatsBoxHandle(Region statsBoxNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(statsBoxNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        pins \u003d getChildNode(PINS_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        header1 \u003d getChildNode(HEADER_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        body1 \u003d getChildNode(BODY_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the content of the header."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getHeader() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return header1.getText();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Retrieves the content of the body."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getBody() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return body1.getText();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 44
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/TextDisplayHandle.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * A handle to the {@code TextDisplay} in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class TextDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#textDisplay\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Constructs a {@code commandOutputHandle} with the given {@code textDisplayNode}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public TextDisplayHandle(TextArea textDisplayNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        super(textDisplayNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     * Returns the text in the text display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fall9x"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fall9x"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fall9x"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 25
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/NodeNotFoundException.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Signals that the node cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class NodeNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/StageNotFoundException.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fall9x"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fall9x"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fall9x"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fall9x"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fall9x"
        },
        "content": " * Signals that the stage cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fall9x"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fall9x"
        },
        "content": "public class StageNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fall9x"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fall9x": 9
    }
  }
]
