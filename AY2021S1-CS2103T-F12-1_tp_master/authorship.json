[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F12-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F12-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "# HelloFile"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## About"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* HelloFile is a desktop app for managing files, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Users can tag their file with a nickname to access it easier through the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "* For the detailed documentation of this project, see the **[HelloFile Product Website](https://ay2021s1-cs2103t-f12-1.github.io/tp/)**."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "* This is **a project for CS2103T Software Engineering (SE) class 2020 Semester 1**."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "## Acknowledgement"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Lecturer: Damith C. Rajapakse"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "* Teaching Assistant: Kim Hyeongcheol"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "luo-git": 2,
      "Anthony6401": 8,
      "Ma-Yueran": 1,
      "-": 4
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Li Shuo"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "\u003cimg src\u003d\"images/li-s.png\" width\u003d\"200px\" alt\u003d\"Li Shuo\u0027s profile picture\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[[github](https://github.com/li-s)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Documentation"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Logic"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Lu Luoyi"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/luo-git.png\" width\u003d\"200px\" alt\u003d\"Luoyi\u0027s profile picture\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[[github](https://github.com/luo-git)]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Logic"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Ma Yueran"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/ma-yueran.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "[[github](https://github.com/Ma-Yueran)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Code quality"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Anthony Lie"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/anthony6401.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[[github](https://github.com/Anthony6401)]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Storage"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Heinrich"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cimg src\u003d\"images/hynridge.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "[[github](https://github.com/HynRidge)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Role: Scheduling and tracking"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "* Responsibility: Model"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "Ma-Yueran": 14,
      "HynRidge": 9,
      "-": 23
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* Tech savvy NUS Computer Science Student"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* has a need to manage a significant number of files"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Value proposition**: CS students can manage/access their files by typing"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                       and using a simple GUI. Help CS students to see file relations easily."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                                     | I want to …​                                       | So that I can…​                                        |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| -------- | ---------------------------------------------------------------| ------------------------------------------------------| ----------------------------------------------------------|"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student with lots of file                                      | tag my files with a easy to remember tag              | get file path                                             |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | First time user                                                | use a help command                                    | start to remember how to use the command                  |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student who prefers to type                                    | use typing to interact with my file system            | use keyboard as much as possible                          |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* * *`  | Student who is familiar with command line applications         | name my files                                         | access the file easily next time                          |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `* *`    | CS student with a lot of project                               | hide private contact details                          | minimize chance of someone else seeing them by accident   |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `*`      | Forgetful user who always forget where his files are located   | tag frequently used files with a easy to remember tag | locate my files easily                                    |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `*`      | Intermediate user                                              | delete file                                           | not be distracted by it.                                  |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "| `*`      | Developer                                                      | open files with a quick command                       | focus on coding and not look to find my files             |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "(For all use cases below, the **System** is the `HelloFile` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use case ID: UC01**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use case: Create fileInfo**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to tag a certain file using the absolute file path."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises the file path to be valid."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile creates the tag and display the fileInfo."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile detects the file path is invalid."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2a1. HelloFile prompts the user that the file path is wrong."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2b. HelloFile detects no tag input."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2b1. HelloFile prompts the user for a tag."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2c. HelloFile detects a duplicate tag name."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2c1. HelloFile prompts the user for another tag name."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**User case ID: UC02**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Access file using tag**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "luo-git"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to open a file using a tag."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises the tag to be valid."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile opens the specified file using the default application."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile detects that the tag is invalid."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts the user that the tag is wrong."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3a. HelloFile detects that the target file does not exist."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3a1. HelloFile prompts that the target file does not exist."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3b. HelloFile detects no default application to open the file."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3b1. HelloFile prompts the user to choose an application to open the file."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes form step 1."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3c. HelloFile encounters an exception when opening the file."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3c1. HelloFile shows the error message."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes from step 1."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC03**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Rename tag**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to rename the tag of a tagged file."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile replaces the tag of the file with the new tag."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile failed to recognize the tag."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts that tag does not exist."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    \tUse case resumes from step 1"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2b. HelloFile failed to recognize the new tag input."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    * 2b1. HelloFile prompts that the new tag is invalid."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1. "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2c. HelloFile detects a duplicate tag name."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2c1. HelloFile prompts the user for another tag name. "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC04**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Untag a file**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to untag a file."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises that the tag exist."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile removes the file from access."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile fails to recognize the tag."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile shows the error message."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes from step 1."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t\t"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        "
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC05**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Show a tagged file’s path**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests the check the path of a tagged file."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises that the tag exist."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile shows the path of the file."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile failed to recognize the tag."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts the user that the tag is wrong."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3a. HelloFile detects that the target file does not exist."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3a1. HelloFile prompts that the target file does not exist."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC06**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Access the parent folder of a tagged file**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User request to open parent folder of a tagged file."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile recognises the tag exist."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "3. HelloFile open the parent folder with the tag."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extension**"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 2a. HelloFile detects that the tag is invalid."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 2a1. HelloFile prompts the user that the tag is wrong."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes from step 1."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3a. HelloFile detects that the target file does not exist."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3a1. HelloFile prompts that the target file does not exist."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case resumes from step 1."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3b. HelloFile detects no default application to open the file."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3b1. HelloFile prompts the user to choose an application to open the file."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes form step 1."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* 3c. HelloFile encounters an exception when opening the file."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* 3c1. HelloFile shows the error message."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t\tUse case resumes from step 1."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. HelloFile has no permission to read or write to the file system."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile prompts the user that it needs the read and write permission."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Use case resumes."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**UseCase ID: UC07**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Use Case: Show the user help**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. User requests to see the user help."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. HelloFile shows the user help."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "* *a. User input the wrong command"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t* *a1. HelloFile shows the error message and direct the user to enter the user help command."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "\t    Use case ends."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "luo-git"
        },
        "content": "\u003cbr /\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "2. Should be able to hold up to 1000 tags without sluggishness longer than 5 seconds."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "4. The source code should be open source."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "5. The application should be usable by a tech-savvy NUS CS student who has never used a similar file management system before."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "6. The user interface should be simple and optimized for CLI power users."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "7. The product is offered as a free application."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "8. 99% of the functions are bug free."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "9. The code base should be well documented and populated with ample assertions."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Tag**: A string that will be mapped to a file path"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **UI**: User interface"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **CLI**: Command line interface"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **GUI**: Graphical user interface"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Relative File Path**: A path that is relative to a current directory, it is combined with another file path to access a file."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "li-s"
        },
        "content": "* **Absolute File Path**: The complete details required to locate the file or folder, starting with the root element."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "### Deleting a tag"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Deleting a tag while all tags are being shown"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "   1. Prerequisites: List all tags using the `list` command. Multiple tags in the list."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "      Expected: No tag is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "luo-git": 5,
      "li-s": 6,
      "HynRidge": 257,
      "-": 341
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "HelloFile is a desktop app for managing files, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). By being able to tag frequently used files/folders with a short nickname, you will be able to manage and access your files with ease."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Ensure you have Java 11 or above installed in your computer."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Download the latest hellofile.jar."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Copy the file to the folder you want to use as the home folder for HelloFile to start."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Double-click the file to start the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing help and pressing Enter will open the help window."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "* Each tag name must be unique, but each file can have multiple tags"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "### Viewing help : `help`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "Shows a command\u0027s usage and format, if no command is specified, show help for all commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `help [c/COMMAND]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Adding a tag with filepath : `tag`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `tag f/FILE_PATH t/TAG_NAME`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Showing file path of a tag : `show`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "Shows the file path of the specified tag."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `show t/TAG_NAME`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `show t/my_research`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `show t/notes`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Accessing a tagged file : `open`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "Opens the file specified in the filepath of the tag."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `open t/TAG_NAME`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `open t/my_research`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `open t/notes`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Removing a tag : `untag`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": "Removes the file from the list of managed files."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `untag t/TAG_NAME`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `untag t/notes`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Renaming a tag : `retag`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "Renames the tag of the file with a new tag."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `retag o/OLD_TAG_NAME t/NEW_TAG_NAME`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "* The command is case-sensitive. e.g `notes` will not match `Notes`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "li-s"
        },
        "content": "* `retag o/notes t/secret`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Listing all tags : `ls`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "li-s"
        },
        "content": "Lists all the tags with filepath"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "li-s"
        },
        "content": "Format: `ls`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "li-s"
        },
        "content": "### Clearing screen : `clear`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "li-s"
        },
        "content": "Clears the UI/CLI screen."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous HelloFile home folder."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Q**: What if the name or the directory of the file I tagged is changed? Can I still access the file using HelloFile?\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**A**: No. HelloFile cannot trace the file if its name or directory is changed, but if you still want to manage the file, you can tag it again."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Q**: Can tag name be duplicated?\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**A**: No. The tag names must be unique for all files being managed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "li-s"
        },
        "content": "**Tag** | `tag f/FILE_NAME t/TAG_NAME` \u003cbr\u003e e.g., `tag f/c:/myfolder/file.jpg t/newTag`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "li-s"
        },
        "content": "**Show** | `show t/TAG_NAME`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "li-s"
        },
        "content": "**Untag** | `untag t/TAG_NAME`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "li-s"
        },
        "content": "**Retag** | `retag o/OLD_TAG_NAME t/NEW_TAG_NAME` \u003cbr\u003e e.g., `retag o/mytag t/newtag`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "li-s"
        },
        "content": "**Open** | `open t/TAG_NAME`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**List** | `ls`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "li-s"
        },
        "content": "**Help** | `help [c/COMMAND]`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "li-s": 38,
      "HynRidge": 14,
      "-": 89
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "-": 393
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.OldCommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "       model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "Ma-Yueran": 1,
      "-": 248
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 2, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OldMainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"Starting AddressBook \" + VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 3,
      "-": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/OldMainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.OldUiManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class OldMainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OldMainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ui \u003d new OldUiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"Starting AddressBook \" + OldMainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_INPUT \u003d \"The Tag provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_DISPLAYED_INDEX \u003d \"The Tag index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_TAGS_LISTED_OVERVIEW \u003d \"%1$d tags listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "Anthony6401": 1,
      "HynRidge": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.OldMainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return new Image(OldMainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return model.getFilteredTagList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 3,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String CLEAR_COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String EXIT_COMMAND_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String FIND_MESSAGE_USAGE \u003d COMMAND_WORD + \"\u003cKEYWORD\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final TagNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public FindCommand(TagNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        model.updateFilteredTagList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                String.format(Messages.MESSAGE_TAGS_LISTED_OVERVIEW, model.getFilteredTagList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 7,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String STRING_FORMAT \u003d \"%-20s %s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d String.format(\"%-14s %s\", \"Command\", \"Usage\\n\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-21s %s\", ClearCommand.COMMAND_WORD, ClearCommand.CLEAR_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", ExitCommand.COMMAND_WORD, ExitCommand.EXIT_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", FindCommand.COMMAND_WORD, FindCommand.FIND_MESSAGE_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-24s %s\", ListCommand.COMMAND_WORD, ListCommand.LIST_MESSAGE_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(STRING_FORMAT, OpenCommand.COMMAND_WORD, OpenCommand.OPEN_MESSAGE_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-21s %s\", RetagCommand.COMMAND_WORD, RetagCommand.RETAG_MESSAGE_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(STRING_FORMAT, ShowCommand.COMMAND_WORD, ShowCommand.SHOW_MESSAGE_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(\"%-22s %s\", TagCommand.COMMAND_WORD, TagCommand.TAG_COMMAND_USAGE + \"\\n\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + String.format(STRING_FORMAT, UntagCommand.COMMAND_WORD, UntagCommand.UNTAG_MESSAGE_USAGE + \"\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 11,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Lists all tags in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String LIST_MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tags\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        model.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 2,
      "HynRidge": 3,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/OpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"open\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens the file specified in the filepath of a tag. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String OPEN_MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"\u003cTAG_NAME\u003e\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"File opened! Tag: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \"Tag \u0027%s\u0027 not found!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"The file: %s doesn\u0027t exist.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Creates an OpenCommand to open the file specified in the {@code Tag}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public OpenCommand(TagName tagName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the command and opens the file specified by tagName."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws CommandException if tagName cannot be found in model."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Check if tagName is in tag list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        FilteredList\u003cTag\u003e tagList \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                model.getAddressBook().getTagList().filtered(x -\u003e x.getTagName().equals(tagName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagName.toString()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Get tag and prepare file to be opened"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tagToOpen \u003d tagList.get(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        File file \u003d new File(tagToOpen.getFileAddress().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            // Open file using java.awt.Desktop"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Desktop.getDesktop().open(file);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        } catch (IOException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException(e.getMessage(), e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tagToOpen.toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                || (other instanceof OpenCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 tagName.equals(((OpenCommand) other).tagName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 71,
      "HynRidge": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RetagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"retag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \": Retags the tagged file identified by the old tag into the new tag.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_OLD_TAG_NAME + \"OLD_TAG_NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_TAG_NAME + \"NEW_TAG_NAME\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_OLD_TAG_NAME + \"my_files \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + PREFIX_TAG_NAME + \"my_old_files \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String RETAG_MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + PREFIX_OLD_TAG_NAME + \"\u003cOLD_TAG_NAME\u003e \" + PREFIX_TAG_NAME + \"\u003cNEW_TAG_NAME\u003e\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_RETAG_TAG_SUCCESS \u003d \"Retagged Tag: %s to Tag: %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_OLD_TAG_NOT_FOUND \u003d \" %s tag not found!\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" Please make sure that the old tag is present before retagging.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Duplicate tag name!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final TagName newTagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final TagName oldTagName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Creates a RetagCommand to retag the specified {@code oldTagName} to {@code newTagName}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public RetagCommand(TagName oldTagName, TagName newTagName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(oldTagName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(newTagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.oldTagName \u003d oldTagName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.newTagName \u003d newTagName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Executes the command and renames the tag in the model to the new tag."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @return A Command result of executing retag command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Check if oldTagName is in tag list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e oldTagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(oldTagName));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (oldTagList.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_OLD_TAG_NOT_FOUND, oldTagName.toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Check if newTagName is in tag list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e newTagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(newTagName));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!newTagList.isEmpty()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_TAG));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Get oldTagName"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag tagToChange \u003d oldTagList.get(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Get file path"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "        FileAddress fileAddress \u003d tagToChange.getFileAddress();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Delete old tag"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "        model.deleteTag(tagToChange);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag newTag \u003d new Tag(newTagName, fileAddress);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Add new tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": "        model.addTag(newTag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RETAG_TAG_SUCCESS, oldTagName, newTagName));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof RetagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 newTagName.equals(((RetagCommand) other).newTagName)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 oldTagName.equals(((RetagCommand) other).oldTagName));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 92,
      "HynRidge": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TAG_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Shows a Tag\u0027s file path identified using it\u0027s tag name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a tag\u0027s file address. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String SHOW_MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"\u003cTAG_NAME\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s\u0027s file path: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final TagNameEqualsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Creates an ShowCommand to show the specified {@code Tag}\u0027s file path"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ShowCommand(TagNameEqualsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        List\u003cTag\u003e tags \u003d model.findFilteredTagList(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TAG_INPUT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag tag \u003d tags.get(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, tag.getTagName(), tag.getFileAddress()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || (other instanceof ShowCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 predicate.equals(((ShowCommand) other).predicate));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 55,
      "HynRidge": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Adds a tag to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a tag to the HelleFile\u0027s address book. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"TAG_NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_FILE_ADDRESS + \"FILE_ADDRESS \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_TAG_NAME + \"cs2103 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + PREFIX_FILE_ADDRESS + \"F:\\\\OneDrive\\\\CS2013T \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String TAG_COMMAND_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"\u003cTAG_NAME\u003e\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + \" \" + PREFIX_FILE_ADDRESS + \"\u003cFILEPATH\u003e\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found at %s!\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"Please make sure that file is present before adding.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Duplicate tag name!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Tag toTag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Tag}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TagCommand(Tag tag) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        toTag \u003d tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private boolean filePresent(FileAddress address) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        File file \u003d new File(address.value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return file.exists();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Executes the command and add the tag to model."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @return A Command result of executing tag command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (model.hasTag(toTag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Check if file is present"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!filePresent(toTag.getFileAddress())) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new CommandException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    String.format(MESSAGE_FILE_NOT_FOUND, toTag.getFileAddress().value));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.addTag(toTag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toTag));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                || (other instanceof TagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                \u0026\u0026 toTag.equals(((TagCommand) other).toTag));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 39,
      "li-s": 1,
      "Anthony6401": 2,
      "HynRidge": 9,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UntagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Untags a Tag identified using it\u0027s unique tag."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"untag\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \": Untags the tagged file identified by the unique tag used in the displayed Tag list.\\n\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Parameters: \" + PREFIX_TAG_NAME + \"TAG_NAME (Must be an existing tag)\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"HelloFile.txt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String UNTAG_MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + PREFIX_TAG_NAME + \"\u003cTAG_NAME\u003e\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_UNTAG_TAG_SUCCESS \u003d \"Untagged Tag: %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String MESSAGE_TAG_NOT_FOUND \u003d \" %s tag not found!\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "            + \" Please make sure that the tag is present before untagging.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public UntagCommand(TagName tagName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // Check if tag to untag is in tag list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        List\u003cTag\u003e tagList \u003d model.findFilteredTagList(new TagNameEqualsKeywordPredicate(tagName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (tagList.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_TAG_NOT_FOUND, tagName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        model.deleteTag(tagList.get(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNTAG_TAG_SUCCESS, tagName));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof UntagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 tagName.equals(((UntagCommand) other).tagName)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 23,
      "HynRidge": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.RetagCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new TagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        case UntagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return new UntagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        case RetagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return new RetagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        case OpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            return new OpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        case ShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            return new ShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 6,
      "li-s": 7,
      "Anthony6401": 4,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_TAG_NAME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_OLD_TAG_NAME \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_FILE_ADDRESS \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Prefix PREFIX_COMMAND \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new FindCommand(new TagNameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/OpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommandParser implements Parser\u003cOpenCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the OpenCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * and returns an OpenCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public OpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new OpenCommand(tagName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static TagName parseTagName(String name) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!TagName.isValidTagName(trimmedName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new ParseException(TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new TagName(trimmedName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Parses a {@code String address} into an {@code FileAddress}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static FileAddress parseFileAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!FileAddress.isValidFileAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new ParseException(FileAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new FileAddress(trimmedAddress);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 12,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027tag f/C:/abc.txt t/myFile\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RetagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.RetagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Parses input arguments and creates a new RetagCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommandParser implements Parser\u003cRetagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RetagCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * and returns a RetagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public RetagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_OLD_TAG_NAME, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_OLD_TAG_NAME, PREFIX_TAG_NAME)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_OLD_TAG_NAME).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Parses input arguments and creates a new ShowCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommandParser implements Parser\u003cShowCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * and returns an ShowCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public ShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).orElse(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new ShowCommand(new TagNameEqualsKeywordPredicate(tagName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandParser implements Parser\u003cTagCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TagCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "     * and returns an TagCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public TagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME, PREFIX_FILE_ADDRESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME, PREFIX_FILE_ADDRESS)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName tagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress fileAddress \u003d ParserUtil.parseFileAddress(argMultimap.getValue(PREFIX_FILE_ADDRESS).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag tag \u003d new Tag(tagName, fileAddress);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new TagCommand(tag);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 8,
      "HynRidge": 9,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UntagCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": " * Parses input arguments and creates a new UntagCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommandParser implements Parser\u003cUntagCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UntagCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * and returns a UntagCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public UntagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG_NAME)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d ParserUtil.parseTagName(argMultimap.getValue(PREFIX_TAG_NAME).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return new UntagCommand(newTagName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 28,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        setTags(newData.getTagList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if a tag with the same identity as {@code tag} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void addTag(Tag p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag(Tag target, Tag editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags.setTag(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void removeTag(Tag key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tags.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 tags.equals(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tags.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 22,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    Predicate\u003cTag\u003e PREDICATE_SHOW_ALL_TAGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if a tag with the same identity as {@code tag} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    boolean hasTag(Tag tag);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void deleteTag(Tag target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Adds the given tag."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * {@code tag} must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void addTag(Tag tag);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedTag}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The person identity of {@code editedTag} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void setTag(Tag target, Tag editedTag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    ObservableList\u003cTag\u003e getFilteredTagList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    void updateFilteredTagList(Predicate\u003cTag\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * Finds the filter of the filtered tag list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 7,
      "HynRidge": 13,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final FilteredList\u003cTag\u003e filteredTags;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        filteredTags \u003d new FilteredList\u003c\u003e(this.addressBook.getTagList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return addressBook.hasTag(tag);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        addressBook.removeTag(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        addressBook.addTag(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        addressBook.setTag(target, editedTag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Tag} backed by the internal list of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return filteredTags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        filteredTags.setPredicate(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return getFilteredTagList().stream()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .filter(predicate)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 filteredTags.equals(other.filteredTags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 9,
      "HynRidge": 21,
      "-": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/FileAddress.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Represents a Tag\u0027s file address in the Hello File."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFileAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class FileAddress {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"File address can only take a valid file path!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"((((?\u003c!\\\\w)[A-Z,a-z]:)|(\\\\.{1,2}\\\\\\\\))\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"([^\\b%\\\\/\\\\|:\\\\n\\\\\\\"]*))|(\\\"\\\\2([^%\\\\/\\\\|:\\\\n\\\\\\\"]*)\\\")|((?\u003c!\\\\w)(\\\\.{1,2})?\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            + \"(?\u003c!\\\\/)(\\\\/((\\\\\\\\\\\\b)|[^ \\b%\\\\|:\\\\n\\\\\\\"\\\\\\\\\\\\/])+)+\\\\/?)\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs an {@code FileAddress}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public FileAddress(String address) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        checkArgument(isValidFileAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static boolean isValidFileAddress(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof FileAddress // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 value.equals(((FileAddress) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3,
      "Anthony6401": 1,
      "HynRidge": 10,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Represents a Tag in the HelloFile."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final TagName tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final FileAddress fileAddress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Tag(TagName tagName, FileAddress fileAddress) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(tagName, fileAddress);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.fileAddress \u003d fileAddress;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagName getTagName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public FileAddress getFileAddress() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return fileAddress;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (otherTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return otherTag !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 otherTag.getTagName().equals(getTagName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if both tag have the same identity and data fields."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!(other instanceof Tag)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag otherTag \u003d (Tag) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return otherTag.getTagName().equals(getTagName())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 otherTag.getFileAddress().equals(getFileAddress());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return Objects.hash(tagName, fileAddress);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        builder.append(getTagName())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .append(\" FileAddress: \")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .append(getFileAddress());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 1,
      "HynRidge": 54,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Represents a Tag\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            \"Tag names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        checkArgument(isValidTagName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof TagName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 tagName.equals(((TagName) other).tagName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 14,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagNameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * Tests that a {@code Tag}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagNameContainsKeywordsPredicate implements Predicate\u003cTag\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.getTagName().tagName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof TagNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 8,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagNameEqualsKeywordPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " * Tests that a {@code Tag}\u0027s {@code TagName} equals to the tag name given."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TagNameEqualsKeywordPredicate implements Predicate\u003cTag\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private final TagName tagNameToFind;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public TagNameEqualsKeywordPredicate(TagName tagNameToFind) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        this.tagNameToFind \u003d tagNameToFind;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return tagNameToFind.equals(tag.getTagName());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                || (other instanceof TagNameEqualsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                \u0026\u0026 tagNameToFind.equals(((TagNameEqualsKeywordPredicate) other).tagNameToFind)); // state check"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * A person is considered unique by comparing using {@code Tag#isSamePerson(Tag)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * persons uses Tag#isSamePerson(Tag) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * unique in terms of identity in the UniqueTagList. However, the removal of a person uses Tag#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * The person identity of {@code editedTag} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 41,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 3,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Tag[] getSampleTags() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new Tag[] {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            new Tag(new TagName(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FileAddress(\"c:\\\\a\\\\b\\\\alex.txt\")),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            new Tag(new TagName(\"Bernice Yu\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FileAddress(\"c:\\\\a\\\\b\\\\bernice.txt\")),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            new Tag(new TagName(\"Charlotte Oliveiro\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FileAddress(\"c:\\\\a\\\\b\\\\charlotte.txt\")),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            new Tag(new TagName(\"David Li\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FileAddress(\"c:\\\\a\\\\b\\\\david.txt\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            new Tag(new TagName(\"Irfan Ibrahim\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FileAddress(\"c:\\\\a\\\\b\\\\irfan.txt\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            new Tag(new TagName(\"Roy Balakrishnan\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FileAddress(\"c:\\\\a\\\\b\\\\roy.txt\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Tag sampleTag : getSampleTags()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            sampleAb.addTag(sampleTag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 18,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Tag\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final String fileAddress;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given tag details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public JsonAdaptedTag(@JsonProperty(\"tagName\") String tagName,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                          @JsonProperty(\"fileAddress\") String fileAddress) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.fileAddress \u003d fileAddress;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagName \u003d source.getTagName().tagName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fileAddress \u003d source.getFileAddress().value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (tagName \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, TagName.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!TagName.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final TagName modelName \u003d new TagName(tagName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (fileAddress \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                    FileAddress.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!FileAddress.isValidFileAddress(fileAddress)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            throw new IllegalValueException(FileAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final FileAddress modelFileAddress \u003d new FileAddress(fileAddress);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new Tag(modelName, modelFileAddress);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 33,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Tags list contains duplicate tag(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"tags\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tags.addAll(source.getTagList().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (JsonAdaptedTag jsonAdaptedTag : tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            Tag tag \u003d jsonAdaptedTag.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (addressBook.hasTag(tag)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            addressBook.addTag(tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 11,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            // setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 3,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FooterBar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A ui for the footer bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class FooterBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"FooterBar.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label versionNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public FooterBar(String versionNum) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        versionNumber.setText(versionNum);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LastInputDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class LastInputDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public LastInputDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setLastInput(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.util.UiUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static MainWindow instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme currentTheme \u003d ThemeSet.DARK_THEME;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TagListPanel tagListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private LastInputDisplay lastInputDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ThemeWindow themeWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane resultDisplayPlaceHolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane tagListPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane lastInputPlaceHolder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane commandBoxPlaceHolder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane footerbarPlaceHolder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Set theme"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        setTheme(currentTheme);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // setAccelerators();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Set instance"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        instance \u003d this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Theme selection window"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeWindow \u003d new ThemeWindow();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static MainWindow getInstance() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Theme getCurrentTheme() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return currentTheme;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // result display"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resultDisplayPlaceHolder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // tag list view"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListPanel \u003d new TagListPanel(logic.getFilteredTagList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListPlaceholder.getChildren().add(tagListPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // last input display"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        lastInputDisplay \u003d new LastInputDisplay();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        lastInputPlaceHolder.getChildren().add(lastInputDisplay.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // command box"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandBoxPlaceHolder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // footer bar"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        FooterBar footerBar \u003d new FooterBar(MainApp.VERSION.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        footerbarPlaceHolder.getChildren().add(footerBar.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Opens the theme choosing window."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void handleTheme() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!themeWindow.isShowing()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            themeWindow.show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            themeWindow.focus();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            lastInputDisplay.setLastInput(commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            lastInputDisplay.setLastInput(commandText);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void setTheme(Theme theme) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        currentTheme \u003d theme;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(primaryStage, theme);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 64,
      "-": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OldCommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class OldCommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public OldCommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OldMainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class OldMainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"OldMainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private TagListPanel tagListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane tagListPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public OldMainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListPanel \u003d new TagListPanel(logic.getFilteredTagList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListPanelPlaceholder.getChildren().add(tagListPanel.getRoot());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        OldCommandBox commandBox \u003d new OldCommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TagListPanel getTagListPanel() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return tagListPanel;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OldUiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.OldMainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class OldUiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OldUiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private OldMainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public OldUiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            mainWindow \u003d new OldMainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return new Image(OldMainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * An UI component that displays information of a {@code Tag}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"TagCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public final Tag tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label tagName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private Label fileAddress;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Tag} and index to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagCard(Tag tag, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagName.setText(tag.getTagName().tagName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fileAddress.setText(tag.getFileAddress().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Displays the information of the tag in the main window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showTagInfo() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        MainWindow mainWindow \u003d MainWindow.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (mainWindow \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        String showInfoCommand \u003d \"show t/\" + tag.getTagName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        mainWindow.executeCommand(showInfoCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        if (!(other instanceof TagCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagCard card \u003d (TagCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \u0026\u0026 tag.equals(card.tag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 20,
      "HynRidge": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Panel containing the list of tags."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String FXML \u003d \"TagListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TagListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private ListView\u003cTag\u003e tagListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates a {@code TagListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public TagListPanel(ObservableList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        tagListView.setItems(tagList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagListView.setCellFactory(listView -\u003e new TagListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Tag} using a {@code TagCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    class TagListViewCell extends ListCell\u003cTag\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        protected void updateItem(Tag tag, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            super.updateItem(tag, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            if (empty || tag \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                setGraphic(new TagCard(tag, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 13,
      "Ma-Yueran": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Theme.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Theme stores the style sheet path and theme preview image path information."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class Theme {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String styleSheetPath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private String themePreviewPath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a theme with the given style sheet path and theme preview image path."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param styleSheetPath the path of the style sheet"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param themePreviewPath the path of the preview image"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public Theme(String styleSheetPath, String themePreviewPath) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.styleSheetPath \u003d styleSheetPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.themePreviewPath \u003d themePreviewPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getStyleSheetPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return styleSheetPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public String getThemePreviewPath() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themePreviewPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ThemeCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * An UI component that displays information of a {@code Theme}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"ThemeCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ThemeWindow themeWindow;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme theme;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Label themeName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Constructs a ThemeCard."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param themeName the name of the theme"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param theme the theme"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param themeWindow the theme choosing window"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ThemeCard(String themeName, Theme theme, ThemeWindow themeWindow) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.themeName.setText(themeName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this.themeWindow \u003d themeWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showThemePreview() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeWindow.showThemePreview(theme);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        if (!(other instanceof ThemeCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard card \u003d (ThemeCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return themeName.getText().equals(card.themeName.getText());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ThemeSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * ThemeSet stores Themes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeSet {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme DEFAULT_THEME \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new Theme(\"view/DefaultTheme.css\", \"/images/default_theme.png\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme DARK_THEME \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new Theme(\"view/HelloFileDarkTheme.css\", \"/images/dark_theme.png\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static final Theme GALAXY_THEME \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            new Theme(\"view/GalaxyTheme.css\", \"/images/galaxy_theme.png\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ThemeWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.util.UiUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " * Controller for a theme selection page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class ThemeWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ThemeWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String FXML \u003d \"ThemeWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme currentTheme \u003d MainWindow.getInstance().getCurrentTheme();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private Theme selectedTheme \u003d currentTheme;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ListView themeList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private ImageView themeImage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a new ThemeWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param root Stage to use as the root of the ThemeWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ThemeWindow(Stage root) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(root, currentTheme);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        root.setTitle(\"Select a Theme\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Creates a new ThemeWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public ThemeWindow() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private void fillThemeCards() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard defaultThemeCard \u003d new ThemeCard(\"Default Theme\", ThemeSet.DEFAULT_THEME, this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard darkThemeCard \u003d new ThemeCard(\"Dark Theme\", ThemeSet.DARK_THEME, this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        ThemeCard galaxyThemeCard \u003d new ThemeCard(\"Galaxy Theme\", ThemeSet.GALAXY_THEME, this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeList.getItems().setAll("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                defaultThemeCard.getRoot(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                darkThemeCard.getRoot(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                galaxyThemeCard.getRoot()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Displays the preview image of the given theme."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param theme the theme to display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void showThemePreview(Theme theme) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        themeImage.setImage(UiUtil.getImage(theme.getThemePreviewPath()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        selectedTheme \u003d theme;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Applies the selected theme to the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void applySelectedTheme() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        MainWindow.getInstance().setTheme(selectedTheme);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        UiUtil.setTheme(getRoot(), selectedTheme);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        hide();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Shows the theme selection window."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        logger.fine(\"Showing theme page about the application.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        fillThemeCards();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        showThemePreview(selectedTheme);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Returns true if the theme window is currently being shown."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Hides the theme window."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Focuses on the theme window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.util.UiUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(OldUiManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/hello_file_icon.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        primaryStage.getIcons().add(UiUtil.getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 5,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.OldMainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        URL fxmlFileUrl \u003d OldMainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/util/UiUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "package seedu.address.ui.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.ui.Theme;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "public class UiUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * Gets the image with the given imagePath."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @param imagePath the image path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     * @return the image"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    public static void setTheme(Stage root, Theme theme) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        root.getScene().getStylesheets().clear();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        root.getScene().getStylesheets().add(theme.getStyleSheetPath());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 24
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/font\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/FooterBar.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cHBox spacing\u003d\"2.0\" styleClass\u003d\"footer-bar\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel text\u003d\"Version: \" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/HBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel fx:id\u003d\"versionNumber\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets right\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel text\u003d\"Message: \" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel text\u003d\"None\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cfx:root onCloseRequest\u003d\"#handleExit\" title\u003d\"HelloFile App\" type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"501.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cMenuBar\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003cmenus\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                          \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleTheme\" text\u003d\"Theme...\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                          \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                      \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003c/menus\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cSplitPane dividerPositions\u003d\"0.3224299065420561\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"tagListPlaceholder\" prefHeight\u003d\"294.0\" prefWidth\u003d\"143.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"resultDisplayPlaceHolder\" prefHeight\u003d\"299.0\" prefWidth\u003d\"359.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                                 \u003c/VBox.margin\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"lastInputPlaceHolder\" prefHeight\u003d\"15.0\" prefWidth\u003d\"301.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                    \u003c/items\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"commandBoxPlaceHolder\" prefHeight\u003d\"41.0\" prefWidth\u003d\"501.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cStackPane fx:id\u003d\"footerbarPlaceHolder\" prefHeight\u003d\"19.0\" prefWidth\u003d\"501.0\" styleClass\u003d\"pane-with-border\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 41,
      "-": 22
    }
  },
  {
    "path": "src/main/resources/view/OldMainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cVBox fx:id\u003d\"tagList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tagListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 60
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "      \u003cLabel fx:id\u003d\"fileAddress\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fileAddress\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cListView fx:id\u003d\"tagListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/font\u003e\u003c/TextArea\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/TagCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" onMouseClicked\u003d\"#showTagInfo\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"48.0\" prefHeight\u003d\"48.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        \u003cLabel fx:id\u003d\"tagName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$tagName\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel fx:id\u003d\"fileAddress\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$fileAddress\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 43
    }
  },
  {
    "path": "src/main/resources/view/TagListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "  \u003cListView fx:id\u003d\"tagListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/ThemeCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cVBox alignment\u003d\"TOP_CENTER\" onMouseClicked\u003d\"#showThemePreview\" styleClass\u003d\"theme-card\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cLabel fx:id\u003d\"themeName\" text\u003d\"\\$ThemeName\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 14
    }
  },
  {
    "path": "src/main/resources/view/ThemeWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003cfx:root type\u003d\"Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"364.0\" prefWidth\u003d\"547.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cListView fx:id\u003d\"themeList\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cImageView fx:id\u003d\"themeImage\" fitHeight\u003d\"300.0\" fitWidth\u003d\"400.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003cHBox alignment\u003d\"BOTTOM_CENTER\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#applySelectedTheme\" prefHeight\u003d\"25.0\" prefWidth\u003d\"80.0\" text\u003d\"Apply\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#hide\" prefHeight\u003d\"25.0\" prefWidth\u003d\"80.0\" text\u003d\"Cancel\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                              \u003cRegion HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_ADDRESS_DESC_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String invalidCommand \u003d \"invaliCommand\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String tagname \u003d \"randomTagName\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String untagCommand \u003d UntagCommand.COMMAND_WORD + \" t/\" + tagname;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandException(untagCommand, String.format(UntagCommand.MESSAGE_TAG_NOT_FOUND, tagname));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // Execute tag command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String tagCommand \u003d TagCommand.COMMAND_WORD + TAG_DESC_CS2101"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + FILE_ADDRESS_DESC_CS2101;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag expectedTag \u003d new TagBuilder(CS2101).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedModel.addTag(expectedTag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(tagCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getFilteredTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTagList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 7,
      "li-s": 7,
      "HynRidge": 5,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // TODO All of these needs to be updated!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALID_NAME_CS2103 \u003d \"cs2103\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALID_NAME_CS2101 \u003d \"cs2101\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALID_FILE_ADDRESS_CS2103 \u003d \"./src/test/java/seedu/address/testutil/cs2103.bat\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String VALID_FILE_ADDRESS_CS2101 \u003d \"./src/test/java/seedu/address/testutil/cs2101.bat\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String VALID_FILE_ADDRESS_AMY \u003d \"c:\\\\a\\\\b\\\\amy.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String VALID_FILE_ADDRESS_BOB \u003d \"c:\\\\a\\\\b\\\\bob.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String OLD_TAG_DESC_CS2101 \u003d \" \" + PREFIX_OLD_TAG_NAME + VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String OLD_TAG_DESC_CS2103 \u003d \" \" + PREFIX_OLD_TAG_NAME + VALID_NAME_CS2103;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String TAG_DESC_CS2103 \u003d \" \" + PREFIX_TAG_NAME + VALID_NAME_CS2103;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String TAG_DESC_CS2101 \u003d \" \" + PREFIX_TAG_NAME + VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_TAG_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_TAG_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String FILE_ADDRESS_DESC_CS2103 \u003d \" \" + PREFIX_FILE_ADDRESS + VALID_FILE_ADDRESS_CS2103;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String FILE_ADDRESS_DESC_CS2101 \u003d \" \" + PREFIX_FILE_ADDRESS + VALID_FILE_ADDRESS_CS2101;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String FILE_ADDRESS_DESC_AMY \u003d \" \" + PREFIX_FILE_ADDRESS + VALID_FILE_ADDRESS_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String FILE_ADDRESS_DESC_BOB \u003d \" \" + PREFIX_FILE_ADDRESS + VALID_FILE_ADDRESS_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String INVALID_OLD_TAG_DESC \u003d \" \" + PREFIX_OLD_TAG_NAME + \"myfile\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public static final String INVALID_NEW_TAG_DESC \u003d \" \" + PREFIX_TAG_NAME + \"myfile\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_TAG_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final String INVALID_FILE_ADDRESS_DESC \u003d \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            + PREFIX_FILE_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cTag\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTagList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTagList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static void showTagAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTagList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag person \u003d model.getFilteredTagList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        final String[] splitName \u003d person.getTagName().tagName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        model.updateFilteredTagList(new TagNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(1, model.getFilteredTagList().size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 7,
      "luo-git": 10,
      "HynRidge": 22,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TAGS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new TagNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new TagNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_zeroKeywords_noTagFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAGS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedModel.updateFilteredTagList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTagList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_multipleKeywords_multipleTagsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TAGS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedModel.updateFilteredTagList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredTagList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Parses {@code userInput} into a {@code TagNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private TagNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new TagNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 23,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTagAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        showTagAtIndex(model, INDEX_FIRST_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 4,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStub.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStub implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void deleteTag(Tag target) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ObservableList\u003cTag\u003e getFilteredTagList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void updateFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubAcceptingTagAdded.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Model stub that always accept the tag being added."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "@Deprecated"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStubAcceptingTagAdded extends ModelStub {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    final ArrayList\u003cTag\u003e tagsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return tagsAdded.stream().anyMatch(tag::isSameTag);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        tagsAdded.add(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubDeleteTag.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class ModelStubDeleteTag extends ModelStub {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private List\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "    ModelStubDeleteTag(List\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(tagList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return this.tagList.contains(tag);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tagList.remove(tag);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return tagList.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (other instanceof ModelStubDeleteTag) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "            if (tagList.isEmpty() \u0026\u0026 ((ModelStubDeleteTag) other).tagList.isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "            } else if (this.tagList.equals(((ModelStubDeleteTag) other).tagList)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithAddressBook.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * Model stub with AddressBook functionality"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStubWithAddressBook extends ModelStub {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final AddressBookStubWithTag ab \u003d new AddressBookStubWithTag();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ab.addTag(tag);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class AddressBookStubWithTag implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final UniqueTagList list \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return list.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        list.add(tag);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithTag.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": " * A Model stub that contains a single tag."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class ModelStubWithTag extends ModelStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    ModelStubWithTag(Tag tag) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public boolean hasTag(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return this.tag.isSameTag(tag);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModelStubWithTagAndTaglist.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class ModelStubWithTagAndTaglist extends ModelStub {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "    ModelStubWithTagAndTaglist(Tag tag) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return this.tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void addTag(Tag tag) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public List\u003cTag\u003e findFilteredTagList(Predicate\u003cTag\u003e predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        if (predicate.test(tag)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "            return List.of(tag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return List.of();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        boolean a \u003d other instanceof ModelStubWithTagAndTaglist;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "                || (other instanceof ModelStubWithTagAndTaglist // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "                \u0026\u0026 ((ModelStubWithTagAndTaglist) other).tag.equals(this.tag));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OpenCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.BeforeAll;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static final Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static Tag validTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private static Tag invalidTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @BeforeAll"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    static void prepareModel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        validTag \u003d new TagBuilder(CS2101).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // If system is not windows, use sh"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (!System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            validTag \u003d new TagBuilder(CS2101)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    .withFileAddress(\"./src/test/java/seedu/address/testutil/cs2101.sh\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        invalidTag \u003d new TagBuilder().withFileAddress(\".\\\\somewhereOverTheRainbow\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.addTag(validTag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        model.addTag(invalidTag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_openValidTag_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandSuccess(new OpenCommand(validTag.getTagName()), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    String.format(OpenCommand.MESSAGE_SUCCESS, validTag), model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_openTagNameNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName tagNameNotInModel \u003d new TagName(\"somethingNotInModel\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(tagNameNotInModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(openCommand, model,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(OpenCommand.MESSAGE_TAG_NOT_FOUND, tagNameNotInModel.tagName));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_openInvalidTag_throwCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            OpenCommand openCommand \u003d new OpenCommand(invalidTag.getTagName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandFailure(openCommand, model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    String.format(OpenCommand.MESSAGE_FILE_NOT_FOUND, invalidTag.getFileAddress()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/OpenCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "class OpenCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private Model typicalModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // Change to true to enable testing of opening files"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName tagName1 \u003d new TagName(\"cs2103\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName tagName2 \u003d new TagName(\"cs2103T\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand1 \u003d new OpenCommand(tagName1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand2 \u003d new OpenCommand(tagName2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(openCommand1.equals(openCommand1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand1Copy \u003d new OpenCommand(tagName1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(openCommand1.equals(openCommand1Copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(openCommand1.equals(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(openCommand1.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // different tagName -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(openCommand1.equals(openCommand2));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagName tagName \u003d new TagName(\"haHaImWrong\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        OpenCommand openCommand \u003d new OpenCommand(tagName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, String.format(OpenCommand.MESSAGE_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                tagName.tagName), () -\u003e openCommand.execute(typicalModel));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagNameInModel_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Tag correctTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            if (!os.startsWith(\"windows\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                correctTag \u003d new TagBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                        .withFileAddress(\"./src/test/java/seedu/address/testutil/testFile.sh\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            OpenCommand openCommand \u003d new OpenCommand(correctTag.getTagName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStubWithAddressBook \u003d new ModelStubWithAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            modelStubWithAddressBook.addTag(correctTag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            String expectedMessage \u003d String.format(OpenCommand.MESSAGE_SUCCESS, correctTag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertCommandSuccess(openCommand, modelStubWithAddressBook, expectedMessage, modelStubWithAddressBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagNameInModelFileNotFound_throwCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Tag correctTag \u003d new TagBuilder().withTagName(\"test\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    .withFileAddress(\".\\\\src\\\\test\\\\java\\\\seedu\\\\address\\\\testutil\\\\testFileNotHere.bat\").build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            OpenCommand openCommand \u003d new OpenCommand(correctTag.getTagName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            Model modelStubWithAddressBook \u003d new ModelStubWithAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            modelStubWithAddressBook.addTag(correctTag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            assertThrows(CommandException.class, String.format(OpenCommand.MESSAGE_FILE_NOT_FOUND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                    correctTag.getFileAddress().value), () -\u003e openCommand.execute(modelStubWithAddressBook));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RetagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ModelStubWithTagAndTaglist modelStub;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        modelStub \u003d new ModelStubWithTagAndTaglist(validTag);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_duplicateNewTagName_throwsCommandException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTag \u003d new TagBuilder().build().getTagName();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTag \u003d new TagBuilder().build().getTagName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(CommandException.class, RetagCommand.MESSAGE_DUPLICATE_TAG, () -\u003e retagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_oldTagNotInModel_throwCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagName(\"noExist\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d new TagName(\"noMatter\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(CommandException.class, String.format(RetagCommand.MESSAGE_OLD_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "                oldTagName.tagName), () -\u003e retagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_validInput_retagSuccess() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag newTag \u003d new TagBuilder().withTagName(\"new\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagBuilder().build().getTagName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d newTag.getTagName();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ModelStubWithTagAndTaglist expectedModelStub \u003d new ModelStubWithTagAndTaglist(newTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandSuccess(retagCommand, modelStub,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "                String.format(retagCommand.MESSAGE_RETAG_TAG_SUCCESS, oldTagName, newTagName), expectedModelStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagName(\"oldTag\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d new TagName(\"newTag\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand1 \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand2 \u003d new RetagCommand(newTagName, oldTagName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(retagCommand1.equals(retagCommand1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand1Copy \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(retagCommand1.equals(retagCommand1Copy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(retagCommand1.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(retagCommand1.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different tagName -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(retagCommand1.equals(retagCommand2));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName firstPredicateTagName \u003d new TagName(\"first\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName secondPredicateTagName \u003d new TagName(\"second\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate firstPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                firstPredicateTagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate secondPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                secondPredicateTagName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showFirstCommand \u003d new ShowCommand(firstPredicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showSecondCommand \u003d new ShowCommand(secondPredicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommand));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showFirstCommandCopy \u003d new ShowCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(showFirstCommand.equals(showFirstCommandCopy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(showFirstCommand.equals(1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(showFirstCommand.equals(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(showFirstCommand.equals(showSecondCommand));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void execute_invalidTagName_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate predicate \u003d new TagNameEqualsKeywordPredicate(new TagName(\"Invalid Tag Name\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandFailure(showCommand, model, Messages.MESSAGE_INVALID_TAG_INPUT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_validTagName_showTagFileSuccess() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag tagToBeShown \u003d model.getFilteredTagList().get(INDEX_FIRST_TAG.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate predicate \u003d new TagNameEqualsKeywordPredicate(tagToBeShown.getTagName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand showCommand \u003d new ShowCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String expectedMessage \u003d String.format(showCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                tagToBeShown.getTagName(), tagToBeShown.getFileAddress());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertCommandSuccess(showCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 1,
      "Anthony6401": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_newTag_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        expectedModel.addTag(validTag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandSuccess(new TagCommand(validTag), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(TagCommand.MESSAGE_SUCCESS, validTag), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void execute_duplicateTag_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tagInList \u003d model.getAddressBook().getTagList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertCommandFailure(new TagCommand(tagInList), model, TagCommand.MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 7,
      "HynRidge": 5,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/TagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void constructor_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TagCommand(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // This test is using the original idea of tagging person."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagAcceptedByModel_tagSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        ModelStubAcceptingTagAdded modelStub \u003d new ModelStubAcceptingTagAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        CommandResult commandResult \u003d new TagCommand(validTag).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(String.format(TagCommand.MESSAGE_SUCCESS, validTag), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(Arrays.asList(validTag), modelStub.tagsAdded);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_tagAddressFileNotFound_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tagInvalidAddress \u003d new TagBuilder().withFileAddress(\"./somewhereOverTheRainbow\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(tagInvalidAddress);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e tagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void execute_duplicateTagName_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagCommand \u003d new TagCommand(validTag);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertThrows(CommandException.class, TagCommand.MESSAGE_DUPLICATE_TAG, () -\u003e tagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag t1 \u003d new TagBuilder().withTagName(\"cs2101\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag t2 \u003d new TagBuilder().withTagName(\"cs2103\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagT1Command \u003d new TagCommand(t1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagT2Command \u003d new TagCommand(t2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(tagT1Command.equals(tagT1Command));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand tagT1CommandCopy \u003d new TagCommand(t1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertTrue(tagT1Command.equals(tagT1CommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(tagT1Command.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(tagT1Command.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertFalse(tagT1Command.equals(tagT2Command));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 35,
      "HynRidge": 4,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UntagCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": " * {@code UntagCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private ModelStub modelStub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag validTag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ArrayList\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        tagList.add(validTag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        modelStub \u003d new ModelStubDeleteTag(tagList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_validTagName_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        Tag tagToDelete \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand untagCommand \u003d new UntagCommand(tagToDelete.getTagName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(UntagCommand.MESSAGE_UNTAG_TAG_SUCCESS, tagToDelete.getTagName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        ModelStub expectedModel \u003d new ModelStubDeleteTag(new ArrayList\u003cTag\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertCommandSuccess(untagCommand, modelStub, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void execute_tagNotInModel_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName nonExistTagName \u003d new TagName(\"jalksdjlfkjsdlakjflsjlj\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand untagCommand \u003d new UntagCommand(nonExistTagName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertThrows(CommandException.class, String.format(UntagCommand.MESSAGE_TAG_NOT_FOUND,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "                nonExistTagName), () -\u003e untagCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTag1 \u003d new TagName(VALID_NAME_CS2101);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTag2 \u003d new TagName(VALID_NAME_CS2103);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand deleteFirstCommand \u003d new UntagCommand(validTag1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand deleteSecondCommand \u003d new UntagCommand(validTag2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand deleteFirstCommandCopy \u003d new UntagCommand(new TagName(VALID_NAME_CS2101));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(new TagName(VALID_NAME_CS2101)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 67,
      "HynRidge": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag tag \u003d new TagBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        TagCommand command \u003d (TagCommand) parser.parseCommand(TagUtil.getTagCommand(tag));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertEquals(new TagCommand(tag), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Deprecated"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parseCommand_untag() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "        UntagCommand command \u003d (UntagCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "                UntagCommand.COMMAND_WORD + \" \" + TAG_DESC_CS2103);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTagName \u003d new TagName(VALID_NAME_CS2103);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertEquals(new UntagCommand(validTagName), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(new FindCommand(new TagNameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 10,
      "luo-git": 4,
      "HynRidge": 5,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new FindCommand(new TagNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/OpenCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.OpenCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class OpenCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private OpenCommandParser parser \u003d new OpenCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        Tag expectedTag \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new OpenCommand(expectedTag.getTagName()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CS2101 + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                new OpenCommand(expectedTag.getTagName()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // missing tag name prefix"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2103, expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TAG_DESC_CS2101,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, OpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "luo-git"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "luo-git"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 51,
      "li-s": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_FILE_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_FILE_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_TAG_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_FILE_ADDRESS \u003d \"c:\\\\a\\\\b\\\\rachel.txt\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(INDEX_FIRST_TAG, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(INDEX_FIRST_TAG, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTagName((String) null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTagName(INVALID_FILE_NAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName expectedName \u003d new TagName(VALID_TAG_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTagName(VALID_TAG_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_TAG_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagName expectedName \u003d new TagName(VALID_TAG_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseTagName(nameWithWhitespace));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseFileAddress((String) null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseFileAddress(INVALID_FILE_ADDRESS));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress expectedFileAddress \u003d new FileAddress(VALID_FILE_ADDRESS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedFileAddress, ParserUtil.parseFileAddress(VALID_FILE_ADDRESS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_FILE_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        FileAddress expectedFileAddress \u003d new FileAddress(VALID_FILE_ADDRESS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedFileAddress, ParserUtil.parseFileAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 25,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RetagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "li-s"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NEW_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OLD_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OLD_TAG_DESC_CS2101;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2101;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "li-s"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.RetagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class RetagCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private RetagCommandParser parser \u003d new RetagCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName oldTagName \u003d new TagName(VALID_NAME_CS2101);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName newTagName \u003d new TagName(VALID_NAME_CS2103);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String userInput \u003d OLD_TAG_DESC_CS2101 + TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        RetagCommand retagCommand \u003d new RetagCommand(oldTagName, newTagName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, userInput, retagCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing old tag name prefix"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2101 + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing new tag name prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, OLD_TAG_DESC_CS2101 + VALID_NAME_CS2103,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2103 + VALID_NAME_CS2103, expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_invalidTagInput_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RetagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // wrong old tag format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, INVALID_OLD_TAG_DESC + TAG_DESC_CS2103,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "li-s"
        },
        "content": "                TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // wrong new tag format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2101 + INVALID_NEW_TAG_DESC,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "li-s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ShowCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.logic.commands.ShowCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.model.tag.TagNameEqualsKeywordPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class ShowCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    private ShowCommandParser parser \u003d new ShowCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // No prefix"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseFailure(parser, \"noprefix\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void parse_validArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        ShowCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new ShowCommand(new TagNameEqualsKeywordPredicate(new TagName(VALID_NAME_AMY)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, expectedFindCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FILE_ADDRESS_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "luo-git"
        },
        "content": "public class TagCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    private TagCommandParser parser \u003d new TagCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // TODO this test has to be updated!"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        Tag expectedTag \u003d new TagBuilder(BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + FILE_ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new TagCommand(expectedTag));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                + FILE_ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new TagCommand(expectedTag));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // missing tag name prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + FILE_ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // missing file address prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_FILE_ADDRESS_BOB,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_FILE_ADDRESS_BOB,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + FILE_ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // invalid fileaddress"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_FILE_ADDRESS_DESC"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, FileAddress.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_FILE_ADDRESS_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                TagName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                + FILE_ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "luo-git"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 10,
      "HynRidge": 25,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UntagCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_CS2103;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_CS2103;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "li-s"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.logic.commands.UntagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "li-s"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "li-s"
        },
        "content": " * outside of the UntagCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "li-s"
        },
        "content": " * same path through the UntagCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "li-s"
        },
        "content": "public class UntagCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "li-s"
        },
        "content": "    private UntagCommandParser parser \u003d new UntagCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_validArgs_returnsUntagCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "li-s"
        },
        "content": "        TagName validTagName \u003d new TagName(VALID_NAME_CS2103);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_CS2103, new UntagCommand(validTagName));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "li-s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "li-s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "li-s"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "li-s"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "li-s"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "li-s"
        },
        "content": "        // missing tag name prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CS2103,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "li-s"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "li-s"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UntagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "li-s": 24,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void resetData_withDuplicateTags_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        List\u003cTag\u003e newPersons \u003d Arrays.asList(CS2103, editedCS2103);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasTag(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(addressBook.hasTag(CS2103));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        addressBook.addTag(CS2103);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(addressBook.hasTag(CS2103));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        addressBook.addTag(CS2103);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(addressBook.hasTag(editedCS2103));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getTagList().remove(0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBookStub(Collection\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 9,
      "HynRidge": 19,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TAGS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTag(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(modelManager.hasTag(CS2103));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void hasTag_tagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        modelManager.addTag(CS2103);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(modelManager.hasTag(CS2103));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void getFilteredTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTagList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withTag(CS2103).withTag(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        String[] keywords \u003d CS2103.getTagName().tagName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        modelManager.updateFilteredTagList(new TagNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        modelManager.updateFilteredTagList(PREDICATE_SHOW_ALL_TAGS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 6,
      "HynRidge": 11,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FileAddress(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FileAddress(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void isValidFileAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileAddress.isValidFileAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(FileAddress.isValidFileAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(FileAddress.isValidFileAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"d:\\\\a\\\\b\\\\abc.txt\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress(\"d:\\\\a\\\\b\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(FileAddress.isValidFileAddress("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                \"a:\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g.exe\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 11,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TagName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TagName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TagName.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(TagName.isValidTagName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(TagName.isValidTagName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 14,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagNameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate secondPredicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate firstPredicateCopy \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void test_tagNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        TagNameContainsKeywordsPredicate predicate \u003d new TagNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"Alice\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        // Keywords match phone and address, but does not match name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        predicate \u003d new TagNameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"Alice\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                .withFileAddress(\"c:\\\\a\\\\b\\\\alice.txt\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagNameEqualsKeywordPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "public class TagNameEqualsKeywordPredicateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName firstPredicateTagName \u003d new TagName(\"first\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagName secondPredicateTagName \u003d new TagName(\"second\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate firstPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                firstPredicateTagName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate secondPredicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                secondPredicateTagName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate firstPredicateCopy \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                firstPredicateTagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void test_nameEqualsKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate predicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new TagName(\"first\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(predicate.test(new TagBuilder().withTagName(\"first\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public void test_tagNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        TagNameEqualsKeywordPredicate predicate \u003d new TagNameEqualsKeywordPredicate("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "                new TagName(\"first\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(predicate.test(new TagBuilder().withTagName(\"second\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueTagListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TagBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class UniqueTagListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private final UniqueTagList uniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_tagNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertFalse(uniqueTagList.contains(CS2103));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_tagInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(uniqueTagList.contains(CS2103));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void contains_tagWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertTrue(uniqueTagList.contains(editedCS2103));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void add_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.add(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void add_duplicateTag_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.add(CS2103));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_nullTargetTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTag(null, CS2103));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_nullEditedTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTag(CS2103, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_targetTagNotInList_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueTagList.setTag(CS2103, CS2103));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagIsSameTag_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.setTag(CS2103, CS2103);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        expectedUniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagHasSameIdentity_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        Tag editedCS2103 \u003d new TagBuilder(CS2103).withFileAddress(VALID_FILE_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.setTag(CS2103, editedCS2103);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        expectedUniqueTagList.add(editedCS2103);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.setTag(CS2103, BOB);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedUniqueTagList.add(BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_editedTagHasNonUniqueIdentity_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        uniqueTagList.add(BOB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.setTag(CS2103, BOB));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.remove(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove_tagDoesNotExist_throwsTagNotFoundException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        assertThrows(TagNotFoundException.class, () -\u003e uniqueTagList.remove(CS2103));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void remove_existingTag_removesTag() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.remove(CS2103);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_nullUniqueTagList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTags((UniqueTagList) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTag_uniqueTagList_replacesOwnListWithProvidedUniqueTagList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedUniqueTagList.add(BOB);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        uniqueTagList.setTags(expectedUniqueTagList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTagList.setTags((List\u003cTag\u003e) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        uniqueTagList.add(CS2103);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        List\u003cTag\u003e tagList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        uniqueTagList.setTags(tagList);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        expectedUniqueTagList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void setTags_listWithDuplicateTags_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        List\u003cTag\u003e listWithDuplicateTags \u003d Arrays.asList(CS2103, CS2103);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(DuplicateTagException.class, () -\u003e uniqueTagList.setTags(listWithDuplicateTags));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            -\u003e uniqueTagList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 29,
      "HynRidge": 55,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTag.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class JsonAdaptedTagTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String INVALID_FILE_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_TAG_NAME \u003d BENSON.getTagName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final String VALID_FILE_ADDRESS \u003d BENSON.getFileAddress().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_validTagDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonAdaptedTag person \u003d new JsonAdaptedTag(BENSON);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonAdaptedTag person \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new JsonAdaptedTag(INVALID_NAME, VALID_FILE_ADDRESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d TagName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonAdaptedTag person \u003d new JsonAdaptedTag(null, VALID_FILE_ADDRESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TagName.class.getSimpleName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonAdaptedTag person \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "                new JsonAdaptedTag(VALID_TAG_NAME, INVALID_FILE_ADDRESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d FileAddress.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonAdaptedTag person \u003d new JsonAdaptedTag(VALID_TAG_NAME, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, FileAddress.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "import static seedu.address.testutil.TypicalTags.CS2103;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void readAddressBook_invalidTagAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void readAddressBook_invalidAndValidTagAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        original.addTag(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        original.removeTag(CS2103);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        original.addTag(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Anthony6401": 2,
      "HynRidge": 7,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.testutil.TypicalTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final Path TYPICAL_TAGS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final Path INVALID_TAG_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private static final Path DUPLICATE_TAG_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // TODO update json to match typical tags after typical tags are confirmed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_typicalTagsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TAGS_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalTags.getTypicalAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TAG_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public void toModelType_duplicateTags_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TAG_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_TAG,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3,
      "HynRidge": 12,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Adds a new {@code Tag} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public AddressBookBuilder withTag(Tag tag) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        addressBook.addTag(tag);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TagBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.FileAddress;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.TagName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * A utility class to help with building Tag objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String DEFAULT_TAG_NAME \u003d \"testTag\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final String DEFAULT_FILE_ADDRESS \u003d \"./src/test/java/seedu/address/testutil/testFile.bat\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private TagName tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private FileAddress fileAddress;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Creates a {@code TagBuilder} with the default details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagName \u003d new TagName(DEFAULT_TAG_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fileAddress \u003d new FileAddress(DEFAULT_FILE_ADDRESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Initializes the TagBuilder with the data of {@code tagToCopy}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder(Tag tagToCopy) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        tagName \u003d tagToCopy.getTagName();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        fileAddress \u003d tagToCopy.getFileAddress();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets the {@code Name} of the {@code Tag} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder withTagName(String tagName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.tagName \u003d new TagName(tagName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Sets the {@code FileAddress} of the {@code Tag} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public TagBuilder withFileAddress(String fileAddress) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        this.fileAddress \u003d new FileAddress(fileAddress);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public Tag build() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return new Tag(tagName, fileAddress);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 2,
      "HynRidge": 23,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TagUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "luo-git"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * A utility class for Tag."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TagUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns an add command string for adding the {@code tag}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static String getTagCommand(Tag tag) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "luo-git"
        },
        "content": "        return TagCommand.COMMAND_WORD + \" \" + getTagDetails(tag);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "     * Returns the part of command string for the given {@code tag}\u0027s details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static String getTagDetails(Tag tag) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        sb.append(PREFIX_TAG_NAME + tag.getTagName().tagName + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        sb.append(PREFIX_FILE_ADDRESS + tag.getFileAddress().value + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3,
      "HynRidge": 10,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTagList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTagList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static Tag getTag(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        return model.getFilteredTagList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 5,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Index INDEX_FIRST_TAG \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Index INDEX_SECOND_TAG \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Index INDEX_THIRD_TAG \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HynRidge": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTags.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HynRidge"
        },
        "content": " * A utility class containing a list of {@code Tag} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "public class TypicalTags {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    // TODO These tags could be updated with more descriptive tag names."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "    public static final Tag CS2103 \u003d new TagBuilder().withTagName(\"cs2103\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            .withFileAddress(\"./src/test/java/seedu/address/testutil/cs2103.bat\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "luo-git"
        },
        "content": "    public static final Tag CS2101 \u003d new TagBuilder().withTagName(\"cs2101\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luo-git"
        },
        "content": "            .withFileAddress(\"./src/test/java/seedu/address/testutil/cs2101.bat\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag BENSON \u003d new TagBuilder().withTagName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\benson.txt\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HynRidge"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag CARL \u003d new TagBuilder().withTagName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\carl.txt\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag DANIEL \u003d new TagBuilder().withTagName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\daniel.txt\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag ELLE \u003d new TagBuilder().withTagName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\elle.txt\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag FIONA \u003d new TagBuilder().withTagName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\fiona.txt\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag GEORGE \u003d new TagBuilder().withTagName(\"George Best\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\george.txt\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag HOON \u003d new TagBuilder().withTagName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\hoon.txt\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag IDA \u003d new TagBuilder().withTagName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(\"c:\\\\a\\\\b\\\\ida.txt\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    // Manually added - Tag\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag AMY \u003d new TagBuilder().withTagName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(VALID_FILE_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static final Tag BOB \u003d new TagBuilder().withTagName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            .withFileAddress(VALID_FILE_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    private TypicalTags() {} // prevents instantiation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "        for (Tag tag : getTypicalTags()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "            ab.addTag(tag);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "HynRidge"
        },
        "content": "    public static List\u003cTag\u003e getTypicalTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Anthony6401"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "luo-git": 5,
      "Anthony6401": 2,
      "HynRidge": 34,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2101.bat",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "title File Open Test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2101 file has been opened!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "timeout 3"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2101.sh",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2101 file has been opened!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "wait 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2103.bat",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "title File Open Test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2103 file has been opened!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "timeout 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/cs2103.sh",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo CS2103 file has been opened!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "wait 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/testFile.bat",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "@echo off"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "title File Open Test"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo Test file has been opened!"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "luo-git"
        },
        "content": "timeout 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/testFile.sh",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "luo-git"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "luo-git"
        },
        "content": "echo Test file has been opened!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "luo-git"
        },
        "content": "wait 5"
      }
    ],
    "authorContributionMap": {
      "luo-git": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "import seedu.address.OldMainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Ma-Yueran"
        },
        "content": "        URL testFileUrl \u003d OldMainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Ma-Yueran": 2,
      "-": 112
    }
  }
]
