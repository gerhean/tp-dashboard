[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T10-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T10-1/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-1/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "# Momentum"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Momentum is a project management application targeted at freelancers to help them better understand their time usage."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Users can keep track of multiple projects in the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Within each project, users can schedule tasks to be done for it."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Users can see statistics on how much time they are spending on each task, as well as each project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "To learn more about Momentum, see the **[Momentum Product Website](https://ay2021s1-cs2103t-t10-1.github.io/tp/)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Acknowledgments"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 3,
      "khoodehui": 9,
      "-": 4
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "mainClassName \u003d \u0027seedu.momentum.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    archiveName \u003d \u0027projectbook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "khoodehui": 4,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Balasubramaniam Praveen"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/pr4aveen.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/pr4aveen)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Functionality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Cheong Ying Yi Clara"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/claracheong4.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/claracheong4)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Testing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Farrell Nah Jun Hao"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cimg src\u003d\"images/boundtotheearth.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/boundtotheearth)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Integration"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Functionality"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Kang Su Min"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/kkangs0226.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](https://github.com/kkangs0226)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Documentation and Code Quality"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Responsibilities: Functionality and Documentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Khoo De Hui"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cimg src\u003d\"images/khoodehui.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "[[github](http://github.com/khoodehui)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Role: Team Lead, Scheduling and Tracking"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 1,
      "khoodehui": 23,
      "-": 31
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  {:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The **_Architecture Diagram_** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ProjectListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "1. `Logic` uses the `ProjectBookParser` class to parse the user command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a project)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* stores the project book data."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cProject\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `ProjectBook`, which `Project` references. This allows `ProjectBook` to only require one `Tag` object per unique `Tag`, instead of each `Project` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* can save the project book data in json format and read it back."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Classes used by multiple components are in the `seedu.momentum.commons` package."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "### Immutability"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "`Projects`, `Timers`, and `WorkDurations` are immutable. This means that anytime a project\u0027s details are changed, a new"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " object is created with the new details, and the model is updated with the new object."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Notable examples include:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Starting/Stopping a Timer: A new object is created with the updated timerWrapper state and durations,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Editing a Project: A new object is created with the new project\u0027s details, with the same timerWrapper and durations recorded."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Below is an example of what happens when a project\u0027s timerWrapper is stopped:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "![StopTimerSequenceDiagram](images/StopTimerSequenceDiagram.png)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "In this case, since the project\u0027s timerWrapper is being changed, new `TimerWrapper`, `WorkDuration`, `UniqueDurationList` objects are"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " created, which are then used to create a new `Project`, which is subsequently used to replace the old `Project` in"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  the model."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "We chose to implement projects this way as immutability makes these classes more easily testable."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "### Timers and Durations"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The time tracking features in Momentum are implemented using `TimerWrapper` and `WorkDuration` objects. The below diagram"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " illustrates the relevant classes that work together to produce statistics"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " ![StopTimerSequenceDiagram](images/TimerDurationClassDiagram.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Each project has a `TimerWrapper` that can be started and stopped by the user (using the `start`/`stop` commands). The timerWrapper"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " does not run actively (counting each second/millisecond), instead it records the time when it was started, and the time"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  when it was stopped. "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "This implementation was chosen because it allows Momentum\u0027s timers to continue running even when the application is"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "closed, bye saving the timerWrapper\u0027s start/stop times together with project data. We chose to give each `Project` its own"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " timerWrapper as that allows Momentum to support running multiple timers concurrently, one for each project, for users that"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  want to multi-task."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "A `WorkDuration` represents a period of time that the user spent working on a project. Each `Project` contains a list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " of `WorkDuration` that represents each time the each the user starts and stops the timerWrapper for the project."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "We chose to do this implementation to allow for flexibility in calculating statistics"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### Deadlines"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The deadline of a project and tasks is implemented using `DateWrapper` and `TimeWrapper`. The `dateWrapper` and `timeWrapper` is stored as `Optional\u003cDateWrapper\u003e` and `Optional\u003cTimeWrapper\u003e`in the `Deadline` class."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Since both date and time is optional in the class, a deadline is empty when both `dateWrapper` and `timeWrapper` is empty. An empty deadline can be created easily without `Project` needing to know whether it has a deadline. This design was chosen due to the ease of implementation. Another reason is because no dummy data will be required. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "An alternative design is to store date and time in a `DateTimeWrapper` with dummy date and time if the date or time is not present as `LocalDateTime` requires both date and time. However, extra checks will have to be done to differentiate between dummy and actual data."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The date and time of a deadline of a project is parsed separately. This design is chosen as date and time is stored separately and the format of date and time can be more flexible."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "An alternative design is to parse both date and time together. This is harder to implement as date and time is stored separately in deadline. This design would also restrict the format of the date and time."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The deadline also has a constraint that is has to beon or after the created date. This constraint has been added to prevent the occurences of any bug due to offset with date and times."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "As a result, the deadline has to be aware of the created date when created. The constructor of `Deadline` accepts a created date. For `EditCommand`, a descriptor containing edited fields is created directly from parsing the user input in `EditCommandParser`, hence the created date is unknown. A dummy date using `LocalDate.EPOCH` is passed into the constructor of `Deadline` in `EditCommandParser` to allow creation of the deadline. The check that deadline has to be on or after the created date is done in `EditCommand` after the creation date of the project to be edited is known."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### Reminders"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The reminder of a task is implemented using `ReminderManager` and `Reminder`. The date and time of a reminder is stored in `Reminder`. `ReminderManager` schedules the reminder using `Timer` and runs the reminder using `Platform.runLater`. "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "An alternative would be to schedule and run the reminder in `Reminder` class directly. This design was not chosen as that `Reminder` would have to contain references to both `Model` and `ProjectBook`, which is undesired."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "`ReminderManager` contains a reference to a `ProjectBook` so that the projects and tasks can be iterated and the reminders of the projects can be modified. `ReminderManager` makes use of callback functions such as `rescheduleReminder(ReminderManager reminderManager)` to iterate through the project, which in turns calls `rescheduleReminder(Project project)` in `ReminderManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "`ReminderManager` has an inner class `ReminderTimerTask` which implements `TimerTask` that is used to schedule a reminder with `Timer`. This design was chosen as `ReminderTimerTask` references non-static methods of `ReminderMananger` as well as `ProjectBook`, which is also referenced in `ReminderManager`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "An alternative implementation is to implement `ReminderTimerTask` as a separate class. With this implementation, `ReminderTimerTask` will have to contain extra references such as `ReminderManager` and `ProjectBook`."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The result of the reminder is stored as a `StringProperty` and retrieved from the `Model` so that a listener can be used in `MainWindow` to detect changes and update the GUI acccordingly. This design was chosen due to the ease of implementation. "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "`BooleanProperty` is also stored to keep track of whether there are any reminders so that `MainWindow` can detect whether there are reminders and hide or show the reminder panel accordingly. This design was also chosen due to the ease of implementation."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Whenever a project is added, edited or removed, the reminders needs to be adjusted accordingly. The chosen implementations is to reschedule all the reminders. "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "An alternative would be to only reschedule projects that are affected by the change. This design was not chosen as it is more complicated and would increase the coupling between `ReminderManager` and other related classes."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "### Statistics"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Statistics in Momentum are implemented using a Command design pattern, similar to how Commands are implemented. A"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " `StatisticManager` contains all the `Statistic` objects and is responsible for updating each `Statistic` whenever"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  the model is changed."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " Each `Statistic` exposes a `calculate(Model model)` method that is called by the `StatisticManager` to calculate or"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  update the data with the information in the model. The method contains instructions on how that particular"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "   statistic is calculated. "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "   "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "For example, the `PeriodicTotalTimeStatistic` calculates the amount of time the user"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "spends on each project for some period of time, and is calculated by looking at each project in the model and"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " summing up all the `WorkDuration` for the given period."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "The statistics data is stored in each `Statistic` object as one or more `StatisticEntry` objects. A `StatisticEntry"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "` represents a unit statistics data, which contains a `label` describing the data and the data\u0027s `value`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Here is a sequence diagram to demonstrate how the statistics for time spent per project (weekly) is calculated and"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " how the data is retrieved."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "![StatsSequenceDiagram](images/StatsSequenceDiagram.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "### Managing Time"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Time is managed by a `Clock` class. This class has 3 modes that allow for it to perform different functions:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "1. Normal: The normal system time is returned."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "2. Fixed: The same, preset time is always returned. Used for testing purposes."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "3. Manual: The passage of time can be manually controlled, such as fast-forwarding and rewinding time by specific"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " amounts. Used for testing purposes."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "The `Clock` class acts as a consistent, single course of the \u0027current time\u0027 within the application, and provides the"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " option to manually set and control the current time for testing purposes. Objects that need to know the current time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  must obtain it from `Clock`."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "This implementation was chosen because it allows all time-related features to be more easily testable."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Rejected Implementation: Using `LocalDateTime.now()` directly"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "This implementation was considered but ultimately rejected as it introduced several problems in testing time-realted"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " features. Notable issues are:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * It is impossible to check for equality when getting system time directly using `LocalDateTime.now()` and other"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  similar methods, since time would always progress by a small amount between each call"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * It is difficult to test features that require the passage of time, such as the `start` and `stop` commands as we"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  would need to actually wait an amount of time during the tests."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedProjectBook`. It extends `ProjectBook` with an undo/redo history, stored internally as an `projectBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* `VersionedProjectBook#commit()` — Saves the current project book state in its history."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* `VersionedProjectBook#undo()` — Restores the previous project book state from its history."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* `VersionedProjectBook#redo()` — Restores a previously undone project book state from its history."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitProjectBook()`, `Model#undoProjectBook()` and `Model#redoProjectBook()` respectively."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedProjectBook` will be initialized with the initial project book state, and the `currentStatePointer` pointing to that single project book state."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th project in the project book. The `delete` command calls `Model#commitProjectBook()`, causing the modified state of the project book after the `delete 5` command executes to be saved in the `projectBookStateList`, and the `currentStatePointer` is shifted to the newly inserted project book state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new project. The `add` command also calls `Model#commitProjectBook()`, causing another modified project book state to be saved into the `projectBookStateList`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e If a command fails its execution, it will not call `Model#commitProjectBook()`, so the project book state will not be saved into the `projectBookStateList`."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 4. The user now decides that adding the project was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoProjectBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous project book state, and restores the project book to that state."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e If the `currentStatePointer` is at index 0, pointing to the initial ProjectBook state, then there are no previous ProjectBook states to restore. The `undo` command uses `Model#canUndoProjectBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoProjectBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the project book to that state."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e If the `currentStatePointer` is at index `projectBookStateList.size() - 1`, pointing to the latest project book state, then there are no undone ProjectBook states to restore. The `redo` command uses `Model#canRedoProjectBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the project book, such as `list`, will usually not call `Model#commitProjectBook()`, `Model#undoProjectBook()` or `Model#redoProjectBook()`. Thus, the `projectBookStateList` remains unchanged."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitProjectBook()`. Since the `currentStatePointer` is not pointing at the end of the `projectBookStateList`, all project book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire project book."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the project being deleted)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Freelancers"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Freelancers may take on multiple projects simultaneously, so they need to manage and track the time they spend on each project."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Freelancers want to know how much time they spend on a project in order to accurately bill their clients and set future rates."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Freelancers might want to know more about how they distribute their time and track the time spent on each project so that they can better understand their working style, and plan their time more efficiently."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Time tracking app"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Dashboard view for freelancer to get an overview of all projects"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Multiple groups to represent different categories to help in grouping of tasks such as freelance projects."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Predefined groups that are commonly used for freelancers, such as projects and self-learning/improvement"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Timer to track the duration of a task or Indicate start time and end time for a task, so that the user can price their rates and charge clients more accurately."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Reminder to start doing a task (only when application is open)."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Users can generate reports of time usage after a week/any specified duration to understand their work style better and optimise their time usage so that they can plan their time better."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Users can also generate reports of their income over a period of time from various freelance projects"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * Interesting/creative views for visualizing the reports/data."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                     | I want to …​                         | So that I can…​                                                         |"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| -------- | ------------------------------------------- | ------------------------------------ | ----------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "| `* * *`  | new user                                    | see usage instructions               | refer to instructions when I forget how to use the App                  |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "| `* * *`  | user                                        | add a new project                    |                                                                         |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* * *`  | user                                        | view the project creation date                    |  "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* * *`  | user                                        | view the project completion status                    |  |"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* * *`  | user                                        | add and edit a deadline for a project                    |                                                                         |"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* * *`  | user                                        | add and edit a reminder for a project                    |                                                                         |"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "| `* * *`  | user                                        | delete a project                     | remove entries that I no longer need                                    |"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "| `* * *`  | user                                        | find a project by name               | locate details of projects without having to go through the entire list |"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `*`      | user with many projects in the project book | sort projects by name                | locate a project easily                                                 |"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "| `* *`    | new user                                    | start and stop a timerWrapper for a project | track the time I spent on the project                                   |"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "| `* *`    | user                                        | see the amount of time I spend on each project | gain insights on how I am using my time |"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "(For all use cases below, the **System** is the `Momentum` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Use case: Start and End a Timer**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "1.  User requests to start a timerWrapper for a specific project in the list."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "2.  Momemtum starts the timerWrapper for the project."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "3.  User requests to end a timerWrapper for a specific project in the list."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "4.  Momemtum ends the timerWrapper for the project."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "(For all use cases below, the **System** is the `ProjectBook` and the **Actor** is the `user`, unless specified"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " otherwise)."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* 2a. There is an existing timerWrapper for the given project id."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  "
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  * a1. Momentum shows an error message."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* 3a. There is no ongoing timerWrapper for the given project id."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  "
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * a1. Momentum shows an error message."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* *a. The given project id is invalid."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * a1. Momentum shows an error message."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "**Use case: Delete a project**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1.  User requests to list projects"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "2.  ProjectBook shows a list of projects"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "3.  User requests to delete a specific project in the list"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "4.  ProjectBook deletes the project"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* 3a. The given project id is invalid."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  * a1. Momentum  shows an error message."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "2.  Should be able to hold up to 1000 projects without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "4.  "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* **Command Line Interface(CLI)**: Command Line Interface processes commands in the form of text"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "---"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: \u003cstrong\u003eNote:\u003c/strong\u003e These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "### Deleting a project"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1. Deleting a project while all projects are being shown"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "   1. Prerequisites: List all projects using the `list` command. Multiple projects in the list."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "      Expected: No project is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 80,
      "pr4aveen": 12,
      "claracheong4": 128,
      "-": 294
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   1. Run the `seedu.momentum.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [Momentum’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 53
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Momentum is a **desktop app** that **helps freelancers track time spent on different projects** and **gain insights on how their time is spent**. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "It is designed for people that prefer typing, so that frequent tasks can be done faster by typing in commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "*include purpose of the document* e.g. this user guide contains all the commands you need to be able to use the product effectively"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "*terminology used*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Table of Content"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c!-- # Table of contents"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "[1. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [2. Features](#2-Features)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "[3. Projects and Tasks](#3-Projects-and-Tasks)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.1. View Projects: home](#31-View-Projects-home)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp; [3.2. Viewing a Project’s Tasks: view](#view)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;[3.3. Creating a Project/Task: add](#add)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.4. Editing a Project/Task: edit](#edit)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.5. Deleting a Project/Task: delete](#delete)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.6. Project/Task Organisation](#organisation)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.7. Time Tracking](#time-tracking)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.8. Undo/Redo](#undoredo)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.9. Statistics](#statistics)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.10. Settings](#settings)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.11. Clear All Projects/Tasks: clear](#clear)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.12. Show and Hide SideBar Components : show](#show)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [3.13. Exiting the Program : exit](exit)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "[4. FAQ](#Faq)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "[5. Glossary](#Glossary)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    [5.1. Date and Time Terms](#datetime)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "[6. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " --\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "## 1. Quick Start\u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "2. Download the latest `momentum.jar` from [here](https://github.com/se-edu/addressbook-level3/releases)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "3. Copy the file to the folder you want to use as the _home folder_ for Momentum."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "4. Double-click the file to start Momentum. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`add`**`n/Momentum d/CS2103T Team Project` : Adds a project named `Momentum` to the Project Book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`edit`**`3 n/NewMomentum d/newDescription` : Update the 3rd project in the current list. The name will be changed to “NewMomentum” and the description will be changed to “NewDescription”."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "   * **`find`**`n/NewMomentum` : Find a project that has `NewMomentum` in its name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`delete`**`3` : Deletes the 3rd project shown in the current list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "   * **`sort`**`type/deadline order/asc` : Sorts the list of projects by deadline in ascending order."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "   "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "   * **`undo`** : Undoes the previous command (Sort command is revoked)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "## Command Format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Below is an explanation of the formatting used to show commands:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Items in square brackets are optional."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Items with `…` inside square brackets `[t/TAG [MORE_TAGS]...]` can take in multiple space separated arguments"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  e.g. `[[t/TAG [MORE_TAGS]...]` can represent `t/friend friend family` "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* Parameters can be in any order."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "## Date and Time Terms"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Dates and Times are an integral part of Momentum, and you will typing dates and times regularly. Here is a guide to the format for entering dates and times in Momentum."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "### Date Terms"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Dates should be entered in the order `YYYY-MM-DD`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Term | Meaning | Example"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "-----|-------- | -------"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "`YYYY` | Year    | 2020"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "`MM`   | Month   | 02"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "`SS`   | Day     | 09"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "**Valid**: 2020-08-02 "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**Invalid**: 2-8-20: Wrong number of digits."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**Invalid**: 02-08-20: Wrong order of year, month and date."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**Invalid**: 2nd August 2020: You cannot use text to enter dates."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "### Time Terms"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Times should be entered in 24 hour format, in the order `HH:MM:SS`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Term | Meaning | Example"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "-----|-------- | -------"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "HH   | Hour    | 16"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "MM   | Minute  | 52"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "SS   | Second  | 03"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**Valid**: 15-08-02 "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**Invalid**: 2-8-20: Wrong number of digits."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**Invalid**: 02-08-20: Wrong order of year, month and date."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**Invalid**: 2nd August 2020: You cannot use text to enter dates."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "## 2. Features\u003ca name\u003d\"2-Features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "\u003c!-- ### Viewing help : `help`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a message explaning how to access the help page."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `help` --\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "## 3. Projects and Tasks\u003ca name\u003d\"3-Projects-and-Tasks\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "You can add projects into Momentum to be tracked. Each project has the following information:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Description"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Completion Status"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Deadline Date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Deadline Time"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Reminder"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Tag"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Apart from the name, all other information is optional."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Each project can also contain several tasks, each with the same information as a project."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "When you first open Momentum, you will see all the projects being tracked in Momentum. You can then view the tasks for each project seperately."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**:information_source: Most commands in Momentum will do different things depending on whether you are viewing projects or tasks.**\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Please refer to each command for these differences."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":::"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "### 3.1 View Projects: `home`\u003ca name\u003d\"#31-View-Projects-home\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "View all the projects being tracked by Momentum."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "This is the default view when Momentum is first opened."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `home`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "### 3.2 Viewing a Project\u0027s Tasks: `view`\u003ca name\u003d\"#32-Viewing-a-Project\u0027s-Tasks-view\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "View the tasks for a project."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `view ID`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `view 1`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "### 3.3 Creating a Project/Task: `add`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "When looking at projects, this command will create a new project. When looking at the tasks in a project, thsi command will create a new task for the project."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `add n/NAME [d/DESCRIPTION] [c/] [dd/DEADLINE_DATE] [dt/DEADLINE_TIME] [r/REMINDER_DATE_TIME] [t/TAG]`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The project is incomplete by default, adding `/c` will set the completion status to complete. "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The format for date of the deadline is YYYY-MM-DD, refer to [Date Terms](#Date-Terms) for more information on YYYY, MM and DD."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The format for time of the deadline is HH:MM:SS in 24 hour format, refer to [Time Terms](#Time-Terms) for more information on HH, MM and SS."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The date of the deadline cannot be earlier than the creation date of the project."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Both date and time is compulsory for a reminder."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The format for date and time of the reminder is YYYY-MM-DDTHH:MM:SS, refer to [Date and Time Terms](#Date-and-Time-Terms) for more information on YYYY, MM, DD, HH, MM, and SS. "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The date and time of the reminder needs to be later than the current time."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Projects and tasks can have any number of tags (including 0)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* A deadline of a project can include time."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* A project can have an empty description."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* `T` separates the date and time in a reminder."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* A reminder will be shown in the Reminder component of the sidebar at the date and time specified."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The reminder will be removed after it is shown in the sidebar."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":::"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `add n/Momentum d/CS2103T Team Project dd/2020-12-07 dt/11:01:12 r/2020-12-07:11:01:12 t/impt`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: Creates a project named “Momentum” with a description “CS2103T Team Project”, a tag \"impt\", deadline date \"2020-10-07\" with deadline time \"11:01:12\" and reminder \"2020-10-07T11:01:12\"."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "### 3.4 Editing a Project/Task: `edit`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Edits a project or task that was been previously created."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `edit ID [n/NAME] [d/DESCRIPTION] [c/] [dd/DEADLINE_DATE [dt/DEADLINE_TIME]] [t/TAG]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The id refers to the id number shown in the displayed list."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Adding `/c` will reverse the completion status, if the project was incomplete the completion status will change to complete. "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The format for date of the deadline is YYYY-MM-DD, refer to [Date Terms](#Date-Terms) for more information on YYYY, MM and DD."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The format for time of the deadline is HH:MM:SS in 24 hour format, refer to [Time Terms](#Time-Terms) for more information on HH, MM and SS."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The date of the deadline cannot be earlier than the creation date of the project."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Both date and time is compulsory for a reminder."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The format for date and time of the reminder is YYYY-MM-DDTHH:MM:SS, refer to [Date and Time Terms](#Date-and-Time-Terms) for more information on YYYY, MM, DD, HH, MM, and SS. "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The date and time of the reminder needs to be later than the current time."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Removing a description or deadline by typing `d/` or `dd/` without specifying anything after it."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* When editing tags, the existing tags of the project will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* You can remove all the project’s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `project 3 n/NewMomentum d/NewDescription dd/2020-12-07 t/normal`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: Updates the project with id 3. The name will be changed to “NewMomentum”, the description will be changed to “NewDescription”, all the tags will be removed and a tag named normal is added, and the deadline will be changed to \"2020-12-07\"."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "### 3.5 Deleting a Project/Task: `delete`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Deletes a project or task in the list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `delete ID`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Deletes the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `delete 2`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: Deletes the second project in the list."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "### 3.6 Project/Task Organisation"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "#### 3.6.1 View All Projects : `list`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "When viewing projects, this command shows a list of all projects in Momentum."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "When viewing a project\u0027s tasks, this command shows a list of all the tasks for the project."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "#### 3.6.2 Sort Projects : `sort`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Sorts the list of displayed projects or tasks in the application."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `sort [type/SORT_TYPE] [order/SORT_ORDER] [c/]`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* There are 3 types of sort."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `type/alpha` will sort the list of projects in alphabetical order."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `type/deadline` will sort the list of projects according to their deadlines."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `type/created` will sort the list of projects according to their date of creation."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* There are 2 sort orders."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `order/asc` will sort the list of projects in ascending order."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * `order/dsc` will sort the list of projects in descending order."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* The projects can be sorted by incomplete then completed."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * This is the default sort."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    * Add `c/` to disable this and sort without taking into account of completion status."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "   "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* `type/alpha` and `order/asc` will be used as default if both sort type and order are not specified (i.e. command is `sort`)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Current sort type will be used if the `type` is not specified but `order` is specified."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* `order/asc` will be used as default if the `order` is not specified but `type` is specified."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* For `sort type/deadline`, projects without deadlines will be ordered alphabetically after the ordered list of projects with deadlines."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* For both `sort type/deadline` and `sort type/created`, projects with same deadline or same created date will be sorted alphabetically."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ":::"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "The following are 3 projects in the project book."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Project 1. Name: `Ant Hole`, Deadline: `2020-02-02`, Created Date: `2000-02-02`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Project 2. Name: `Brunch`, Deadline: `2010-01-01`, Created Date: `2002-09-09`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Project 3. Name: `Create Logo` , Deadline: `2040-04-04`, Created Date: `2001-01-01`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "**3.6.2.3 Sorting by Default order**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `sort`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Sorts projects in alphabetical, ascending order"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Result: [Project 1, Project 2, Project 3]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "##### Sorting With Only Type Specified "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Format: `sort type/SORT_TYPE`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Sorts projects in a specified order"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "* Since order is not specified, default order is ascending"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "Example: `sort type/alpha`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 1, Project 2, Project 3]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example: `sort type/deadline`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 2, Project 1, Project 3]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example: `sort type/created`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 1, Project 3, Project 2]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "#### Sorting With Only Order Specified "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Format: `sort order/SORT_ORDER`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Sorts projects in current project order."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* If there is no existing project order (when the application restarts), order will be alphabetical by default."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example: `sort order/dsc` (After application restarts for the first time)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 3, Project 2, Project 1]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example `sort order/asc` (Current sort type is Deadline)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 2, Project 1, Project 3]"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "#### Sorting With Both Type and Order Specified"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Sorts projects in specified type and order."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Projects that cannot be ordered in a certain type will be ordered alphabetically."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example: `sort type/alpha order/dsc`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 3, Project 2, Project 1]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example: `sort type/deadline order/asc`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 2, Project 1, Project 3]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example: `sort type/created order/dsc`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Result: [Project 2, Project 3, Project 1]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "#### Filtering Projects: `find`"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Searches for projects or tasks in the project book based on certain parameters."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Format: `find [match/FILTER_TYPE] [n/NAME [MORE_NAMES]...] [d/DESCRIPTION [MORE_DESCRIPTIONS]...] [t/TAG [MORE_TAGS]...] [c/COMPLETION_STATUS]`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* There are two values for the `match` command."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `match/all` requires **all** parameters to match their respective entries in the project for it to be shown."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `match/any` shows the project as long as any parameter matches the user\u0027s input."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "You can only search for projects in the project view and tasks in the tasks view"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "`match/any` will be used if the `match` type is not specified."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "If there are 3 projects in the project book:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "1. Name: `Create Logo` , Description: `Make logo for startup XYZ`, Tags: `Design`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "2. Name: `Write Song`, Description: `80s rock music, three minutes`, Tags: `Music`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "3. Name: `Write Article`, Description: `Write and article about why Momentum is the best app out there`, Tags: `Press` and `Writing`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/any n/song article d/startup t/design` will return all three projects. This is because project 1 contains the keyword `startup` in its description and the tag `design`, project 2 contains the keyword `song` in its name and project 3 contains the keyword `article` in its name. "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/all n/song article d/startup t/design` will not return any project as there is no project with `song` **and** `article` in its name **and** the `startup` in its description and the tag `design`."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/any n/write d/rock` will return projects 2 and 3. This is because project 2 contains `write` in its name and `rock` in its description. Project 3 also contains the word `write` in its name."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* `find match/all n/write d/rock` will only return project 2. This is because project 2 is the only project that contains both `write` in its name and `rock` in its description. "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "##### Searching by name: "
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* The `n/` command checks whether a project has a certain name. There can be multiple names added to this command. For example, `n/car window` will check for the projects that contain `car` or `window` in their names."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Searching by name only requires a partial match. This means that a project with the name `carpet` and `car` can potentially be the result of searching for the term `car`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "##### Searching by description: "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* The `d/` command checks whether a project has a certain description. There can be multiple descriptions added to this command. For example, `d/sunday october` will check for the projects that contain `sunday` or `october` in their description."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Searching by description only requires a partial match, similar to searching by name."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "##### Searching by tag: "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* The `t/` command checks whether a project has a certain tag. There can be multiple tags added to this command. For example, `t/freelance errands` will check for the projects that contain the tags `freelance` or `errands`."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* Searching by tags will require a full word match unlike searching by name or description. This means that searching for the tag `free` will not find a project with the tag `freelance`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Searches for tags require a full match whilst searches partial matches are sufficient for searches by name and description."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "#### Searching by Completion Status"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* There are keywords, completed and incomplete for`c/KEYWORD`. Other keywords are not accepted."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* The `c/` command checks whether a project is completed. For example, `t/completed` will check for the projects that are completed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "* When `c/` is not specified, both complete and incomplete projects will be shown."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "If a certain search type is used more than once, the latest entry will be used."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "`find n/a n/b n/c` will only search for projets/task that contain`c` in their name."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ":::"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "## Time Tracking"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "You can track the time you spend working on a project by starting a timer when you start working, and then stopping the timer once you finish."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Momentum remembers each timer that you start/stop and uses this information to calculate statistics."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Starting a Timer for a Project: `start`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Format: `/start PROJECT_ID`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Starts a timer for the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Only 1 timer can be running for a project at any time."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "You can run timers for more than one project concurrently, if you are multi-tasking."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Example: `/start 2`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Result: Starts a timer for the second project in the list."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Stopping a Timer for a Project: `stop`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Format: `/stop PROJECT_ID`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Stops a running timer for the project at the specified `PROJECT_ID`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* A timer can only be stopped if there is one already running."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* The id refers to the id number shown in the displayed project list."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* The id **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Example: `/stop 2`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Result: Stops the timer for the second project in the list."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Undo/Redo"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Undo command undoes previous commmand and redo command redoes previously undone command."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Undoing the Previous Command: `undo`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "The undo command resets the application to the state before previous command was executed."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Format: `/undo`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Example: `start 1`, `undo`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Result: Timer for project/task at index 1 is started, then stopped and removed after undo is executed."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Redoing the Previous Command: `redo`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "The redo command redoes previously undone command and resets the application to the state before the previous undo command."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Format: `/redo`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Example: `sort type/deadline`, `undo`, `redo`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Result: Projects are sorted by deadline, then the application is reset to the sorting order before sort command was executed, then reset back to sort by deadline after redo command."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::info"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":bulb: **Tip:**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Undo/redo feature keeps track of changes in state, and hence will not work on `help` command which does not change the state of the application."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Redo command only works if there the previous command is `undo`."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Statistics"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Statistics are automatically generated and updated whenever projects are "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "added/deleted/changed, and when timers are started/stopped. They can be seen in the bottom left of the window. You do not need to use any additional commands to update or view statistics."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Here are the statistics being tracked by Momentum:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "### Time Spent Per Project"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "This statistic tells you the total amount of time you have spent within a timeframe. By default, the timeframe will be set to weekly. You can change the timeframe through the [settings](#settings)."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Settings"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "You can adjust various settings in Momentum, which for now includes:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* GUI Theme"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Statistic Timeframe"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Format: `set [th/THEME] [st/TIMEFRAME]`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* There are two GUI themes available, light and dark. The commands to apply them are:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    * `th/light`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    * `th/dark`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* There are three available timeframes for statistics, daily, weekly and monthly. The commands to apply them are:"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    * `st/daily`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    * `st/weekly`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    * `st/monthly`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Example: `set th/dark st/daily`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Result: Sets a dark theme to the GUI and changes the statistics pane to show the time spent on projects within the day."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Clear All Projects/Tasks : `clear`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Removes all projects and tasks in Momentum."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::danger"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":warning: **Warning**"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "This will remove **everything** in Momentum, including all saved data."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Show and Hide SideBar Components : `show`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "You can hide or show compoenents in the sidebar."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "The sidebar has four components:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Reminder"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Tags"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Timers"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* Time Spent"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Currently, only the Reminder component is supported."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Format: `show [r/]`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* `r/` would dismiss the reminder by hiding the reminder component."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Example: `show r/`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Result: Hides the Reminder component of the sidebar."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::danger"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":warning: **Warning**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "A reminder that has been dismissed cannot be shown again."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ":::"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Exiting the Program : `exit`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "All project, task and timer data are saved automatically after every command. There is no need to save manually."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "You can find the saved data in the following file in the same location where Momentum is located: `data/projectbook.json`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Result: Exits the program."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Q**: How do I transfer my data to another Computer? \u003cbr\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Momentum home folder."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Term | Meaning"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "-----|--------"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "GUI  | Stands for Graphical User Inferface. It is the interface of the application which you would interact with. "
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "Action | Format | Example"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "--------|-------|-----------"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**View tasks in a project**| `view ID` |`view 3`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**View all projects**| `home` | `home `"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Create new project/task** | `add n/NAME [d/DESCRIPTION] [c/] [dd/DEADLINE_DATE [dt/DEADLINE_TIME]] [r/REMINDER_DATE_TIME] [t/TAG]​`|  `project n/Momentum d/CS2103T Team Project dd/2020-12-07 t/impt`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Edit existing project/task** | `edit ID n/NAME [d/DESCRIPTION] [c/]  [dd/DEADLINE_DATE [dt/DEADLINE_TIME]] [r/REMINDER_DATE_TIME] [t/TAG]`| `edit 3 n/NewMomentum d/NewDescription dl/2020-12-07 r/2020-12-07T01:21:21 t/normal`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Delete a project/task** | `delete ID` | `delete 3`"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Find a project/task** | `find [match/FILTER_TYPE] [n/NAME [MORE_NAMES]...] [d/DESCRIPTION [MORE_DESCRIPTIONS]...] [t/TAG [MORE_TAGS]...]  [c/]`  | `find match/any n/Momentum d/new t/normal`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Show All projects/tasks** | `list` | `list`"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Start Timer** | `start ID` | `start 2`"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Stop Timer** | `stop ID` | `stop 2`"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Undo/redo** | `undo` | `redo`"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Show and Hide Sidebar Components** | `show [r/]` | `show r/`"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Settings** | `set [th/THEME] [st/TIMEFRAME]` | `set th/dark st/daily`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Exit** | `exit` | `exit`"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 87,
      "claracheong4": 60,
      "kkangs0226": 179,
      "khoodehui": 152,
      "-": 90
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveProjectBook(projectBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 37
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBook *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Person -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "if () then ([command commits ProjectBook])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    :Save ProjectBook to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    projectBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "participant \":ProjectBookParser\" as ProjectBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "LogicManager -\u003e ProjectBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "activate ProjectBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "DeleteCommandParser --\u003e ProjectBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "DeleteCommandParser --\u003e ProjectBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ProjectBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "deactivate ProjectBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 10,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Class ProjectBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "note bottom of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package Statistic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Interface StatisticGenerator \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class StatisticManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class XYZStatistic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class StatisticEntry"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class \"{abstract}\\nStatistic\" as Statistic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "note top of XYZStatistic: XYZStatistic \u003d \\nPeriodicTotalTimeStatistic, etc"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "LogicManager --\u003e\"1\" ProjectBookParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "LogicManager -right-\u003e\"1\" StatisticGenerator"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Command .up.\u003e Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager .up.|\u003e StatisticGenerator"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager --\u003e \"*\" Statistic"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Statistic ..\u003e \"1..*\" StatisticEntry"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "XYZStatistic --|\u003e Statistic"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 19,
      "claracheong4": 3,
      "-": 57
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Interface ReadOnlyProjectBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Class ProjectBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Class ReadOnlyProjectBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Package Project {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class Project"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Class DateWrapper"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class Deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Class TimerWrapper"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class UniqueProjectList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class UniqueDurationList"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class WorkDuration"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBook .up.|\u003e ReadOnlyProjectBook"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ModelManager o--\u003e \"1\" ProjectBook"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "ProjectBook *--\u003e \"1\" UniqueProjectList"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "UniqueProjectList o--\u003e \"*\" Project"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project *--\u003e Name"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project *--\u003e Deadline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Project *--\u003e DateWrapper"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project *--\u003e Description"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Project *--\u003e TimerWrapper"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project *--\u003e UniqueDurationList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "UniqueDurationList o--\u003e \"*\" WorkDuration"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Name -[hidden]right-\u003e Deadline"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Deadline -[hidden]right-\u003e Description"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Description -[hidden]right-\u003e DateWrapper"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "UniqueDurationList -[hidden]right-\u003e TimerWrapper"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "ModelManager --\u003e\"1\" Project : filtered list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "ModelManager --\u003e\"*\" Project : active timer list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 19,
      "claracheong4": 11,
      "-": 34
    }
  },
  {
    "path": "docs/diagrams/StatsSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \":StatisticManager\" as StatisticManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \":PeriodicTotalTimeStatistic\" as PeriodicTotalTimeStatistic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \"e:StatisticEntry\" as StatisticEntry LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "[-\u003e StatisticManager : updateStatistics()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate StatisticManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager -\u003e PeriodicTotalTimeStatistic : calculate()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate PeriodicTotalTimeStatistic"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "loop all projects"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     PeriodicTotalTimeStatistic -\u003e PeriodicTotalTimeStatistic : calculateTimeSpent()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     activate PeriodicTotalTimeStatistic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     PeriodicTotalTimeStatistic --\u003e PeriodicTotalTimeStatistic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     deactivate PeriodicTotalTimeStatistic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     create StatisticEntry"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     PeriodicTotalTimeStatistic -\u003e StatisticEntry"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     activate StatisticEntry"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     StatisticEntry --\u003e PeriodicTotalTimeStatistic : e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     deactivate StatisticEntry"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "end"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "PeriodicTotalTimeStatistic --\u003e StatisticManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate PeriodicTotalTimeStatistic"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager --\u003e["
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate StatisticManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "[-\u003e StatisticManager : getWeeklyTimePerProjectStatistic()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate StatisticManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager -\u003e PeriodicTotalTimeStatistic : getDisplayList()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate PeriodicTotalTimeStatistic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "PeriodicTotalTimeStatistic --\u003e StatisticManager"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate PeriodicTotalTimeStatistic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager --\u003e["
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate StatisticManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 42
    }
  },
  {
    "path": "docs/diagrams/StopTImerSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \"p1:Project\" as Project1 MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \"t:Timer\" as Timer MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \"d:WorkDuration\" as WorkDuration MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \"l:UniqueDurationList\" as UniqueDurationList MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "participant \"p2:Project\" as Project2 MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "[-\u003e Project1 : stopTimer()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate Project1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "create Timer"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project1 -\u003e Timer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate Timer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Timer --\u003e Project1 : t"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate Timer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "create WorkDuration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project1 -\u003e WorkDuration"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate WorkDuration"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "WorkDuration --\u003e Project1 : d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate WorkDuration"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "create UniqueDurationList"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project1 -\u003e UniqueDurationList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate UniqueDurationList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "UniqueDurationList --\u003e Project1 : l"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate UniqueDurationList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project1 -\u003e UniqueDurationList : setDurations()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate UniqueDurationList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "UniqueDurationList --\u003e Project1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate UniqueDurationList"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project1 -\u003e UniqueDurationList : add(d)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate UniqueDurationList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "UniqueDurationList --\u003e Project1"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate UniqueDurationList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "create Project2"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project1 -\u003e Project2 : t, l"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "activate Project2"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project2 --\u003e Project1"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate Project2"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project1 -\u003e[ : p2"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "deactivate Project1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 51
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Interface ProjectBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Class JsonProjectBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "StorageManager o--\u003e ProjectBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "JsonProjectBookStorage .left.|\u003e ProjectBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "JsonProjectBookStorage .down.\u003e JsonSerializableProjectBookStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "JsonSerializableProjectBookStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 6,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/TimerDurationClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!include detailed_style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package Project {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class Project MODEL_COLOR {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    name : Name"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    description : Description"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    deadline : Deadline"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    createdDateWrapper : DateWrapper"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    tags : Set\u003cTag\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    startTimer() : Project"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    stopTimer() : Project"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    isRunning() : boolean"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class Timer MODEL_COLOR {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    startDateTime : DateTimeWrapper"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    stopDateTime : DateTimeWrapper"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    isRUnning : boolean"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    start() : void"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    stop() : void"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    getTimeBetween(ChronoUnit unit) : long"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class UniqueDurationList MODEL_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class WorkDuration MODEL_COLOR {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    startDateTime : DateTimeWrapper"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    stopDateTime : DateTimeWrapper"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    getTimeBetween(ChronoUnit unit) : long"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Interface StatisticGenerator \u003c\u003cInterface\u003e\u003e LOGIC_COLOR {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    updateStatistics() : void"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class StatisticManager LOGIC_COLOR {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    statistics : Statistic[]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class XYZStatistic LOGIC_COLOR"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class StatisticEntry LOGIC_COLOR {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    label : String"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    value : double"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Class \"{abstract}\\nStatistic\" as Statistic LOGIC_COLOR {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    calculate(Model model) : void { abstract }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    getDisplayList() : ObservableList\u003cStatisticEntry\u003e { abstract }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "note top of XYZStatistic: XYZStatistic \u003d \\nPeriodicTotalTimeStatistic, etc"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager .up.|\u003e StatisticGenerator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "StatisticManager --\u003e \"*\" Statistic"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Statistic ..\u003e \"1..*\" StatisticEntry"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "XYZStatistic --|\u003e Statistic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project *-left-\u003e \"1\" UniqueDurationList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Project *--\u003e \"1\" Timer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "UniqueDurationList o-up-\u003e \"*\" WorkDuration"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Statistic .left.\u003e Project"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "Statistic .left.\u003e WorkDuration"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 65,
      "claracheong4": 5
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State1 as \"__ab0:ProjectBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State2 as \"__ab1:ProjectBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State3 as \"__ab2:ProjectBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State1 as \"__ab0:ProjectBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State2 as \"__ab1:ProjectBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State3 as \"__ab2:ProjectBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State1 as \"__ab0:ProjectBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State2 as \"__ab1:ProjectBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State3 as \"__ab2:ProjectBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State1 as \"__ab0:ProjectBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State2 as \"__ab1:ProjectBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State3 as \"__ab2:ProjectBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State1 as \"__ab0:ProjectBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State2 as \"__ab1:ProjectBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State3 as \"__ab2:ProjectBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State1 as \"__ab0:ProjectBook__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State2 as \"__ab1:ProjectBook__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    class State3 as \"__ab3:ProjectBook__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "participant \":ProjectBookParser\" as ProjectBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "participant \":VersionedProjectBook\" as VersionedProjectBook MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "LogicManager -\u003e ProjectBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "activate ProjectBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "UndoCommand --\u003e ProjectBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "ProjectBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "deactivate ProjectBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "UndoCommand -\u003e Model : undoProjectBook()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Model -\u003e VersionedProjectBook : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "activate VersionedProjectBook"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "VersionedProjectBook -\u003e VersionedProjectBook :resetData(ReadOnlyProjectBook)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "VersionedProjectBook --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "deactivate VersionedProjectBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/detailed_style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam ClassAttribute {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 80
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Participant \":ProjectBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "ecp -\u003e ec ++: index, editTrackedItemDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "claracheong4": 1,
      "-": 19
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "title: Momentum"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T10-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T10-1/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "**Momentum is a desktop application for managing your projects and tasks.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* If you are interested in using Momentum, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "* If you are interested about developing Momentum, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 1,
      "pr4aveen": 1,
      "claracheong4": 2,
      "khoodehui": 3,
      "-": 14
    }
  },
  {
    "path": "docs/team/johndoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: John Doe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "## Project: Momentum Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "Momentum - Level 3 is a desktop project book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 44
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Changes the remark of an existing project in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the project identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"by the index number used in the last project listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param index of the project in the filtered project list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param remark of the project to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of project data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the project’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a project."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Create a new `Remark` in `seedu.address.model.project`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each project."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "Simply add the following to [`seedu.address.ui.ProjectCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public PersonCard(Person project, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    remark.setText(project.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Person projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Person editedProject \u003d new Person(projectToEdit.getName(), projectToEdit.getPhone(), projectToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                projectToEdit.getAddress(), remark, projectToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.setPerson(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedProject));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code projectToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private String generateSuccessMessage(Person projectToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return String.format(message, projectToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 19,
      "-": 375
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.project.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  \"projects\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       Person projectToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       Person editedProject \u003d createEditedPerson(projectToEdit, editTrackedItemDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       if (!projectToEdit.isSamePerson(editedProject) \u0026\u0026 model.hasPerson(editedProject)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       model.setPerson(projectToEdit, editedProject);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedProject));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "       projects.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6,
      "-": 244
    }
  },
  {
    "path": "src/main/java/seedu/momentum/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/momentum/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/momentum/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.net.URLDecoder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.nio.charset.Charset;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Version;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.LogicManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.logic.SettingsUpdateManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonProjectBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.ProjectBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ProjectBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBookStorage projectBookStorage \u003d new JsonProjectBookStorage(userPrefs.getProjectBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        storage \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        SettingsUpdateManager.initSettingsUpdateManager(ui, logic.getStatistic());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s project book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The data from the sample project book will be used instead if {@code storage}\u0027s project book is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * or an empty project book will be used instead if errors occur when reading {@code storage}\u0027s project book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Optional\u003cReadOnlyProjectBook\u003e projectBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ReadOnlyProjectBook initialData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            projectBookOptional \u003d storage.readProjectBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (!projectBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ProjectBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Optional\u003cReadOnlyProjectBook\u003e defaultProjectBookOptional \u003d getDefaultData();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (!projectBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                logger.info(\"Default data file not found. Will start with bare bones sample data\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            initialData \u003d projectBookOptional"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .or(() -\u003e defaultProjectBookOptional)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .orElseGet(SampleDataUtil::getSampleProjectBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ProjectBook\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            initialData \u003d new ProjectBook();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProjectBook\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            initialData \u003d new ProjectBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Optional\u003cReadOnlyProjectBook\u003e getDefaultData() throws IOException, DataConversionException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        File file \u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String resource \u003d \"/data/defaultData.json\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        URL res \u003d getClass().getResource(resource);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (res.getProtocol().equals(\"jar\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            InputStream input \u003d getClass().getResourceAsStream(resource);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            file \u003d File.createTempFile(\"tempfile\", \".tmp\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            OutputStream out \u003d new FileOutputStream(file);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            int read;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            byte[] bytes \u003d new byte[1024];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            while ((read \u003d input.read(bytes)) !\u003d -1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                out.write(bytes, 0, read);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            out.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            file.deleteOnExit();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            file \u003d new File(URLDecoder.decode(res.getFile(), Charset.defaultCharset()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!file.exists()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ProjectBookStorage defaultStorage \u003d new JsonProjectBookStorage(file.toPath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return defaultStorage.readProjectBook();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ProjectBook\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Starting ProjectBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Project Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            logger.info(\"Saved preferences. Quitting application now.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            Platform.exit();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 44,
      "pr4aveen": 4,
      "claracheong4": 42,
      "khoodehui": 4,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Clock.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Represents a clock used by the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class Clock {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static ClockState clockState \u003d ClockState.NORMAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static DateTimeWrapper currentDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Gets the current time according to the state of the clock."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return System time if normal, A fixed time if fixed, and The set time if manual."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static DateTimeWrapper now() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (clockState \u003d\u003d ClockState.NORMAL) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new DateTimeWrapper(LocalDateTime.now());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return currentDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Starts the clock with a fixed time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param fixedDateTime The time to start the clock at."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static void initFixed(DateTimeWrapper fixedDateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d fixedDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        clockState \u003d ClockState.FIXED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Starts a manually adjustable clock."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param startDateTime The starting time of the clock."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static void initManual(DateTimeWrapper startDateTime) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        clockState \u003d ClockState.MANUAL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Advances the clock\u0027s time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param amount Amount to advance by."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param units Units of time to advance by."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static void advance(long amount, ChronoUnit units) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert(clockState \u003d\u003d ClockState.MANUAL);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d currentDateTime.plus(amount, units);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /** Reverses the clock\u0027s time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param amount Amount to advance by."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param units Units of time to advance by."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static void reverse(long amount, ChronoUnit units) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert(clockState \u003d\u003d ClockState.MANUAL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d currentDateTime.minus(amount, units);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Resets the Clock to a normal state."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static void reset() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        currentDateTime \u003d new DateTimeWrapper(LocalDateTime.now());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        clockState \u003d ClockState.NORMAL;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Represents the state of the clock."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Fixed: The clock always gives the same time."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Manual: The clock\u0027s time can be manually adjusted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Normal: The clock\u0027s time follows system time."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public enum ClockState {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        FIXED,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        MANUAL,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        NORMAL"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 73,
      "claracheong4": 13
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/DateTimeWrapper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a WorkDuration\u0027s dateTime in the project book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateTimeWrapper implements InstanceWrapper\u003cLocalDateTime\u003e, Comparable\u003cDateTimeWrapper\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \"Dates and Times should be in ISO8601 format. e.g. 2020-09-23T16:55:12\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code DateTimeWrapper}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param dateTime A valid DateTimeWrapper."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper(String dateTime) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(isValid(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(dateTime, DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a new DateTimeWrapper that is after this DateTimeWrapper be a specified amount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param amount Amount to increase by."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit   Unit to increase with."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The new dateTime"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper plus(long amount, ChronoUnit unit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new DateTimeWrapper(dateTime.plus(amount, unit));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a new DateTimeWrapper that is before this DateTimeWrapper by a specified amount."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param amount Amount to decrease by."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit   Unit to decrease with."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The new dateTime."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper minus(long amount, ChronoUnit unit) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new DateTimeWrapper(dateTime.minus(amount, unit));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a given string is a valid dateTime."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeUtil.FORMAT_DATA.parse(test);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Checks if an instance in timeWrapper is before this instance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param otherTime The timeWrapper to check."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean isBefore(DateTimeWrapper otherTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return dateTime.isBefore(otherTime.get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Checks if an instance in timeWrapper is after this instance."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param otherTime The timeWrapper to check."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean isAfter(DateTimeWrapper otherTime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return dateTime.isAfter(otherTime.get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Calculates the amount of timeWrapper between two instances of timeWrapper, in the provided units."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param time1 The earlier instance of timeWrapper."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param time2 The later instance of timeWrapper."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param units The units to the timeWrapper."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static long getTimeBetween(DateTimeWrapper time1, DateTimeWrapper time2, ChronoUnit units) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return units.between(time1.get(), time2.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.toLocalDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.toLocalTime();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateWrapper getDateWrapper() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new DateWrapper(dateTime.toLocalDate());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimeWrapper getTimeWrapper() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new TimeWrapper(dateTime.toLocalTime());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalDateTime get() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormatted() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.format(DateTimeUtil.FORMAT_DATE_TIME_MEDIUM);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateTime.toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof DateTimeWrapper // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 dateTime.equals(((DateTimeWrapper) other).get())); // state check"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int compareTo(DateTimeWrapper other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        LocalDateTime thisLocalDateTime \u003d this.get();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        LocalDateTime otherLocalDateTime \u003d other.get();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (thisLocalDateTime.isBefore(otherLocalDateTime)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (thisLocalDateTime.isAfter(otherLocalDateTime)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 21,
      "claracheong4": 129,
      "kkangs0226": 12
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/DateWrapper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a date in the project book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateWrapper implements InstanceWrapper\u003cLocalDate\u003e, Comparable\u003cDateWrapper\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \"Dates should be in ISO8601 format. e.g. 2011-12-03\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateWrapper MIN \u003d new DateWrapper(LocalDate.EPOCH);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code DateWrapper}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param date A valid DateWrapper."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateWrapper(String date) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(isValid(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DateUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateWrapper(LocalDate date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateUtil.FORMAT_DATA.parse(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Calculates the amount of timeWrapper between two instances of timeWrapper, in the provided units."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param time1 The earlier instance of timeWrapper."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param time2 The later instance of timeWrapper."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param units The units to the timeWrapper."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static long getTimeBetween(DateWrapper time1, DateWrapper time2, ChronoUnit units) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return units.between(time1.get(), time2.get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalDate get() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormatted() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.format(DateUtil.FORMAT_DATE_MEDIUM);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof DateWrapper // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.date.equals(((DateWrapper) other).get())); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.date.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int compareTo(DateWrapper other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (this.get().isBefore(other.get())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.get().isAfter(other.get())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 84,
      "kkangs0226": 9,
      "khoodehui": 8
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/GuiThemeSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * A Serializable class that contains the GUI theme settings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class GuiThemeSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final Theme DEFAULT_THEME \u003d new Theme(Theme.ThemeType.DARK);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final Theme theme;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Constructs a {@code GuiThemeSettings} with the default theme."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiThemeSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        theme \u003d DEFAULT_THEME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Constructs a {@code GuiThemeSettings} with the specified theme."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiThemeSettings(Theme theme) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.theme \u003d theme;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Theme getTheme() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return theme;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!(other instanceof GuiThemeSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        GuiThemeSettings o \u003d (GuiThemeSettings) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return theme.equals(o.theme);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return Objects.hash(theme);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        sb.append(\"Theme : \" + theme + \"\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 59
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/GuiWindowSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * A Serializable class that contains the GUI window settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class GuiWindowSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1150;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Constructs a {@code GuiWindowSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiWindowSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Constructs a {@code GuiWindowSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiWindowSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!(other instanceof GuiWindowSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        GuiWindowSettings o \u003d (GuiWindowSettings) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "khoodehui": 11,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/InstanceWrapper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents an instance in time in the project book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface InstanceWrapper\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns an instance in time with type T."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The instance in time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    T get();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a formatted string representation of instance in time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The formatted instance in time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    String getFormatted();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String LOG_FILE \u003d \"projectbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \"Invalid command format! \\nFormat: %1$s \\nFor more information view the user guide with the \u0027help\u0027 command.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX \u003d \"The project index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_PROJECTS_LISTED_OVERVIEW \u003d \"%1$d projects listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_NOT_PROJECT \u003d \"You cannot view tasks within a project!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "claracheong4": 1,
      "kkangs0226": 1,
      "khoodehui": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/StatisticTimeframe.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Timeframe of statistics tracked."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class StatisticTimeframe implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \"Timeframe should be either \u0027daily\u0027, \u0027weekly\u0027, or \u0027monthly\u0027.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Timeframe timeframe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Empty constructor required by Jackson."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframe() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Constructs a {@code StatisticTimeframe} with the specified timeframe."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframe(Timeframe timeframe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.timeframe \u003d timeframe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Converts the timeframe to a {@code ChronoUnit}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public ChronoUnit toChronoUnit() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return timeframe.toChronoUnit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return timeframe.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!(other instanceof StatisticTimeframe)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StatisticTimeframe o \u003d (StatisticTimeframe) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return timeframe \u003d\u003d o.timeframe;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return Objects.hash(timeframe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public enum Timeframe {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        DAILY, WEEKLY, MONTHLY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         * Converts the timeframe to a {@code ChronoUnit}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public ChronoUnit toChronoUnit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return this \u003d\u003d DAILY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                ? ChronoUnit.DAYS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                : this \u003d\u003d WEEKLY"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                ? ChronoUnit.WEEKS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                : ChronoUnit.MONTHS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return super.toString().charAt(0)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                + super.toString().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 81
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/StatisticTimeframeSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * A Serializable class that contains the {@code StatisticTimeframe} settings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class StatisticTimeframeSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final StatisticTimeframe DEFAULT_TIMEFRAME \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final StatisticTimeframe statTimeframe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Constructs a {@code StatisticTimeframeSettings} with the default timeframe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframeSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statTimeframe \u003d DEFAULT_TIMEFRAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Constructs a {@code StatisticTimeframeSettings} with the specified timeframe."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframeSettings(StatisticTimeframe statTimeframe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.statTimeframe \u003d statTimeframe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframe getStatTimeframe() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return statTimeframe;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!(other instanceof StatisticTimeframeSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StatisticTimeframeSettings o \u003d (StatisticTimeframeSettings) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return statTimeframe.equals(o.statTimeframe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return Objects.hash(statTimeframe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        sb.append(\"Timeframe : \" + statTimeframe + \"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 60
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Theme.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * UI theme of the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class Theme {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \"Theme should either be \u0027light\u0027 or \u0027dark\u0027.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private ThemeType themeType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Empty constructor required by Jackson."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Theme() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public Theme(ThemeType themeType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.themeType \u003d themeType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Fetches the filepath of the CSS stylesheet corresponding to the current theme."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String getStylesheet() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assert(themeType \u003d\u003d ThemeType.LIGHT || themeType \u003d\u003d ThemeType.DARK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String stylesheetName \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            themeType \u003d\u003d ThemeType.LIGHT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            ? \"MomentumLight.css\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            : \"MomentumDark.css\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return MainApp.class.getResource(\"/view/\" + stylesheetName).toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return this.themeType.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!(other instanceof Theme)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Theme o \u003d (Theme) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return this.themeType \u003d\u003d o.themeType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return this.themeType.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public enum ThemeType {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        LIGHT, DARK"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 3,
      "khoodehui": 66
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/TimeWrapper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.TimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a time in the project book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValid(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class TimeWrapper implements InstanceWrapper\u003cLocalTime\u003e, Comparable\u003cTimeWrapper\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \"Times should be in ISO8601 format. e.g. 10:15:30\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final LocalTime time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code TimeWrapper}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param time A valid TimeWrapper."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimeWrapper(String time) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(isValid(time), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d LocalTime.parse(time, TimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimeWrapper(LocalTime time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            TimeUtil.FORMAT_DATA.parse(test);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public LocalTime get() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormatted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.format(TimeUtil.FORMAT_TIME_MEDIUM);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof TimeWrapper // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.time.equals(((TimeWrapper) other).get())); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.time.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int compareTo(TimeWrapper other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (this.get().isBefore(other.get())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.get().isAfter(other.get())) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 77,
      "kkangs0226": 10
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods used for parsing and formatting LocalDateTime objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_TIME_LONG \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_TIME_MEDIUM \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_TIME_SHORT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATA \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods used for parsing and formatting LocalDate objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_LONG \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_MEDIUM \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATE_SHORT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATA \u003d DateTimeFormatter.ISO_DATE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param sentence cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String[] wordsInPreppedSentence \u003d sentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   Ignores case, but a partial match is sufficient."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       containsPartialIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       containsPartialIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       containsPartialIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true //partial word match"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param sentence cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static boolean containsPartialIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String preppedKeyword \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        checkArgument(!preppedKeyword.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        checkArgument(preppedKeyword.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return preppedSentence.contains(preppedKeyword);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 29,
      "claracheong4": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/momentum/commons/util/TimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods used for parsing and formatting LocalTime objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class TimeUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_TIME_LONG \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedTime(FormatStyle.LONG);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_TIME_MEDIUM \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedTime(FormatStyle.MEDIUM);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_TIME_SHORT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeFormatter FORMAT_DATA \u003d DateTimeFormatter.ISO_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticGenerator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the reminder is empty, false otherwise."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the boolean."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    BooleanProperty isReminderEmpty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the string representation of the reminder."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the reminder."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    StringProperty getReminder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the ProjectBook."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see seedu.momentum.model.Model#getProjectBook()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    ReadOnlyProjectBook getProjectBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tracked items."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e getObservableFilteredTrackedItemList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns a list of projects whose timers are running."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ObservableList\u003cTrackedItem\u003e getRunningTimers();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the user prefs\u0027 project book file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Returns the user prefs\u0027 GUI window settings."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    GuiWindowSettings getGuiWindowSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Set the user prefs\u0027 GUI window settings."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    void setGuiWindowSettings(GuiWindowSettings guiWindowSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Returns the user prefs\u0027 GUI theme settings."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    GuiThemeSettings getGuiThemeSettings();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Set the user prefs\u0027 GUI theme settings."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    void setGuiThemeSettings(GuiThemeSettings guiThemeSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Return the user prefs\u0027 statistic timeframe settings."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    StatisticTimeframeSettings getStatisticTimeframeSettings();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Set the user prefs\u0027 statistic timeframe settings."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    void setStatisticTimeframeSettings(StatisticTimeframeSettings statisticTimeframeSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    StatisticGenerator getStatistic();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 9,
      "pr4aveen": 4,
      "claracheong4": 29,
      "khoodehui": 27,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.ProjectBookParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticGenerator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final StatisticGenerator statistic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBookParser projectBookParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statistic \u003d new StatisticManager(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBookParser \u003d new ProjectBookParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.resetView();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Command command \u003d projectBookParser.parseCommand(commandText, model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            storage.saveProjectBook(model.getProjectBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statistic.updateStatistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.updateRunningTimers();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticGenerator getStatistic() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return statistic;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public BooleanProperty isReminderEmpty() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return model.isReminderEmpty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public StringProperty getReminder() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return model.getReminder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ReadOnlyProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return model.getProjectBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e getObservableFilteredTrackedItemList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return model.getObservableFilteredTrackedItemList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cTrackedItem\u003e getRunningTimers() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return model.getRunningTimers();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return model.getProjectBookFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiWindowSettings getGuiWindowSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return model.getGuiWindowSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiWindowSettings(GuiWindowSettings guiWindowSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        model.setGuiWindowSettings(guiWindowSettings);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiThemeSettings getGuiThemeSettings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return model.getGuiThemeSettings();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiThemeSettings(GuiThemeSettings guiThemeSettings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        model.setGuiThemeSettings(guiThemeSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframeSettings getStatisticTimeframeSettings() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return model.getStatisticTimeframeSettings();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setStatisticTimeframeSettings(StatisticTimeframeSettings statisticTimeframe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        model.setStatisticTimeframeSettings(statisticTimeframe);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 21,
      "pr4aveen": 3,
      "claracheong4": 29,
      "khoodehui": 27,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/SettingsUpdateManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.Theme;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticGenerator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Class that helps to update application interface when settings change."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class SettingsUpdateManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static StatisticGenerator statistic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Initializes the {@code Ui} and {@code StatisticGenerator} to be maintained."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static void initSettingsUpdateManager(Ui appUi, StatisticGenerator appStatistic) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui \u003d appUi;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statistic \u003d appStatistic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Updates the theme of the application."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static void updateTheme(Theme theme) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.getMainWindow().updateTheme(theme);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Updates the timeframe for the statistics tracked."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static void updateStatisticTimeframe(StatisticTimeframe timeframe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statistic.updateStatisticTimeframe(timeframe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ui.getMainWindow().updateStatList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 39
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Adds a project to the project book."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + \"[\" + PREFIX_COMPLETION_STATUS + \"] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + String.format(\"[%sDEADLINE_DATE [%sDEADLINE_TIME] ] \", PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + \"[\" + PREFIX_REMINDER + \"REMINDER_DATE_AND_TIME] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New %1$s added: %2$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the project book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String TEXT_PROJECT \u003d \"Project\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String TEXT_TASK \u003d \"Task\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private TrackedItem toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Project projectToAddTask;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Task taskToAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Project}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public AddCommand(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(trackedItem);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        toAdd \u003d trackedItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task} to the specified {@code Project}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public AddCommand(Task task, Project project) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(task, project);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        taskToAdd \u003d task;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectToAddTask \u003d project;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ViewMode viewMode \u003d model.getViewMode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (viewMode \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            if (model.hasTrackedItem(toAdd)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            model.addTrackedItem(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.commitToHistory();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, TEXT_PROJECT, toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            if (projectToAddTask.hasTask(taskToAdd)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectBeforeAdd \u003d projectToAddTask;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectAfterAdd \u003d projectToAddTask.addTask(taskToAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(projectBeforeAdd, projectAfterAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            model.rescheduleReminders();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.viewTasks(projectAfterAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.commitToHistory();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, TEXT_TASK, taskToAdd));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 9,
      "pr4aveen": 28,
      "claracheong4": 17,
      "kkangs0226": 8,
      "khoodehui": 2,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Clears the project book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TASK \u003d \"All tasks have been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL \u003d \"All projects has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setVersionedProjectBook(new ProjectBook());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.commitToHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectBeforeClear \u003d model.getCurrentProject();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectAfterClear \u003d model.getCurrentProject().clearTasks();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(projectBeforeClear, projectAfterClear);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.viewTasks(projectAfterClear);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.commitToHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 8,
      "claracheong4": 4,
      "kkangs0226": 8,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Deletes a project identified using it\u0027s displayed index from the project book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + \"INDEX\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Deleted Project: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Project projectToDeleteTaskFrom;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Deletes a project at a given index from the project book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param targetIndex index of the project to be deleted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Deletes a task at a given index from a certain project."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param targetIndex index of the task to be deleted."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param project project to delete the task from."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public DeleteCommand(Index targetIndex, Project project) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.projectToDeleteTaskFrom \u003d project;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ViewMode viewMode \u003d model.getViewMode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cTrackedItem\u003e lastShownList \u003d viewMode \u003d\u003d ViewMode.PROJECTS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                ? model.getFilteredTrackedItemList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                : projectToDeleteTaskFrom.getTaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem trackedItemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (viewMode \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            model.deleteTrackedItem(trackedItemToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectBeforeDeleteTask \u003d projectToDeleteTaskFrom;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectAfterDeleteTask \u003d projectToDeleteTaskFrom.deleteTask(trackedItemToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(projectBeforeDeleteTask, projectAfterDeleteTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.viewTasks(projectAfterDeleteTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model.rescheduleReminders();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, trackedItemToDelete));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 35,
      "claracheong4": 7,
      "kkangs0226": 5,
      "khoodehui": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.model.Model.PREDICATE_SHOW_ALL_TRACKED_ITEMS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Task;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.UniqueTrackedItemList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Edits the details of an existing project in the project book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            + \"INDEX \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + \"[\" + PREFIX_COMPLETION_STATUS + \"] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + String.format(\"[%sDEADLINE_DATE [%sDEADLINE_TIME] ] \", PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + \"[\" + PREFIX_REMINDER + \"REMINDER_DATE_AND_TIME] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_EDIT_PROJECT_SUCCESS \u003d \"Edited Project: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"This project already exists in the project book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final EditTrackedItemDescriptor editTrackedItemDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Project parentProject;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Create a EditCommand that edits a project."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param index                     of the project in the filtered project list to edit."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param editTrackedItemDescriptor details to edit the project with."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditCommand(Index index, EditTrackedItemDescriptor editTrackedItemDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(editTrackedItemDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.editTrackedItemDescriptor \u003d new EditTrackedItemDescriptor(editTrackedItemDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.parentProject \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Create a EditCommand that edits a task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param index                     of the project in the filtered project list to edit."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param editTrackedItemDescriptor details to edit the project with."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param parentProject             The parent project of the task to edit."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditCommand(Index index, EditTrackedItemDescriptor editTrackedItemDescriptor, Project parentProject) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(editTrackedItemDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.editTrackedItemDescriptor \u003d new EditTrackedItemDescriptor(editTrackedItemDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.parentProject \u003d parentProject;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cTrackedItem\u003e lastShownList \u003d model.getFilteredTrackedItemList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem trackedItemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem editedTrackedItem \u003d createEditedTrackedItem(trackedItemToEdit, editTrackedItemDescriptor, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!trackedItemToEdit.isSameTrackedItem(editedTrackedItem) \u0026\u0026 model.hasTrackedItem(editedTrackedItem)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                model.setTrackedItem(trackedItemToEdit, editedTrackedItem);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                Project projectBeforeEditTask \u003d parentProject;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                Project projectAfterEditTask \u003d parentProject.setTask(trackedItemToEdit, editedTrackedItem);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                model.setTrackedItem(projectBeforeEditTask, projectAfterEditTask);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                model.viewTasks(projectAfterEditTask);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_TRACKED_ITEMS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model.rescheduleReminders();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PROJECT_SUCCESS, editedTrackedItem));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Creates and returns a {@code Project} with the details of {@code projectToEdit}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * edited with {@code editTrackedItemDescriptor}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static TrackedItem createEditedTrackedItem(TrackedItem trackedItemToEdit,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                                       EditTrackedItemDescriptor editTrackedItemDescriptor,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                                       Model model) throws CommandException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assert trackedItemToEdit !\u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Name updatedName \u003d editTrackedItemDescriptor.getName().orElse(trackedItemToEdit.getName());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Description updatedDescription \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                editTrackedItemDescriptor.getDescription().orElse(trackedItemToEdit.getDescription());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        CompletionStatus updatedCompletionStatus \u003d trackedItemToEdit.getCompletionStatus();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (editTrackedItemDescriptor.getCompletionStatus().isPresent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            updatedCompletionStatus \u003d updatedCompletionStatus.reverse();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper createdDateWrapper \u003d trackedItemToEdit.getCreatedDate();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Deadline updatedDeadline \u003d editTrackedItemDescriptor.getDeadline().orElse(trackedItemToEdit.getDeadline());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (editTrackedItemDescriptor.getDeadline().isPresent()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 !editTrackedItemDescriptor.getDeadline().get().isEmpty()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 Deadline.isBeforeCreatedDate(updatedDeadline.getDate().toString(), createdDateWrapper)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            // deadline is before created date"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            // created date wrapped by LocalDate.EPOCH by default"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new CommandException(Deadline.CREATED_DATE_MESSAGE_CONSTRAINT); // show message constraints"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Reminder updatedReminder \u003d editTrackedItemDescriptor.getReminder().orElse(trackedItemToEdit.getReminder());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTrackedItemDescriptor.getTags().orElse(trackedItemToEdit.getTags());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList durationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        durationList.setDurations(trackedItemToEdit.getDurationList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Project projectToEdit \u003d (Project) trackedItemToEdit;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            UniqueTrackedItemList taskList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            taskList.setTrackedItems(projectToEdit.getTaskList());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Project(updatedName, updatedDescription, updatedCompletionStatus, createdDateWrapper,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    updatedDeadline, updatedReminder, updatedTags, durationList, trackedItemToEdit.getTimer(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    taskList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Task(updatedName, updatedDescription, updatedCompletionStatus, createdDateWrapper,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    updatedDeadline, updatedReminder, updatedTags, durationList, trackedItemToEdit.getTimer());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 editTrackedItemDescriptor.equals(e.editTrackedItemDescriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Stores the details to edit the tracked item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * corresponding field value of the tracked item."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static class EditTrackedItemDescriptor {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private CompletionStatus completionStatus;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private Deadline deadline;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private Reminder reminder;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public EditTrackedItemDescriptor() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public EditTrackedItemDescriptor(EditTrackedItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setCompletionStatus(toCopy.completionStatus);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setReminder(toCopy.reminder);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, completionStatus, deadline, reminder, tags);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void setCompletionStatus(CompletionStatus completionStatus) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public Optional\u003cCompletionStatus\u003e getCompletionStatus() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.ofNullable(completionStatus);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            if (!(other instanceof EditTrackedItemDescriptor)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            EditTrackedItemDescriptor e \u003d (EditTrackedItemDescriptor) other;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    \u0026\u0026 getCompletionStatus().equals(e.getCompletionStatus())"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    \u0026\u0026 getReminder().equals(e.getReminder())"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 36,
      "pr4aveen": 39,
      "claracheong4": 85,
      "kkangs0226": 24,
      "khoodehui": 3,
      "-": 125
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Project Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.FIND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Finds and lists all projects in project book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"[\" + FIND_TYPE + \"FIND_TYPE ] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME_KEYWORD [MORE_NAME_KEYWORDS]... ] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION_KEYWORD [MORE_DESCRIPTION_KEYWORDS]... ] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + \"[\" + PREFIX_COMPLETION_STATUS + \"COMPLETION_STATUS_KEYWORD ] \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG_KEYWORD [MORE_TAG_KEYWORDS]... ]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final Predicate\u003cTrackedItem\u003e predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public FindCommand(Predicate\u003cTrackedItem\u003e predicate) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.viewAll();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW, model.getFilteredTrackedItemList().size()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 1,
      "pr4aveen": 14,
      "claracheong4": 6,
      "kkangs0226": 1,
      "khoodehui": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/HomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * View all projects in the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class HomeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Showing all projects...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.viewProjects();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        System.out.println(\"Executing Home Command\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 21,
      "kkangs0226": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.model.Model.PREDICATE_SHOW_ALL_TRACKED_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Lists all projects in the project book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PROJECTS \u003d \"Listed all projects\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_SUCCESS_TASKS \u003d \"Listed all tasks belonging to %s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(PREDICATE_SHOW_ALL_TRACKED_ITEMS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_PROJECTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_TASKS,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    model.getCurrentProject().getName().fullName));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 10,
      "pr4aveen": 2,
      "claracheong4": 3,
      "kkangs0226": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ProjectViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * View all of a project\u0027s tasks, identified using it\u0027s displayed index from the project book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class ProjectViewCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + \"INDEX\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Viewing Project: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ProjectViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cTrackedItem\u003e lastShownList \u003d model.getFilteredTrackedItemList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (model.getViewMode() !\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_PROJECT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project projectToView \u003d (Project) lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        model.viewTasks(projectToView);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, projectToView.getName().fullName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof ProjectViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ProjectViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 49,
      "pr4aveen": 2,
      "kkangs0226": 5,
      "khoodehui": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redid previously undone command\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_CANNOT_REDO \u003d \"You have reached the end of your history.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"There are no commands to redo.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!model.canRedoCommand()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_REDO);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.redoCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 29
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SET_STATISTIC_TIMEFRAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SET_THEME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.Theme;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.logic.SettingsUpdateManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Adjust various settings in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        + \"[\" + SET_THEME + \"THEME]\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        + \"[\" + SET_STATISTIC_TIMEFRAME + \"TIMEFRAME]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_UPDATE_SETTINGS_SUCCESS \u003d \"Settings updated.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_NOT_CHANGED \u003d \"At least one setting must be changed.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private final SettingsToChange settingsToChange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a SetCommand that changes application settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param settingsToChange settings to change."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public SetCommand(SettingsToChange settingsToChange) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(settingsToChange);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.settingsToChange \u003d new SettingsToChange(settingsToChange);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (settingsToChange.getTheme().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Theme newTheme \u003d settingsToChange.getTheme().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            model.setGuiThemeSettings(new GuiThemeSettings(newTheme));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            SettingsUpdateManager.updateTheme(newTheme);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (settingsToChange.getStatTimeframe().isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            StatisticTimeframe newTimeframe \u003d settingsToChange.getStatTimeframe().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            model.setStatisticTimeframeSettings(new StatisticTimeframeSettings("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                settingsToChange.getStatTimeframe().get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            SettingsUpdateManager.updateStatisticTimeframe(newTimeframe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return new CommandResult(MESSAGE_UPDATE_SETTINGS_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static class SettingsToChange {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        private Theme theme;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        private StatisticTimeframe statTimeframe;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public SettingsToChange() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public SettingsToChange(SettingsToChange toCopy) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            setTheme(toCopy.theme);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            setStatTimeframe(toCopy.statTimeframe);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         * Returns true if at least one setting is changed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public boolean isAnySettingChanged() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return CollectionUtil.isAnyNonNull(theme, statTimeframe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public void setTheme(Theme theme) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            this.theme \u003d theme;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public Optional\u003cTheme\u003e getTheme() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return Optional.ofNullable(theme);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public void setStatTimeframe(StatisticTimeframe statTimeframe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            this.statTimeframe \u003d statTimeframe;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public Optional\u003cStatisticTimeframe\u003e getStatTimeframe() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return Optional.ofNullable(statTimeframe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 102
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/ShowComponentCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.ShowComponentCommandParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Shows or hides a component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ShowComponentCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            + \"[\" + PREFIX_REMINDER + \" ] \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s is %s from the sidebar.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No component to show or hide.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String REMOVED \u003d \"removed\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String SHOWN \u003d \"shown\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ShowComponentCommandParser.ComponentType componentType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Instantiates a new Show component command which shows or hide a command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param componentType the component type."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ShowComponentCommand(ShowComponentCommandParser.ComponentType componentType) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(componentType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.componentType \u003d componentType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        switch (componentType) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        case REMINDER:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (!model.isReminderEmpty().getValue()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                model.removeReminder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                model.commitToHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, componentType.toString(), REMOVED));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof ShowComponentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 componentType.equals(((ShowComponentCommand) other).componentType)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 60,
      "kkangs0226": 1,
      "khoodehui": 2
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Sorts the projects displayed in a particular order."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_ASCENDING_ORDER \u003d \"asc\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_DESCENDING_ORDER \u003d \"dsc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_ALPHA_TYPE \u003d \"alpha\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_DEADLINE_TYPE \u003d \"deadline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INPUT_CREATED_TYPE \u003d \"created\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_ALPHA_TYPE \u003d \"alphabetical, \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_DEADLINE_TYPE \u003d \"deadline, \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_CREATED_TYPE \u003d \"created date, \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_DEFAULT_TYPE \u003d \"default alphabetical, ascending\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_ASCENDING_ORDER \u003d \"ascending\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String OUTPUT_DESCENDING_ORDER \u003d \"descending\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + SORT_TYPE + \"SORT_TYPE ] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"[\" + SORT_ORDER + \"SORT_ORDER ] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            + \"[\" + PREFIX_COMPLETION_STATUS + \"]\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_TYPE_OR_ORDER \u003d \"Sort type can only be one of the following: \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Alphabetical: alpha; Deadline: deadline; Created Date: created. \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Sort order can only be one of the following: \\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Ascending: asc; Descending: dsc. \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + SORT_TYPE + \"alpha \" + SORT_ORDER + \"asc\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_SORT_SUCCESS_PROJECTS \u003d \"Projects have been sorted in %1$s%2$s order\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_SORT_SUCCESS_TASKS \u003d \"Tasks have been sorted in %1$s%2$s order\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType sortType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final boolean isAscending;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final boolean isDefault;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final boolean isSortedByCompletionStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private Project parentProject;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Creates a SortCommand to sort the list of projects."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType                   Type of sort applied to projects."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                Boolean value to check if order of sort applied to projects is ascending."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isDefault                  Boolean value to check if SortCommand is default."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isSortedByCompletionStatus Boolean value to check if SortCommand is sorted by completion status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public SortCommand(SortType sortType, boolean isAscending, boolean isDefault, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.isAscending \u003d isAscending;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.isDefault \u003d isDefault;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.isSortedByCompletionStatus \u003d isSortedByCompletionStatus;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String order \u003d isDefault ? OUTPUT_DEFAULT_TYPE : isAscending"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ? OUTPUT_ASCENDING_ORDER : OUTPUT_DESCENDING_ORDER;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case ALPHA:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            type \u003d OUTPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            type \u003d OUTPUT_DEADLINE_TYPE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case CREATED:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            type \u003d OUTPUT_CREATED_TYPE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (isDefault) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            sortType \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            model.orderFilteredProjectList(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.commitToHistory();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_SUCCESS_PROJECTS, type, order));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectBeforeSort \u003d model.getCurrentProject();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            Project projectAfterSort \u003d model.getCurrentProject()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    .orderTaskList(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(projectBeforeSort, projectAfterSort);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.viewTasks(projectAfterSort);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.commitToHistory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SORT_SUCCESS_TASKS, type, order));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 sortType.equals(((SortCommand) other).sortType) // field check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 isAscending \u003d\u003d ((SortCommand) other).isAscending // field check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 isDefault \u003d\u003d ((SortCommand) other).isDefault // field check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 isSortedByCompletionStatus \u003d\u003d ((SortCommand) other).isSortedByCompletionStatus); // field check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 14,
      "kkangs0226": 101,
      "khoodehui": 2
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/StartCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Starts a timerWrapper tracking a project identified using it\u0027s displayed index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StartCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + \"INDEX\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_START_TIMER_SUCCESS \u003d \"Started %1$s, at: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_EXISTING_TIMER_ERROR \u003d \"There is already a timer running for this project\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Project parentProject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates a StartCommand that starts the timerWrapper for a project."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param targetIndex The project to start."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StartCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.parentProject \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates a StartCommand that starts the timerWrapper for a task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param targetIndex The task to start."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param parentProject The parent project of the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StartCommand(Index targetIndex, Project parentProject) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.parentProject \u003d parentProject;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cTrackedItem\u003e lastShownList \u003d model.getFilteredTrackedItemList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem trackedItemToStart \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (trackedItemToStart.isRunning()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_TIMER_ERROR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem newTrackedItem \u003d trackedItemToStart.startTimer();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(trackedItemToStart, newTrackedItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            assert parentProject !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Project newProject \u003d parentProject.setTask(trackedItemToStart, newTrackedItem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(parentProject, newProject);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model.rescheduleReminders();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_START_TIMER_SUCCESS, targetIndex.getOneBased())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                + newTrackedItem.getTimer().getStartTime().getFormatted());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof StartCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((StartCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 73,
      "pr4aveen": 8,
      "claracheong4": 4,
      "kkangs0226": 3,
      "khoodehui": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/StopCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Stops a previously started timerWrapper tracking a project identified using it\u0027s displayed index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StopCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \" + \"INDEX\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_STOP_TIMER_SUCCESS \u003d \"Stopped %s. Total Duration: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MESSAGE_NO_TIMER_ERROR \u003d \"There is no timer running for this project.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Project parentProject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates a StopCommand that stops the timerWrapper for a project."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param targetIndex The project to stop."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StopCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        parentProject \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates a StartCommand that stops the timerWrapper for a task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param targetIndex The task to stop."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param parentProject The parent Project of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StopCommand(Index targetIndex, Project parentProject) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.parentProject \u003d parentProject;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cTrackedItem\u003e lastShownList \u003d model.getFilteredTrackedItemList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem trackedItemToStop \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!trackedItemToStop.isRunning()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TIMER_ERROR);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem newTrackedItem \u003d trackedItemToStop.stopTimer();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(trackedItemToStop, newTrackedItem);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            assert parentProject !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Project newProject \u003d parentProject.setTask(trackedItemToStop, newTrackedItem);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.setTrackedItem(parentProject, newProject);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model.rescheduleReminders();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.commitToHistory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_STOP_TIMER_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                newTrackedItem.getTimer().getTimeBetween(ChronoUnit.MINUTES)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof StopCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((StopCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 76,
      "pr4aveen": 8,
      "claracheong4": 4,
      "kkangs0226": 3,
      "khoodehui": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undid previous command\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_CANNOT_UNDO \u003d \"You have reached the end of your history.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            + \"There are no commands to undo.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!model.canUndoCommand()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_UNDO);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            model.undoCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 29
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param model the current model."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public AddCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME, PREFIX_REMINDER, PREFIX_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            description \u003d Description.EMPTY_DESCRIPTION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            description \u003d ParserUtil.parseDescription("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        CompletionStatus completionStatus \u003d new CompletionStatus();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPLETION_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            completionStatus \u003d completionStatus.reverse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper createdDateWrapper \u003d new DateWrapper(Clock.now().getDate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline deadline \u003d ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                argMultimap.getValue(PREFIX_DEADLINE_DATE),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                argMultimap.getValue(PREFIX_DEADLINE_TIME),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                createdDateWrapper);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Reminder reminder \u003d ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER), createdDateWrapper);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new AddCommand(new Project(name, description, completionStatus, createdDateWrapper,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    deadline, reminder, tagList));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new AddCommand(new Task(name, description, completionStatus, createdDateWrapper,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    deadline, reminder, tagList), model.getCurrentProject());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 9,
      "claracheong4": 40,
      "kkangs0226": 10,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an Optional.empty."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "kkangs0226": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // Prefix definitions"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final Prefix PREFIX_COMPLETION_STATUS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_DATE \u003d new Prefix(\"dd/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_TIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final Prefix PREFIX_REMINDER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // Search parameters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Prefix FIND_TYPE \u003d new Prefix(\"match/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    // Sort parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Prefix SORT_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Prefix SORT_ORDER \u003d new Prefix(\"order/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    // Settings parameters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final Prefix SET_THEME \u003d new Prefix(\"th/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final Prefix SET_STATISTIC_TIMEFRAME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 4,
      "claracheong4": 6,
      "kkangs0226": 5,
      "khoodehui": 4,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public DeleteCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                return new DeleteCommand(index, model.getCurrentProject());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 10,
      "claracheong4": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                PREFIX_COMPLETION_STATUS, PREFIX_DEADLINE_DATE, PREFIX_DEADLINE_TIME, PREFIX_REMINDER, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor editTrackedItemDescriptor \u003d new EditCommand.EditTrackedItemDescriptor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            editTrackedItemDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            editTrackedItemDescriptor.setDescription("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPLETION_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            editTrackedItemDescriptor.setCompletionStatus(new CompletionStatus());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // use a default date to parse the deadline first"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // check whether if the deadline is after or on created date in edit command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DEADLINE_DATE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            editTrackedItemDescriptor.setDeadline(ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    argMultimap.getValue(PREFIX_DEADLINE_DATE),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    argMultimap.getValue(PREFIX_DEADLINE_TIME),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateWrapper.MIN));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // use a default date to parse the reminder first"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // check whether if the date of the reminder is after or on created date in edit command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            editTrackedItemDescriptor.setReminder(ParserUtil.parseReminder("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    argMultimap.getValue(PREFIX_REMINDER),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateWrapper.MIN));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTrackedItemDescriptor::setTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!editTrackedItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new EditCommand(index, editTrackedItemDescriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new EditCommand(index, editTrackedItemDescriptor, model.getCurrentProject());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 5,
      "pr4aveen": 11,
      "claracheong4": 38,
      "kkangs0226": 4,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.FIND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.BinaryOperator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.predicates.CompletionStatusPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.TagListContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String FIND_ARGUMENT_DELIMITER \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public FindCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        PREFIX_TAG, FIND_TYPE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Prefix[] prefixesToParse \u003d new Prefix[] {PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_COMPLETION_STATUS, PREFIX_TAG};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty() || !anyPrefixPresent(argMultimap, prefixesToParse)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindType findType \u003d getMatchType(argMultimap); // only parses find type if the argument exists"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cPredicate\u003cTrackedItem\u003e\u003e predicateList \u003d new ArrayList\u003c\u003e(); // list of all predicates that will be applied"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Prefix prefix : prefixesToParse) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            parseArguments(argMultimap, prefix, predicateList, findType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new FindCommand(combinePredicates(findType, predicateList));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Predicate\u003cTrackedItem\u003e combinePredicates(FindType findType, List\u003cPredicate\u003cTrackedItem\u003e\u003e predicateList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        BinaryOperator\u003cPredicate\u003cTrackedItem\u003e\u003e operationType;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            operationType \u003d Predicate::and;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Find any is the default type"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            operationType \u003d Predicate::or;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return predicateList.stream().reduce(operationType).orElse(x -\u003e true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private void parseArguments (ArgumentMultimap argMultimap, Prefix prefix,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "             List\u003cPredicate\u003cTrackedItem\u003e\u003e predicateList, FindType findType) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (argMultimap.getValue(prefix).isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String args \u003d argMultimap.getValue(prefix).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(trimmedArgs.split(FIND_ARGUMENT_DELIMITER));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (prefix.equals(PREFIX_NAME)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            predicateList.add(new NameContainsKeywordsPredicate(findType, keywords));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } else if (prefix.equals(PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            predicateList.add(new DescriptionContainsKeywordsPredicate(findType, keywords));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else if (prefix.equals(PREFIX_COMPLETION_STATUS)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (!CompletionStatusPredicate.isValid(keywords)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            predicateList.add(new CompletionStatusPredicate(findType, keywords));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } else if (prefix.equals(PREFIX_TAG)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            predicateList.add(new TagListContainsKeywordsPredicate(findType, keywords));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private FindType getMatchType(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (argMultimap.getValue(FIND_TYPE).isEmpty()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return FindType.ANY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String findTypeArgument \u003d argMultimap.getValue(FIND_TYPE).get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        findTypeArgument \u003d findTypeArgument.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return FindType.valueOf(findTypeArgument.toUpperCase());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns false if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static boolean anyPrefixPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 101,
      "claracheong4": 14,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    T parse(String userInput, Model model) throws ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 3,
      "claracheong4": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.Theme;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.TimeWrapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static Description parseDescription(String description) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Parses {@code Optional\u003cString\u003e date} and {@code Optional\u003cString\u003e time}into a {@code Deadline}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static Deadline parseDeadline(Optional\u003cString\u003e date, Optional\u003cString\u003e time, DateWrapper createdDateWrapper)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (date.isEmpty() || date.get().isBlank()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String trimmedDate \u003d date.get().trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateWrapper.isValid(trimmedDate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new ParseException(DateWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (Deadline.isBeforeCreatedDate(trimmedDate, createdDateWrapper)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new ParseException(Deadline.CREATED_DATE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (time.isEmpty() || time.get().isBlank()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline(trimmedDate, createdDateWrapper);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String trimmedTime \u003d time.get().trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!TimeWrapper.isValid(trimmedTime)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new ParseException(TimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Deadline(trimmedDate, trimmedTime, createdDateWrapper);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Parses {@code Optional\u003cString\u003e dateTime} into a {@code Reminder}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static Reminder parseReminder(Optional\u003cString\u003e dateTime, DateWrapper createdDateWrapper)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (dateTime.isEmpty() || dateTime.get().isBlank()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Reminder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String trimmedDateTime \u003d dateTime.get().trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTimeWrapper.isValid(trimmedDateTime)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new ParseException(DateTimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!Reminder.isValid(trimmedDateTime)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new ParseException(Reminder.REMINDER_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Reminder(trimmedDateTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Parses a {@code String theme} into a {@code Theme}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws ParseException if the given {@code theme} is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static Theme parseTheme(String theme) throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(theme);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String trimmedTheme \u003d theme.trim();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Theme.ThemeType themeType \u003d Theme.ThemeType.valueOf(trimmedTheme.toUpperCase());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new Theme(themeType);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new ParseException(Theme.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Parses a {@code String statisticTimeframe} into a {@code StatisticTimeframe}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws ParseException if the give {@code statisticTimeframe} is invalid."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static StatisticTimeframe parseStatisticTimeframe(String statisticTimeframe) throws ParseException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(statisticTimeframe);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        String trimmedTimeframe \u003d statisticTimeframe.trim();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            StatisticTimeframe.Timeframe timeframe \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                StatisticTimeframe.Timeframe.valueOf(trimmedTimeframe.toUpperCase());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new StatisticTimeframe(timeframe);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new ParseException(StatisticTimeframe.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 68,
      "kkangs0226": 9,
      "khoodehui": 35,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ProjectBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.HomeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.ProjectViewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ShowComponentCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param userInput full user input string."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param model     the current model manager."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the command based on the user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Command parseCommand(String userInput, Model model) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new AddCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new EditCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new DeleteCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new FindCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new SortCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        case StartCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new StartCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        case StopCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new StopCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        case ProjectViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return new ProjectViewCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        case HomeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new HomeCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return new SetCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        case ShowComponentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new ShowComponentCommandParser().parse(arguments, model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 14,
      "pr4aveen": 10,
      "claracheong4": 21,
      "kkangs0226": 11,
      "khoodehui": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ProjectViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.ProjectViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Parses input arguments and creates a new ProjectViewCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class ProjectViewCommandParser implements Parser\u003cProjectViewCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ProjectViewCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * and returns a ProjectViewCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectViewCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return new ProjectViewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ProjectViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 28,
      "pr4aveen": 3
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/SetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SET_STATISTIC_TIMEFRAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SET_THEME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * and returns an SetCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param model the current model."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public SetCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, SET_THEME, SET_STATISTIC_TIMEFRAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        SetCommand.SettingsToChange settingsToChange \u003d new SetCommand.SettingsToChange();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (argMultimap.getValue(SET_THEME).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            settingsToChange.setTheme(ParserUtil.parseTheme(argMultimap.getValue(SET_THEME).get()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (argMultimap.getValue(SET_STATISTIC_TIMEFRAME).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            settingsToChange.setStatTimeframe(ParserUtil.parseStatisticTimeframe("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                argMultimap.getValue(SET_STATISTIC_TIMEFRAME).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!settingsToChange.isAnySettingChanged()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new ParseException(SetCommand.MESSAGE_NOT_CHANGED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return new SetCommand(settingsToChange);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 47
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/ShowComponentCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ShowComponentCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ShowComponentCommandParser implements Parser\u003cShowComponentCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public enum ComponentType {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        REMINDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return name().charAt(0) + name().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowComponentCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * and returns an ShowComponentCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param model the current model."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ShowComponentCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMINDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new ShowComponentCommand(ComponentType.REMINDER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowComponentCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 35
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_ASCENDING_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_CREATED_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_DEADLINE_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_DESCENDING_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @throws ParseException if the user does not conform to the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public SortCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ArgumentTokenizer.tokenize(args, SORT_TYPE, SORT_ORDER, PREFIX_COMPLETION_STATUS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String sortOrder \u003d parseSortOrder(argMultimap);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        boolean isAscending \u003d sortOrder.equals(INPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        SortType sortType \u003d parseSortType(argMultimap);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        boolean isDefault \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(SORT_TYPE).isEmpty() \u0026\u0026 argMultimap.getValue(SORT_ORDER).isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            isDefault \u003d true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            sortType \u003d SortType.NULL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        boolean isSortedByCompletionStatus \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPLETION_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            isSortedByCompletionStatus \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new SortCommand(sortType, isAscending, isDefault, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private String parseSortOrder(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(SORT_ORDER).isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return INPUT_ASCENDING_ORDER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String sortOrder \u003d argMultimap.getValue(SORT_ORDER).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortOrder \u003d sortOrder.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (sortOrder.equals(INPUT_ASCENDING_ORDER) || sortOrder.equals(INPUT_DESCENDING_ORDER)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return sortOrder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_INVALID_SORT_TYPE_OR_ORDER));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType parseSortType(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (argMultimap.getValue(SORT_TYPE).isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.NULL;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String sortType \u003d argMultimap.getValue(SORT_TYPE).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortType \u003d sortType.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case INPUT_ALPHA_TYPE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.ALPHA;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case INPUT_DEADLINE_TYPE:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.DEADLINE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case INPUT_CREATED_TYPE:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return SortType.CREATED;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_INVALID_SORT_TYPE_OR_ORDER));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "claracheong4": 8,
      "kkangs0226": 84
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/StartCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Parses input arguments and creates a new StartCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StartCommandParser implements Parser\u003cStartCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StartCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * and returns a StartCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public StartCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                return new StartCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                return new StartCommand(index, model.getCurrentProject());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 35,
      "pr4aveen": 3
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/StopCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Parses input arguments and creates a new StopCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StopCommandParser implements Parser\u003cStopCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StopCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * and returns a StopCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public StopCommand parse(String args, Model model) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (model.getViewMode() \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                return new StopCommand(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                return new StopCommand(index, model.getCurrentProject());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 36,
      "pr4aveen": 2
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/PeriodicTotalTimeStatistic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Tracks the total timeWrapper spent on each project for a specific timeframe."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class PeriodicTotalTimeStatistic extends Statistic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StatisticTimeframe timeframe;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ChronoUnit units;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ObservableList\u003cStatisticEntry\u003e timeList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code PeriodicTotalTimeStatistic}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param timeframe Timeframe to track."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param units Units for the total timeWrapper calculated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public PeriodicTotalTimeStatistic(StatisticTimeframe timeframe, ChronoUnit units) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireAllNonNull(timeframe, units);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.timeframe \u003d timeframe;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.units \u003d units;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code PeriodicTotalTimeStatistic} with specified data."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param timeframe Timeframe to track."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param units Units for the total timeWrapper calculated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param timeList Data for this statistic."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public PeriodicTotalTimeStatistic(StatisticTimeframe timeframe,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                      ChronoUnit units,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                      ObservableList\u003cStatisticEntry\u003e timeList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireAllNonNull(timeframe, units, timeList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.timeframe \u003d timeframe;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.units \u003d units;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timeList \u003d timeList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void calculate(Model model) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        DateTimeWrapper start \u003d Clock.now().minus(1, timeframe.toChronoUnit());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        DateTimeWrapper end \u003d Clock.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //Only calculate statistics for projects visible to the user"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cTrackedItem\u003e trackedItems \u003d model.getFilteredTrackedItemList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timeList.clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (TrackedItem trackedItem : trackedItems) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            long totalDuration \u003d calculateTimeSpent(trackedItem, start, end);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            StatisticEntry entry \u003d new StatisticEntry(trackedItem.getName().fullName, totalDuration);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            timeList.add(entry);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private long calculateTimeSpent(TrackedItem trackedItem, DateTimeWrapper start, DateTimeWrapper end) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cWorkDuration\u003e durations \u003d trackedItem.getDurationList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        long totalDuration \u003d 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (WorkDuration duration : durations) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeWrapper startTime \u003d duration.getStartTime();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            DateTimeWrapper stopTime \u003d duration.getStopTime();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (stopTime.isBefore(start) || startTime.isAfter(end)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (startTime.isBefore(start) \u0026\u0026 stopTime.isBefore(end)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                // Duration is cut in two by the timeframe"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                totalDuration +\u003d DateTimeWrapper.getTimeBetween(start, stopTime, units);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                // Whole Duration is in the timeframe"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                totalDuration +\u003d duration.getTimeBetween(units);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!trackedItem.isTask()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Project project \u003d (Project) trackedItem;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            for (TrackedItem taskItem : project.getTaskList()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                totalDuration +\u003d calculateTimeSpent(taskItem, start, end);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return totalDuration;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setTimeframe(StatisticTimeframe timeframe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.timeframe \u003d timeframe;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObservableList\u003cStatisticEntry\u003e getDisplayList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return timeList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic that \u003d (PeriodicTotalTimeStatistic) o;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return timeframe.equals(that.timeframe)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 units \u003d\u003d that.units"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 Objects.equals(timeList, that.timeList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return Objects.hash(timeframe, timeList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 98,
      "pr4aveen": 5,
      "claracheong4": 5,
      "khoodehui": 27
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/Statistic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Represents a statistic tracked by the app and the instructions to calculate it."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public abstract class Statistic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Calculates the statistic being tracked."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param model The data required to calculate the statistic."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public abstract void calculate(Model model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Sets the timeframe of the statistic tracked."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public abstract void setTimeframe(StatisticTimeframe statisticTimeframe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public abstract ObservableList\u003cStatisticEntry\u003e getDisplayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 18,
      "khoodehui": 6
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/StatisticEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Encapsulates a piece of statistics data"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StatisticEntry {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private String label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private double value;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code StatisticEntry}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param label The label for the statistic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param value The statistic value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticEntry(String label, double value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(label);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public String getLabel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return label;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public double getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return String.format(\"(%s, %f)\", label, value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry that \u003d (StatisticEntry) o;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return label.equals(that.label)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 value \u003d\u003d that.value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return Objects.hash(label, value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 57
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/StatisticGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * API of a statistics generator"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public interface StatisticGenerator {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Recalculates all the statistics being tracked."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void updateStatistics();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Updates the timeframe of the statistics tracked."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    void updateStatisticTimeframe(StatisticTimeframe timeframe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns a list containing the amount of time spent on each project in the past week."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @return A list of StatisticEntry, each entry containing the project name and time spent."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    ObservableList\u003cStatisticEntry\u003e getTimePerProjectStatistic();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 20,
      "khoodehui": 7
    }
  },
  {
    "path": "src/main/java/seedu/momentum/logic/statistic/StatisticManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * The main statistics manager of the app."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * This class contains the specifications of statistics being tracked by the app,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * and methods to generate those statistics"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StatisticManager implements StatisticGenerator {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Statistics being tracked by the app"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Statistic totalTimePerProjectStatistic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Maintain an array of the above statistics for easy iteration"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Statistic[] statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code StatisticManager} that tracks statistics form the specified model."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param model The Model to track."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticManager(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        totalTimePerProjectStatistic \u003d new PeriodicTotalTimeStatistic("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            model.getStatisticTimeframeSettings().getStatTimeframe(), ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statistics \u003d new Statistic[] { totalTimePerProjectStatistic };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        updateStatistics();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code StatisticManager} with a specified model and statistics data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param model The Model to track."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param statistics The data to set."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatisticManager(Model model, Statistic[] statistics) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void updateStatistics() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (Statistic statistic : statistics) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            statistic.calculate(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void updateStatisticTimeframe(StatisticTimeframe timeframe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        totalTimePerProjectStatistic.setTimeframe(timeframe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public ObservableList\u003cStatisticEntry\u003e getTimePerProjectStatistic() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return totalTimePerProjectStatistic.getDisplayList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticManager that \u003d (StatisticManager) o;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return Objects.equals(model, that.model)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 Arrays.equals(statistics, that.statistics);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        int result \u003d Objects.hash(model, totalTimePerProjectStatistic);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        result \u003d 31 * result + Arrays.hashCode(statistics);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 72,
      "khoodehui": 14
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    Predicate\u003cTrackedItem\u003e PREDICATE_SHOW_ALL_TRACKED_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Returns the user prefs\u0027 GUI window settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    GuiWindowSettings getGuiWindowSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Sets the user prefs\u0027 GUI window settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    void setGuiWindowSettings(GuiWindowSettings guiWindowSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Returns the user prefs\u0027 GUI theme settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    GuiThemeSettings getGuiThemeSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Sets the user prefs\u0027 GUI theme settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    void setGuiThemeSettings(GuiThemeSettings guiThemeSettings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Return the user prefs\u0027 statistic timeframe settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    StatisticTimeframeSettings getStatisticTimeframeSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Set the user prefs\u0027 statistic timeframe settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    void setStatisticTimeframeSettings(StatisticTimeframeSettings statisticTimeframeSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the user prefs\u0027 project book file path."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the user prefs\u0027 project book file path."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void setProjectBookFilePath(Path projectBookFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Replaces project book data with the data in {@code projectBook}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    void setVersionedProjectBook(ReadOnlyProjectBook versionedProjectBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the ProjectBook."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    ReadOnlyProjectBook getProjectBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if a tracked item with the same identity as {@code trackedItem} exists in the project book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param trackedItem"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    boolean hasTrackedItem(TrackedItem trackedItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Deletes the given project."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The project must exist in the project book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    void deleteTrackedItem(TrackedItem target);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Adds the given project."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code project} must not already exist in the project book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    void addTrackedItem(TrackedItem trackedItem);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the given tracked item {@code target} with {@code editedTrackedItem}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code target} must exist in the project book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The tracked item identity of {@code editedTrackedItem} must not be the same as another existing tracked item in"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * the project book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    void setTrackedItem(TrackedItem target, TrackedItem editedTrackedItem);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns an unmodifiable view of the filtered project list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ObservableList\u003cTrackedItem\u003e getFilteredTrackedItemList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e getObservableFilteredTrackedItemList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a list of projects whose timers are running."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ObservableList\u003cTrackedItem\u003e getRunningTimers();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Reschedule all reminders."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void rescheduleReminders();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the reminder is empty, false otherwise."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the boolean."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    BooleanProperty isReminderEmpty();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the string representation of the reminder."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the reminder."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    StringProperty getReminder();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Remove the reminder shown."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void removeReminder();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void updateRunningTimers();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Updates the filter of the filtered project list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    void updateFilteredProjectList(Predicate\u003cTrackedItem\u003e predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Orders the list of projects in a way given by the {@code sortType}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @throws NullPointerException if {@code sortType} is null."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void orderFilteredProjectList(SortType sortType, boolean isAscending, boolean isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void viewProjects();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void viewTasks(Project project);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void viewAll();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void resetView();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the project that the user is currently viewing."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return current project that the user is viewing."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    Project getCurrentProject();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    ViewMode getViewMode();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo \u0026 Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Returns true if model is able to undo command, false otherwise."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    boolean canUndoCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Returns true if model is able to redo undone command, false otherwise."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    boolean canRedoCommand();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Commits current {@code ProjectBook} state to history."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    void commitToHistory();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Undoes command to reset state to previous state in history."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    void undoCommand();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Undoes command to reset view mode to previous view mode."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    void resetUi(ViewMode viewMode, Project project);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Redoes previously undone command to reset state to before undo command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    void redoCommand();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 17,
      "pr4aveen": 22,
      "claracheong4": 52,
      "kkangs0226": 43,
      "khoodehui": 27,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.ReminderManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents the in-memory model of the project book data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final VersionedProjectBook versionedProjectBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ReminderManager reminderManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e filteredTrackedItems;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final ObservableList\u003cTrackedItem\u003e runningTimers;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Predicate\u003cTrackedItem\u003e currentPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType currentSortType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private boolean isCurrentSortAscending;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private boolean isCurrentSortIsByCompletionStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ViewMode viewMode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Project currentProject;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ObservableList\u003cTrackedItem\u003e viewList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Initializes a ModelManager with the given projectBook and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ModelManager(ReadOnlyProjectBook projectBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireAllNonNull(projectBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.fine(\"Initializing with project book: \" + projectBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        currentPredicate \u003d PREDICATE_SHOW_ALL_TRACKED_ITEMS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentSortType \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        isCurrentSortAscending \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        isCurrentSortIsByCompletionStatus \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        viewMode \u003d ViewMode.PROJECTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.versionedProjectBook \u003d new VersionedProjectBook(projectBook, viewMode, currentProject);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.reminderManager \u003d new ReminderManager(this.versionedProjectBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        rescheduleReminders();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.viewList \u003d this.versionedProjectBook.getTrackedItemList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        filteredTrackedItems \u003d new SimpleObjectProperty\u003c\u003e(new FilteredList\u003c\u003e(viewList, currentPredicate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //filteredTrackedItems \u003d new FilteredList\u003c\u003e(viewList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        viewProjects();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        runningTimers \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        updateRunningTimers();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this(new ProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiWindowSettings getGuiWindowSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return userPrefs.getGuiWindowSettings();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiWindowSettings(GuiWindowSettings guiWindowSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(guiWindowSettings);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        userPrefs.setGuiWindowSettings(guiWindowSettings);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiThemeSettings getGuiThemeSettings() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return userPrefs.getGuiThemeSettings();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiThemeSettings(GuiThemeSettings guiThemeSettings) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(guiThemeSettings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        userPrefs.setGuiThemeSettings(guiThemeSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframeSettings getStatisticTimeframeSettings() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return userPrefs.getStatisticTimeframeSettings();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setStatisticTimeframeSettings(StatisticTimeframeSettings statisticTimeframeSettings) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(statisticTimeframeSettings);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        userPrefs.setStatisticTimeframeSettings(statisticTimeframeSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return userPrefs.getProjectBookFilePath();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath(Path projectBookFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(projectBookFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(projectBookFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setVersionedProjectBook(ReadOnlyProjectBook versionedProjectBook) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.versionedProjectBook.resetData(versionedProjectBook);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        rescheduleReminders();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public VersionedProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return versionedProjectBook;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Project getCurrentProject() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assert viewMode \u003d\u003d ViewMode.TASKS : \"Project can only be accessed in task view\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return currentProject;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean hasTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(trackedItem);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return versionedProjectBook.hasTrackedItem(trackedItem);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void deleteTrackedItem(TrackedItem target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.removeTrackedItem(target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        rescheduleReminders();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void addTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.addTrackedItem(trackedItem);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        rescheduleReminders();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        orderFilteredProjectList(currentSortType, isCurrentSortAscending, isCurrentSortIsByCompletionStatus);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        updateFilteredProjectList(PREDICATE_SHOW_ALL_TRACKED_ITEMS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setTrackedItem(TrackedItem target, TrackedItem editedTrackedItem) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(target, editedTrackedItem);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.setTrackedItem(target, editedTrackedItem);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (currentProject !\u003d null \u0026\u0026 currentProject.isSameTrackedItem(target)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            currentProject \u003d (Project) editedTrackedItem;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            resetUi(viewMode, currentProject);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        rescheduleReminders();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        orderFilteredProjectList(currentSortType, isCurrentSortAscending, isCurrentSortIsByCompletionStatus);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code TrackedItem} backed by the internal list of"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code versionedProjectBook}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the filtered tracked item list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cTrackedItem\u003e getFilteredTrackedItemList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return filteredTrackedItems.get();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e getObservableFilteredTrackedItemList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return filteredTrackedItems;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void updateFilteredProjectList(Predicate\u003cTrackedItem\u003e predicate) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentPredicate \u003d predicate;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        filteredTrackedItems.get().setPredicate(predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void orderFilteredProjectList(SortType sortType, boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireAllNonNull(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        isCurrentSortAscending \u003d isAscending;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        isCurrentSortIsByCompletionStatus \u003d isSortedByCompletionStatus;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentSortType \u003d sortType;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.setOrder(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        updateFilteredProjectList(currentPredicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void viewProjects() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        viewMode \u003d ViewMode.PROJECTS;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        logger.log(Level.INFO, \"View mode changed to project view\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        viewList \u003d versionedProjectBook.getTrackedItemList();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        filteredTrackedItems.set(new FilteredList\u003c\u003e(viewList, currentPredicate));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        updateFilteredProjectList(currentPredicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void viewTasks(Project project) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(project);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        currentProject \u003d project;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        viewMode \u003d ViewMode.TASKS;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        logger.log(Level.INFO, \"View mode changed to task view\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        viewList \u003d project.getTaskList();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        filteredTrackedItems.set(new FilteredList\u003c\u003e(viewList, currentPredicate));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        updateFilteredProjectList(currentPredicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void viewAll() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ObservableList\u003cTrackedItem\u003e allItems \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (TrackedItem projectItem : versionedProjectBook.getTrackedItemList()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            allItems.add(projectItem);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            Project project \u003d (Project) projectItem;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            allItems.addAll(project.getTaskList());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.viewList \u003d allItems;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void resetView() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        currentPredicate \u003d PREDICATE_SHOW_ALL_TRACKED_ITEMS;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (viewMode \u003d\u003d ViewMode.PROJECTS) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            viewProjects();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            viewTasks(currentProject);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ViewMode getViewMode() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return viewMode;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reminders \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void rescheduleReminders() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.rescheduleReminder();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public BooleanProperty isReminderEmpty() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return reminderManager.isReminderEmpty();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public StringProperty getReminder() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return reminderManager.getReminder();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void removeReminder() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.removeReminder();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Timers \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cTrackedItem\u003e getRunningTimers() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return runningTimers;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Update the running timers list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void updateRunningTimers() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        runningTimers.clear();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (TrackedItem trackedItem : versionedProjectBook.getTrackedItemList()) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (trackedItem.isRunning()) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                runningTimers.add(trackedItem);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (!trackedItem.isTask()) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                Project project \u003d (Project) trackedItem;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                for (TrackedItem taskItem : project.getTaskList()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    if (taskItem.isRunning()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        runningTimers.add(taskItem);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return versionedProjectBook.equals(other.versionedProjectBook)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 reminderManager.equals(other.reminderManager)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 filteredTrackedItems.get().equals(other.filteredTrackedItems.get())"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 runningTimers.equals(other.runningTimers)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 viewMode.equals(other.viewMode);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        //\u0026\u0026 currentProject.equals(other.currentProject)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean canUndoCommand() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return versionedProjectBook.canUndoCommand();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean canRedoCommand() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return versionedProjectBook.canRedoCommand();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void commitToHistory() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.commit(viewMode, currentProject);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void undoCommand() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // extract timer related details of ProjectBook version before undo"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentProject \u003d versionedProjectBook.getCurrentProject();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.undo();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project newProject \u003d versionedProjectBook.getCurrentProject();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // extract view mode details from ProjectBook version after undo"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        viewMode \u003d versionedProjectBook.getCurrentViewMode();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        resetUi(viewMode, currentProject);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (viewMode \u003d\u003d ViewMode.TASKS) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            viewTasks(newProject);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void resetUi(ViewMode viewMode, Project project) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(viewMode);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (viewMode) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case PROJECTS:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            viewProjects();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            logger.log(Level.INFO, \"View mode changed to project view\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case TASKS:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            assert project !\u003d null;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            viewTasks(project);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            logger.log(Level.INFO, \"View mode changed to task view\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void redoCommand() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.redo();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // extract both timer related and ViewMode details from ProjectBook version after redo"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        viewMode \u003d versionedProjectBook.getCurrentViewMode();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentProject \u003d versionedProjectBook.getCurrentProject();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        resetUi(viewMode, currentProject);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (viewMode \u003d\u003d ViewMode.TASKS) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            viewTasks(currentProject);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 93,
      "pr4aveen": 30,
      "claracheong4": 56,
      "kkangs0226": 101,
      "khoodehui": 30,
      "-": 103
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ProjectBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.UniqueTrackedItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.ReminderManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Wraps all data at the project-book level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Duplicates are not allowed (by .isSameProject comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBook implements ReadOnlyProjectBook {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ProjectBook.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    protected final UniqueTrackedItemList trackedItems;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        trackedItems \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates an ProjectBook using the Projects in the {@code toBeCopied}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook(ReadOnlyProjectBook toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the contents of the project list with {@code trackedItems}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code trackedItems} must not contain duplicate tracked items."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setTrackedItems(List\u003cTrackedItem\u003e trackedItems) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.trackedItems.setTrackedItems(trackedItems);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Resets the existing data of this {@code ProjectBook} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData(ReadOnlyProjectBook newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        setTrackedItems(newData.getTrackedItemList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /// sort operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the order of the list of projects according to given {@code sortType} and {@code isAscending}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType                   type of sort."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                order of sort."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isSortedByCompletionStatus sorted by completion status."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setOrder(SortType sortType, boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(sortType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        trackedItems.setOrder(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //// project-level operations"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if a tracked item with the same identity as {@code trcakedItem} exists in the project book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean hasTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(trackedItem);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return trackedItems.contains(trackedItem);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Adds a tracked item to the project book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The tracked item must not already exist in the project book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void addTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        trackedItems.add(trackedItem);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the given tracked item {@code target} in the list with {@code editedTrackedItem}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code target} must exist in the project book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The tracked item identity of {@code trackedItem} must not be the same as another existing tracked item in"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * the project book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setTrackedItem(TrackedItem target, TrackedItem editedTrackedItem) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(editedTrackedItem);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        trackedItems.setTrackedItem(target, editedTrackedItem);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Removes {@code key} from this {@code ProjectBook}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code key} must exist in the project book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void removeTrackedItem(TrackedItem key) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        trackedItems.remove(key);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return trackedItems.asUnmodifiableObservableList().size() + \" projects\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cTrackedItem\u003e getTrackedItemList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return trackedItems.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Set\u003cTag\u003e getTrackedItemTags() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        getTrackedItemList().forEach(project -\u003e tags.addAll(project.getTags()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Reschedule all reminders in the model."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void rescheduleReminder(ReminderManager reminderManager) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        for (TrackedItem item : trackedItems) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            reminderManager.rescheduleReminder((Project) item);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Remove the reminder of a trackedItem."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project project that contains the task with a reminder to be removed."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void removeReminder(Project project) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project newProject \u003d project.removeReminder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        trackedItems.setTrackedItem(project, newProject);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Reminder of project removed: \" + project.getName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Remove the reminder of a trackedItem."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project project that contains the task with a reminder to be removed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param task    task with a reminder to be removed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void removeReminder(Project project, Task task) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project newProject \u003d project.removeReminder(task);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        trackedItems.setTrackedItem(project, newProject);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Reminder of task of project removed: \" + task.getName() + \" \" + project.getName());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof ProjectBook // instanceof handles nulls"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 trackedItems.equals(((ProjectBook) other).trackedItems));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return trackedItems.hashCode();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 32,
      "claracheong4": 55,
      "kkangs0226": 13,
      "khoodehui": 8,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ProjectBookWithUi.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class ProjectBookWithUi extends ProjectBook {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final ViewMode viewMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final Project project;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Constructs a {@code ProjectBookWithUi}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public ProjectBookWithUi(ReadOnlyProjectBook projectBook, ViewMode viewMode, Project project) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        super(projectBook);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.viewMode \u003d viewMode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.project \u003d project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public ViewMode getViewMode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return viewMode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project getProject() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 26
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ReadOnlyProjectBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Unmodifiable view of an project book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface ReadOnlyProjectBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an unmodifiable view of the tracked item list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This list will not contain any duplicate tracked items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ObservableList\u003cTrackedItem\u003e getTrackedItemList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the collection of all tags that the user has entered for the tracked item."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    Set\u003cTag\u003e getTrackedItemTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6,
      "claracheong4": 3,
      "khoodehui": 5,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    GuiWindowSettings getGuiWindowSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    GuiThemeSettings getGuiThemeSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    StatisticTimeframeSettings getStatisticTimeframeSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "khoodehui": 8,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private GuiWindowSettings guiWindowSettings \u003d new GuiWindowSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private GuiThemeSettings guiThemeSettings \u003d new GuiThemeSettings();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StatisticTimeframeSettings statisticTimeframeSettings \u003d new StatisticTimeframeSettings();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Path projectBookFilePath \u003d Paths.get(\"data\" , \"projectbook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setGuiWindowSettings(newUserPrefs.getGuiWindowSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setGuiThemeSettings(newUserPrefs.getGuiThemeSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setStatisticTimeframeSettings(newUserPrefs.getStatisticTimeframeSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        setProjectBookFilePath(newUserPrefs.getProjectBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiWindowSettings getGuiWindowSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return guiWindowSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public GuiThemeSettings getGuiThemeSettings() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return guiThemeSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatisticTimeframeSettings getStatisticTimeframeSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return statisticTimeframeSettings;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiWindowSettings(GuiWindowSettings guiWindowSettings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(guiWindowSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.guiWindowSettings \u003d guiWindowSettings;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiThemeSettings(GuiThemeSettings guiThemeSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(guiThemeSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.guiThemeSettings \u003d guiThemeSettings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setStatisticTimeframeSettings(StatisticTimeframeSettings statisticTimeframeSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        requireNonNull(statisticTimeframeSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.statisticTimeframeSettings \u003d statisticTimeframeSettings;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBookFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath(Path projectBookFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(projectBookFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBookFilePath \u003d projectBookFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return guiWindowSettings.equals(o.guiWindowSettings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                \u0026\u0026 guiThemeSettings.equals(o.guiThemeSettings)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                \u0026\u0026 statisticTimeframeSettings.equals(o.statisticTimeframeSettings)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 projectBookFilePath.equals(o.projectBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return Objects.hash(guiWindowSettings, guiThemeSettings,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            statisticTimeframeSettings, projectBookFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        sb.append(\"Gui window settings : \" + guiWindowSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        sb.append(\"Gui theme settings : \" + guiThemeSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        sb.append(\"Statistic timeframe settings : \" + statisticTimeframeSettings);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + projectBookFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 10,
      "khoodehui": 40,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/VersionedProjectBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class VersionedProjectBook extends ProjectBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String UNDO \u003d \"undo\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String REDO \u003d \"redo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String COMMIT \u003d \"commit\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private List\u003cProjectBookWithUi\u003e projectBookStateList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Constructs a {@code VersionedProjectBook}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public VersionedProjectBook(ReadOnlyProjectBook projectBook, ViewMode viewMode, Project currentProject) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        super(projectBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.projectBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        projectBookStateList.add(new ProjectBookWithUi(projectBook, viewMode, currentProject));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Flushes out versions to be redone after the {@code currentStatePointer} and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * commits current {@code VersionedProjectBook} into {@code projectBookStateList}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void commit(ViewMode viewMode, Project currentProject) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        int historySize \u003d projectBookStateList.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (currentStatePointer \u003c historySize - 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            flushRedoVersions();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        projectBookStateList.add(new ProjectBookWithUi(this, viewMode, currentProject));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        shiftPointer(COMMIT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Undoes command that was previously executed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assert canUndoCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        shiftPointer(UNDO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ReadOnlyProjectBook undoVersion \u003d projectBookStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        resetData(undoVersion);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Redoes the command that was previously undone."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assert canRedoCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        shiftPointer(REDO);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ReadOnlyProjectBook redoVersion \u003d projectBookStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        resetData(redoVersion);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private void shiftPointer(String command) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (command.equals(REDO) || command.equals(COMMIT)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            currentStatePointer++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            currentStatePointer--;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private void flushRedoVersions() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        int historySize \u003d projectBookStateList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        int nextPointer \u003d currentStatePointer + 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (int i \u003d nextPointer; i \u003c historySize; i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            projectBookStateList.remove(nextPointer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Checks if {@code VersionedProjectBook} is able to undo commands."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return true if {@code VersionedProjectBook} has commands to undo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean canUndoCommand() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return currentStatePointer !\u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Checks if {@code VersionedProjectBook} is able to redo commands."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return true if {@code VersionedProjectBook} has commands to redo."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean canRedoCommand() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        int size \u003d projectBookStateList.size();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return currentStatePointer \u003c size - 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public List\u003cProjectBookWithUi\u003e getProjectBookSateList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projectBookStateList;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int getCurrentStatePointer() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return currentStatePointer;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public ProjectBookWithUi getCurrentProjectBookWithUi() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return projectBookStateList.get(currentStatePointer);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public ViewMode getCurrentViewMode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return getCurrentProjectBookWithUi().getViewMode();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project getCurrentProject() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return getCurrentProjectBookWithUi().getProject();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                || (other instanceof VersionedProjectBook // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 trackedItems.equals(((VersionedProjectBook) other).trackedItems)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 projectBookStateList.equals(((VersionedProjectBook) other).getProjectBookSateList())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d ((VersionedProjectBook) other).getCurrentStatePointer());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 125
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/ViewMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public enum ViewMode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    PROJECTS,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    TASKS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    ALL"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 7
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/CompletionStatus.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project\u0027s Completion status in the project book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class CompletionStatus implements Comparable\u003cCompletionStatus\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final CompletionStatus COMPLETED \u003d new CompletionStatus(true);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    // toString fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String COMPLETED_ICON \u003d \"\\u2714\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INCOMPLETE_ICON \u003d \"\\u2718\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final boolean completionStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code CompletionStatus}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public CompletionStatus() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private CompletionStatus(boolean newCompletionStatus) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d newCompletionStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the project is completed, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return isCompleted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.completionStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the reversed completion status."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * If the completion status was true, return a completion status with false.."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the reverse completion status"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public CompletionStatus reverse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new CompletionStatus(!this.completionStatus);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.completionStatus ? COMPLETED_ICON : INCOMPLETE_ICON;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof CompletionStatus // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.completionStatus \u003d\u003d ((CompletionStatus) other).completionStatus); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int compareTo(CompletionStatus other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Boolean.compare(this.completionStatus, other.completionStatus);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Boolean.hashCode(this.completionStatus);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 68
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.TimeWrapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project\u0027s deadline in the project book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Deadline implements Comparable\u003cDeadline\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The constant CREATED_DATE_MESSAGE_CONSTRAINT."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String CREATED_DATE_MESSAGE_CONSTRAINT \u003d \"Date of deadline cannot be earlier than created date\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The constant MESSAGE_CONSTRAINTS."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d DateWrapper.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + TimeWrapper.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + CREATED_DATE_MESSAGE_CONSTRAINT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final Optional\u003cDateWrapper\u003e dateWrapper;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final Optional\u003cTimeWrapper\u003e timeWrapper;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs an empty deadline."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateWrapper \u003d Optional.empty();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timeWrapper \u003d Optional.empty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param dateWrapper        A valid dateWrapper after or on created dateWrapper."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A created dateWrapper."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline(String dateWrapper, DateWrapper createdDateWrapper) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireAllNonNull(dateWrapper, createdDateWrapper);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(DateWrapper.isValid(dateWrapper), DateWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(!isBeforeCreatedDate(dateWrapper, createdDateWrapper), CREATED_DATE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateWrapper \u003d Optional.of(new DateWrapper(dateWrapper));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timeWrapper \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param dateWrapper        A valid dateWrapper after or on created dateWrapper."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param timeWrapper        A valid timeWrapper."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A created dateWrapper."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline(String dateWrapper, String timeWrapper, DateWrapper createdDateWrapper) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(dateWrapper, timeWrapper);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(createdDateWrapper);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(DateWrapper.isValid(dateWrapper), DateWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(TimeWrapper.isValid(timeWrapper), TimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(!isBeforeCreatedDate(dateWrapper, createdDateWrapper), CREATED_DATE_MESSAGE_CONSTRAINT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateWrapper \u003d Optional.of(new DateWrapper(dateWrapper));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timeWrapper \u003d Optional.of(new TimeWrapper(timeWrapper));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the dateWrapper is after or on the created dateWrapper, false otherwise."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param dateStr     A string to be parsed as a dateWrapper."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A created dateWrapper."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the isBeforeCreatedDate boolean"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isBeforeCreatedDate(String dateStr, DateWrapper createdDateWrapper) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper dateWrapper \u003d new DateWrapper(dateStr);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateWrapper.compareTo(createdDateWrapper) \u003c 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the deadline is empty, false otherwise."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the isEmpty boolean"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateWrapper.isEmpty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets dateWrapper of a deadline."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the dateWrapper"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws NoSuchElementException If there is no dateWrapper."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateWrapper getDate() throws NoSuchElementException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateWrapper.get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the deadline has a timeWrapper, false otherwise."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the hasTime boolean"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean hasTime() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.timeWrapper.isPresent();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets timeWrapper of a deadline."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the timeWrapper"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws NoSuchElementException If there is no timeWrapper."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimeWrapper getTime() throws NoSuchElementException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.timeWrapper.get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets formatted deadline."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the formatted deadline"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormattedDeadline() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return isEmpty() ? \"No deadline set\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                : this.dateWrapper.map(DateWrapper::getFormatted).orElse(\"\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + this.timeWrapper.map(timeWrapper -\u003e \" \" + timeWrapper.getFormatted()).orElse(\"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets the number of days to the dateWrapper of the deadline, from the current timeWrapper."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @return Number of days to deadline."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public long daysToDeadline() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        //return DateWrapper.getTimeBetween(Clock.now().getDate(), getDate(), ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return ChronoUnit.DAYS.between(Clock.now().getDate(), getDate().get());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateWrapper.map(DateWrapper::toString).orElse(\"\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + this.timeWrapper.map(TimeWrapper::toString).orElse(\"\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof Deadline // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.dateWrapper.equals(((Deadline) other).dateWrapper)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.timeWrapper.equals(((Deadline) other).timeWrapper)); // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(this.dateWrapper, this.timeWrapper);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compareTo(Deadline other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper thisDateWrapper \u003d this.getDate();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper otherDateWrapper \u003d other.getDate();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (thisDateWrapper.get().isBefore(otherDateWrapper.get())) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else if (thisDateWrapper.get().isAfter(otherDateWrapper.get())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return sameDateCompare(other);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Compares timeWrapper of two deadlines with same dateWrapper."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param other other deadline."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer to indicate order."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private int sameDateCompare(Deadline other) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!this.hasTime() \u0026\u0026 other.hasTime()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.hasTime() \u0026\u0026 !other.hasTime()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else if (this.hasTime() \u0026\u0026 other.hasTime()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            TimeWrapper thisTimeWrapper \u003d this.getTime();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            TimeWrapper otherTimeWrapper \u003d other.getTime();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return thisTimeWrapper.compareTo(otherTimeWrapper);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 160,
      "kkangs0226": 27,
      "khoodehui": 11
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Represent a Project\u0027s description in the project book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description will be removed if blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Description EMPTY_DESCRIPTION \u003d new Description(\"\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param description A description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return value.equals(EMPTY_DESCRIPTION.value);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 42,
      "khoodehui": 4
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project\u0027s name in the project book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String thisName \u003d this.fullName.toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String otherName \u003d other.fullName.toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return thisName.compareTo(otherName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "kkangs0226": 8,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Project.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.ReminderManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project in the project book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class Project extends TrackedItem {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private UniqueTrackedItemList taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType sortType \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private boolean isAscending \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private boolean isSortedByCompletionStatus \u003d true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code Project}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param name               A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param description        A description of the project."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus   A completion status of the project."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A dateWrapper associated with the creation of the project."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param deadline           A deadline associated with the project."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder           A reminder associated with the tracked item."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param tags               A set of tags associated to the project."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param durations          A list of {@code WorkDuration} associated with the project."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param timerWrapper       A timerWrapper associated with the project."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param taskList           UniqueTrackedListList associated with the project."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Project(Name name, Description description, CompletionStatus completionStatus,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                   DateWrapper createdDateWrapper, Deadline deadline, Reminder reminder, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                   UniqueDurationList durations, TimerWrapper timerWrapper, UniqueTrackedItemList taskList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        super(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                timerWrapper);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Constructs a {@code Project}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param name                       A valid name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param description                A description of the project."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param completionStatus           A completion status of the project."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param createdDateWrapper         A dateWrapper associated with the creation of the project."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param deadline                   A deadline associated with the project."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param reminder                   A reminder associated with the tracked item."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param tags                       A set of tags associated to the project."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param durations                  A list of {@code WorkDuration} associated with the project."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param timerWrapper               A timerWrapper associated with the project."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param taskList                   UniqueTrackedListList associated with the project."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType                  A boolean to check the type of order of the sort."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                A boolean to check if the list is sorted in ascending order."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isSortedByCompletionStatus A boolean to check if the list is sorted by completion status."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project(Name name, Description description, CompletionStatus completionStatus,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                   DateWrapper createdDateWrapper, Deadline deadline, Reminder reminder, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                   UniqueDurationList durations, TimerWrapper timerWrapper, UniqueTrackedItemList taskList,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                   SortType sortType, boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        super(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                timerWrapper);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.sortType \u003d sortType;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.isAscending \u003d isAscending;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.isSortedByCompletionStatus \u003d isSortedByCompletionStatus;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        taskList.setOrder(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Constructs a {@code Project}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param name               A valid name."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param description        A description of the project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus   A completion status of the project."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A dateWrapper associated with the creation of the project."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param deadline           A deadline associated with the project."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder           A reminder associated with the tracked item."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param tags               A set of tags associated to the project."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param durations          A list of {@code WorkDuration} associated with the project."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param timerWrapper       A timerWrapper associated with the project."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Project(Name name, Description description, CompletionStatus completionStatus,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                   DateWrapper createdDateWrapper, Deadline deadline, Reminder reminder, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                   UniqueDurationList durations, TimerWrapper timerWrapper) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        super(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                timerWrapper);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        taskList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a new {@code Project}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param name               A valid name."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus   A completion status of the project."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A dateWrapper associated with the creation of the project"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param deadline           A deadline associated with the project."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder           A reminder associated with the tracked item."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param description        A description of the project."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @param tags               A set of tags associated to the project."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Project(Name name, Description description, CompletionStatus completionStatus,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                   DateWrapper createdDateWrapper, Deadline deadline, Reminder reminder, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        super(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        taskList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a copy of this project with its timerWrapper started."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return A copy of this project, but with its timerWrapper started"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Project startTimer() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper newTimerWrapper \u003d timerWrapper.start();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                newTimerWrapper, taskList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a copy of this project with its timerWrapper stopped, then adds the timed duration into"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return A copy of this project, but with its timerWrapper stopped"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Project stopTimer() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper newTimerWrapper \u003d timerWrapper.stop();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        WorkDuration duration \u003d new WorkDuration(newTimerWrapper.getStartTime(), newTimerWrapper.getStopTime());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList newDurations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        newDurations.setDurations(durations);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        newDurations.add(duration);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                newDurations, newTimerWrapper, taskList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Adds a task in the {@code Project}\u0027s {@code UniqueTrackedItemList}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param task task to be added."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return A copy of this project, but with task added."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project addTask(TrackedItem task) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList \u003d this.taskList.addTask(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                tags, durations, timerWrapper, newList, sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Checks whether a task is in the {@code Project}\u0027s {@code UniqueTrackedItemList}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param task task that needs to be checked."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean hasTask(TrackedItem task) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return taskList.contains(task);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Deletes a task in the {@code Project}\u0027s {@code UniqueTrackedItemList}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param task task to be deleted."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return A copy of this project, but with task removed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project deleteTask(TrackedItem task) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList \u003d taskList.removeTask(task);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                tags, durations, timerWrapper, newList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Edits a task is in the {@code Project}\u0027s {@code UniqueTrackedItemList} and returns new Project."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param target     task to be replaced."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param editedTask task to replace the original task with."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project setTask(TrackedItem target, TrackedItem editedTask) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList \u003d taskList.copy();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        newList.setTrackedItem(target, editedTask);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        newList.setOrder(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                tags, durations, timerWrapper, newList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Removes all tasks belonging to this project."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project clearTasks() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                tags, durations, timerWrapper, newList, sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Orders the list of tasks in a way given by the {@code sortType}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType                  A boolean to check the type of order of the sort."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                A boolean to check if the list is sorted in ascending order."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isSortedByCompletionStatus A boolean to check if the list is sorted by completion status."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public Project orderTaskList(SortType sortType, boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireAllNonNull(sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList \u003d taskList.copy();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                tags, durations, timerWrapper, newList, sortType, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cTrackedItem\u003e getTaskList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return taskList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both tracked item of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a weaker notion of equality between two projects."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean isSameTrackedItem(TrackedItem otherTrackedItem) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!(otherTrackedItem instanceof Project)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return super.isSameTrackedItem(otherTrackedItem);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Reschedule all reminders in the task list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void rescheduleReminder(ReminderManager reminderManager) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        for (TrackedItem task : taskList) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            reminderManager.rescheduleReminder(this, (Task) task);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Remove the reminder of a project."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Project removeReminder() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Reminder newReminder \u003d this.reminder.remove();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, newReminder, tags,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                durations, timerWrapper, taskList);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Remove the reminder of a trackedItem."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Project removeReminder(Task task) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Task newTask \u003d task.removeReminder();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        taskList.setTrackedItem(task, newTask);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                timerWrapper, taskList);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if the instance is a Task. Returns false otherwise."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean isTask() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both tracked items have the same identity and data fields."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a stronger notion of equality between two tracked items."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!(other instanceof Project)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                \u0026\u0026 this.getTaskList().equals(((Project) other).getTaskList());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 51,
      "pr4aveen": 64,
      "claracheong4": 72,
      "kkangs0226": 73,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/SortType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public enum SortType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    ALPHA,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    DEADLINE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    CREATED,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    NULL"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 8
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Represents a Task in the project book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class Task extends TrackedItem {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Constructs a {@code Task}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param description A description of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus A completion status of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A date associated with the creation of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param deadline A deadline associated with the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder         A reminder associated with the tracked item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param tags A set of tags associated to the task."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param durations A list of {@code WorkDuration} associated with the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param timerWrapper A timerWrapper associated with the task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Task(Name name, Description description, CompletionStatus completionStatus, DateWrapper createdDateWrapper,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Deadline deadline, Reminder reminder, Set\u003cTag\u003e tags, UniqueDurationList durations,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                TimerWrapper timerWrapper) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        super(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                timerWrapper);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Constructs a new {@code Task}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus A completion status of the task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A date associated with the creation of the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param deadline A deadline associated with the task."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder         A reminder associated with the tracked item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param description A description of the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param tags A set of tags associated to the task."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Task(Name name, Description description, CompletionStatus completionStatus, DateWrapper createdDateWrapper,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Deadline deadline, Reminder reminder, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        super(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a copy of this task with its timerWrapper started."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return A copy of this task, but with its timerWrapper started"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Task startTimer() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper newTimerWrapper \u003d timerWrapper.start();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Task(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                newTimerWrapper);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a copy of this task with its timerWrapper stopped, then adds the timed duration into"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return A copy of this task, but with its timerWrapper stopped"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Task stopTimer() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper newTimerWrapper \u003d timerWrapper.stop();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        WorkDuration duration \u003d new WorkDuration(newTimerWrapper.getStartTime(), newTimerWrapper.getStopTime());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueDurationList newDurations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        newDurations.setDurations(durations);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        newDurations.add(duration);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Task(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                newDurations, newTimerWrapper);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Removes the reminder of a project."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Task removeReminder() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Reminder newReminder \u003d reminder.remove();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Task(name, description, completionStatus, createdDateWrapper, deadline, newReminder, tags, durations,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                timerWrapper);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both tracked item of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean isSameTrackedItem(TrackedItem otherTrackedItem) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!(otherTrackedItem instanceof Task)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return super.isSameTrackedItem(otherTrackedItem);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if the instance is a Task. Returns false otherwise."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean isTask() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both tracked items have the same identity and data fields."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a stronger notion of equality between two tracked items."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return super.equals(other);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 86,
      "claracheong4": 38
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/TrackedItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Represents a Tracked Item in the project book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public abstract class TrackedItem {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    protected final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    protected final Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected final CompletionStatus completionStatus;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected final DateWrapper createdDateWrapper;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    protected final Deadline deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected final Reminder reminder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    protected final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected final TimerWrapper timerWrapper;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    protected final UniqueDurationList durations;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Constructs a {@code TrackedItem}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param name               A valid name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param description        A description of the tracked item."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus   A completion status of the tracked item."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A dateWrapper associated with the creation of the tracked item."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param deadline           A deadline associated with the tracked item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder           A reminder associated with the tracked item."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param tags               A set of tags associated to the tracked item."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param durations          A list of {@code WorkDuration} associated with the tracked item."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param timerWrapper       A timerWrapper associated with the tracked item."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TrackedItem(Name name, Description description, CompletionStatus completionStatus,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                       DateWrapper createdDateWrapper, Deadline deadline, Reminder reminder,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                       Set\u003cTag\u003e tags, UniqueDurationList durations, TimerWrapper timerWrapper) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDateWrapper \u003d createdDateWrapper;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.durations \u003d durations;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timerWrapper \u003d timerWrapper;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Constructs a new {@code TrackedItem}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param name               A valid name."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param description        A description of the tracked item."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus   A completion status of the tracked item."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper A dateWrapper associated with the creation of the tracked item"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param deadline           A deadline associated with the tracked item."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder           A reminder associated with the tracked item."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param tags               A set of tags associated to the tracked item."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TrackedItem(Name name, Description description, CompletionStatus completionStatus,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                       DateWrapper createdDateWrapper, Deadline deadline, Reminder reminder, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDateWrapper \u003d createdDateWrapper;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.durations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timerWrapper \u003d new TimerWrapper();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public CompletionStatus getCompletionStatus() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return completionStatus;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateWrapper getCreatedDate() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return createdDateWrapper;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Reminder getReminder() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return reminder;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Gets Deadline and name for {@code DeadLineCompare} comparator."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns null if deadline is empty as {@code Comparator.nullsLast} method is used."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public HashMap\u003cString, Object\u003e getNullOrDeadline() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (deadline.isEmpty()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Name name \u003d getName();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Deadline deadline \u003d getDeadline();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        HashMap\u003cString, Object\u003e nameDeadlineMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        nameDeadlineMap.put(\"name\", name);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        nameDeadlineMap.put(\"deadline\", deadline);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return nameDeadlineMap;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an unmodifiable view of the durations list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cWorkDuration\u003e getDurationList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return durations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Remove the reminder of a trackedItem."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public abstract TrackedItem removeReminder();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a copy of this tracked item with its timerWrapper started."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return A copy of this tracked item, but with its timerWrapper started"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public abstract TrackedItem startTimer();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns a copy of this tracked item with its timerWrapper stopped, then adds the timed duration into"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return A copy of this tracked item, but with its timerWrapper stopped"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public abstract TrackedItem stopTimer();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimerWrapper getTimer() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return timerWrapper;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Checks if the tracked item\u0027s timerWrapper is currently running."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return timerWrapper.isRunning();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both tracked item of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a weaker notion of equality between two projects."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean isSameTrackedItem(TrackedItem otherTrackedItem) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (otherTrackedItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return otherTrackedItem !\u003d null"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getName().equals(getName())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getCompletionStatus().equals(getCompletionStatus())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getCreatedDate().equals(getCreatedDate())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getReminder().equals(getReminder());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if the instance is a Task. Returns false otherwise."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public abstract boolean isTask();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if both tracked items have the same identity and data fields."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This defines a stronger notion of equality between two tracked items."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!(other instanceof TrackedItem)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem otherTrackedItem \u003d (TrackedItem) other;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return otherTrackedItem.getName().equals(getName())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getCompletionStatus().equals(getCompletionStatus())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getReminder().equals(getReminder())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getTags().equals(getTags())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 otherTrackedItem.getDurationList().equals(getDurationList());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                durations, timerWrapper);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(\" Completion Status: \")"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(getCompletionStatus())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .append(\" Created Date: \")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .append(getCreatedDate())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(\" Reminder: \")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .append(getReminder().getFormattedReminder())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 185,
      "claracheong4": 65
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/UniqueTrackedItemList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.comparators.CompletionStatusCompare;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.comparators.CreatedDateCompare;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.comparators.DeadlineCompare;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.comparators.NameCompare;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.exceptions.DuplicateTrackableItemException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.exceptions.TrackableItemNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A list of tracked items that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A project is considered unique by comparing using {@code TrackedItem#isSameTrackedItem(TrackedItem)}. As such, adding"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * and updating of tracked items uses TrackedItem#isSameTrackedItem(TrackedItem) for equality so as to ensure that"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * the tracked item being added or updated is unique in terms of identity in the UniqueTrackedItemList. However, the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * removal of a tracked item uses TrackedItem#equals(Object) so as to ensure that the tracked item with exactly the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * same fields will be removed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * @see TrackedItem#isSameTrackedItem(TrackedItem)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class UniqueTrackedItemList implements Iterable\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortType DEFAULT_SORT_TYPE \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private SortType sortType \u003d DEFAULT_SORT_TYPE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final ObservableList\u003cTrackedItem\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final ObservableList\u003cTrackedItem\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if the list contains an equivalent tracked item as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean contains(TrackedItem toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTrackedItem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Adds a tracked item to the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The tracked item must not already exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void add(TrackedItem toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new DuplicateTrackableItemException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public UniqueTrackedItemList addTask(TrackedItem toAdd) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new DuplicateTrackableItemException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        newList \u003d this.copy();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        newList.internalList.add(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the tracked item {@code target} in the list with {@code editedTrackedItem}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The tracked item identity of {@code editedTrackedItem} must not be the same as another existing tracked item"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setTrackedItem(TrackedItem target, TrackedItem editedTrackedItem) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(target, editedTrackedItem);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new TrackableItemNotFoundException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!target.isSameTrackedItem(editedTrackedItem) \u0026\u0026 contains(editedTrackedItem)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new DuplicateTrackableItemException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.set(index, editedTrackedItem);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Duplicates list of tasks and replaces the task {@code target} in the list with {@code editedTrackedItem}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * The task identity of {@code editedTrackedItem} must not be the same as another existing task"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return duplicate {@code UniqueTrackedItemList} list with new updated task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public UniqueTrackedItemList setTasks(TrackedItem target, TrackedItem editedTrackedItem) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireAllNonNull(target, editedTrackedItem);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new TrackableItemNotFoundException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!target.isSameTrackedItem(editedTrackedItem) \u0026\u0026 contains(editedTrackedItem)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new DuplicateTrackableItemException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        newList \u003d this.copy();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        newList.internalList.set(index, editedTrackedItem);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Removes the equivalent tracked item from the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The tracked item must exist in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove(TrackedItem toRemove) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new TrackableItemNotFoundException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Duplicates existing list and removes the equivalent task from the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return duplicate {@code UniqueTrackedItemList} list with removed task."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public UniqueTrackedItemList removeTask(TrackedItem toRemove) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        newList \u003d this.copy();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (!newList.internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new TrackableItemNotFoundException();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setTrackedItems(UniqueTrackedItemList replacement) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Replaces the contents of this list with {@code trackedItems}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * {@code trackedItems} must not contain duplicate tracked items."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setTrackedItems(List\u003cTrackedItem\u003e trackedItems) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        requireAllNonNull(trackedItems);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        if (!projectsAreUnique(trackedItems)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new DuplicateTrackableItemException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        internalList.setAll(trackedItems);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Creates a duplicate {@code UniqueTrackedItemList}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return duplicate {@code UniqueTrackedItemList} list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public UniqueTrackedItemList copy() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        UniqueTrackedItemList newList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (TrackedItem t : internalList) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            newList.add(t);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the order of the list of tracked items according to given {@code sortType} and {@code isAscending}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param sortType                   type of sort."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                order of sort."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isSortedByCompletionStatus sort by creation status."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setOrder(SortType sortType, boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        requireNonNull(sortType);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (sortType) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case ALPHA:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setOrderAlphaType(isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setOrderDeadlineType(isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case CREATED:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setOrderCreatedDateType(isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case NULL:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setOrderNullType(isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            // Will always be one of the above. Default does nothing."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the order of list of tracked items by alphabetical order, ascending or descending based on user input."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                order of sort specified by user."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isSortedByCompletionStatus sort by creation status."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setOrderAlphaType(boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Comparator\u003cTrackedItem\u003e nameCompare \u003d new NameCompare();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        nameCompare \u003d isAscending ? nameCompare : nameCompare.reversed();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortType \u003d SortType.ALPHA;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Comparator\u003cTrackedItem\u003e compare;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            compare \u003d new CompletionStatusCompare().thenComparing(nameCompare);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            compare \u003d nameCompare;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        internalList.sort(compare);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the order of list of tracked items by deadline order, ascending or descending based on user input."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                order of sort specified by user."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isSortedByCompletionStatus sort by creation status."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setOrderDeadlineType(boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Comparator\u003cTrackedItem\u003e nameCompare \u003d new NameCompare();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Comparator\u003cHashMap\u003cString, Object\u003e\u003e deadlineCompareHashMap \u003d new DeadlineCompare();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadlineCompareHashMap \u003d isAscending ? deadlineCompareHashMap : deadlineCompareHashMap.reversed();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Comparator\u003cTrackedItem\u003e deadlineCompare \u003d Comparator.comparing(TrackedItem::getNullOrDeadline,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Comparator.nullsLast(deadlineCompareHashMap));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadlineCompare \u003d deadlineCompare.thenComparing(nameCompare);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sortType \u003d SortType.DEADLINE;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Comparator\u003cTrackedItem\u003e compare;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            compare \u003d new CompletionStatusCompare().thenComparing(deadlineCompare);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            compare \u003d deadlineCompare;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        internalList.sort(compare);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the order of list of tracked items by created date order, ascending or descending based on user input."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                order of sort specified by user."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isSortedByCompletionStatus sort by creation status."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setOrderCreatedDateType(boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Comparator\u003cTrackedItem\u003e createdDateCompare \u003d new CreatedDateCompare();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        createdDateCompare \u003d isAscending ? createdDateCompare : createdDateCompare.reversed();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.sortType \u003d SortType.CREATED;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Comparator\u003cTrackedItem\u003e compare;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            compare \u003d new CompletionStatusCompare().thenComparing(createdDateCompare);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            compare \u003d createdDateCompare;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        internalList.sort(compare);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the order of the list of tracked items to current sort type with specified order"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * if sort type has not been specified by user."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param isAscending                order of sort specified by user."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isSortedByCompletionStatus sort by creation status."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setOrderNullType(boolean isAscending, boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        switch (this.sortType) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case ALPHA:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setOrder(SortType.ALPHA, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case DEADLINE:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setOrder(SortType.DEADLINE, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        case CREATED:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            setOrder(SortType.CREATED, isAscending, isSortedByCompletionStatus);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            // Will always be one of the above. Default does nothing."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ObservableList\u003cTrackedItem\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Iterator\u003cTrackedItem\u003e iterator() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                || (other instanceof UniqueTrackedItemList // instanceof handles nulls"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTrackedItemList) other).internalList));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns true if {@code trackedItems} contains only unique projects."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private boolean projectsAreUnique(List\u003cTrackedItem\u003e trackedItems) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (int i \u003d 0; i \u003c trackedItems.size() - 1; i++) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            for (int j \u003d i + 1; j \u003c trackedItems.size(); j++) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                if (trackedItems.get(i).isSameTrackedItem(trackedItems.get(j))) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 144,
      "claracheong4": 50,
      "kkangs0226": 145
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/comparators/CompletionStatusCompare.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a comparator that compares the completion status of a project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class CompletionStatusCompare implements Comparator\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Compares completion status of two tracked items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param t1 first tracked item to compare."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param t2 second tracked item to compare."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return integer values for comparison."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int compare(TrackedItem t1, TrackedItem t2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        CompletionStatus status1 \u003d t1.getCompletionStatus();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        CompletionStatus status2 \u003d t2.getCompletionStatus();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return status1.compareTo(status2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 26
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/comparators/CreatedDateCompare.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Compares created date of two tracked items."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class CreatedDateCompare implements Comparator\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Compares the created date of two tracked items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param t1 first tracked item to compare."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param t2 second tracked item to compare."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer values for comparison."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public int compare(TrackedItem t1, TrackedItem t2) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper p1DateWrapper \u003d t1.getCreatedDate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper p2DateWrapper \u003d t2.getCreatedDate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        NameCompare nameCompare \u003d new NameCompare();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (p1DateWrapper.get().isBefore(p2DateWrapper.get())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else if (p1DateWrapper.get().isAfter(p2DateWrapper.get())) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return nameCompare.compare(t1, t2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6,
      "claracheong4": 7,
      "kkangs0226": 22
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/comparators/DeadlineCompare.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Compares deadline of two tracked items."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class DeadlineCompare implements Comparator\u003cHashMap\u003cString, Object\u003e\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Compares deadline of two tracked items."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p1 first project to compare."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param p2 second project to compare."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer values for comparison."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public int compare(HashMap\u003cString, Object\u003e p1, HashMap\u003cString, Object\u003e p2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Deadline p1Deadline \u003d (Deadline) p1.get(\"deadline\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Deadline p2Deadline \u003d (Deadline) p2.get(\"deadline\");;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name p1Name \u003d (Name) p1.get(\"name\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name p2Name \u003d (Name) p2.get(\"name\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        int deadlineCompareToValue \u003d p1Deadline.compareTo(p2Deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        if (deadlineCompareToValue \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return p1Name.compareTo(p2Name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return deadlineCompareToValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "kkangs0226": 33
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/comparators/NameCompare.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class NameCompare implements Comparator\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Compares name of two tracked items."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param t1 first tracked item to compare."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param t2 second tracked item to compare."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @return integer values for comparison."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public int compare(TrackedItem t1, TrackedItem t2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Name p1Name \u003d t1.getName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Name p2Name \u003d t2.getName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return p1Name.compareTo(p2Name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 8,
      "kkangs0226": 14
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/exceptions/DuplicateTrackableItemException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Signals that the operation will result in duplicate trackable items (Trackable items are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class DuplicateTrackableItemException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public DuplicateTrackableItemException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        super(\"Operation would result in duplicate trackable items\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 11
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/exceptions/TrackableItemNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Signals that the operation is unable to find the specified trackable item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class TrackableItemNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/CompletionStatusPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Tests that a {@code TrackedItem}\u0027s {@code CompletionStatus} is incomplete."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class CompletionStatusPredicate implements Predicate\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The constant COMPLETED_KEYWORD."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String COMPLETED_KEYWORD \u003d \"completed\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The constant INCOMPLETE_KEYWORD."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String INCOMPLETE_KEYWORD \u003d \"incomplete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final FindType findType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Predicate to check whether the {@code CompletionStatus} of a {@code Project} is incomplete."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param findType enum to indicate whether the find type to be used for this find command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param keywords list of keywords to check for matches."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public CompletionStatusPredicate(FindType findType, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assert keywords.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the keywords are valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param keywords the keywords"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return keywords.size() \u003d\u003d 1 // check that there is only 1 keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 (keywords.get(0).equals(COMPLETED_KEYWORD) // check that the keyword is valid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || keywords.get(0).equals(INCOMPLETE_KEYWORD)); // check that the keyword is valid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean test(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String keyword \u003d keywords.get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        boolean status \u003d trackedItem.getCompletionStatus().isCompleted();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        case COMPLETED_KEYWORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return status;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        case INCOMPLETE_KEYWORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return !status;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof CompletionStatusPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 keywords.equals(((CompletionStatusPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 69
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Tests that a {@code TrackedItem}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final FindType findType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Predicate to check whether the {@code Description} of a {@code Project} contains a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * certain keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param findType enum to indicate whether the find type to be used for this find command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param keywords list of keywords to check for matches."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(FindType findType, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean test(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Predicate\u003cString\u003e predicate \u003d keyword -\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                StringUtil.containsPartialIgnoreCase(trackedItem.getDescription().value, keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().allMatch(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().anyMatch(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)) // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 findType \u003d\u003d ((DescriptionContainsKeywordsPredicate) other).findType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 50
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/FindType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public enum FindType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ANY,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    ALL"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 6
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Tests that a {@code Project}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final FindType findType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Predicate to check whether the {@code Name} of a {@code Project} contains a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * certain keyword."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param findType enum to indicate whether the find type to be used for this find command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param keywords list of keywords to check for matches."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public NameContainsKeywordsPredicate(FindType findType, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean test(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Predicate\u003cString\u003e predicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            keyword -\u003e StringUtil.containsPartialIgnoreCase(trackedItem.getName().fullName, keyword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().allMatch(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().anyMatch(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)) // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 findType \u003d\u003d ((NameContainsKeywordsPredicate) other).findType;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 27,
      "claracheong4": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/project/predicates/TagListContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Tests that a {@code TrackedItem}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class TagListContainsKeywordsPredicate implements Predicate\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final FindType findType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Predicate to check whether the {@code Tag} of a {@code Project} contains a"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * certain keyword."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param findType enum to indicate whether the find type to be used for this find command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param keywords list of keywords to check for matches."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public TagListContainsKeywordsPredicate(FindType findType, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.findType \u003d findType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean test(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String tagString \u003d buildTagString(trackedItem.getTags());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Predicate\u003cString\u003e predicate \u003d keyword -\u003e StringUtil.containsWordIgnoreCase(tagString, keyword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        switch (findType) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ALL:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().allMatch(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        case ANY:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            // Fallthrough"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return keywords.stream().anyMatch(predicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                || (other instanceof TagListContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagListContainsKeywordsPredicate) other).keywords)) // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u0026\u0026 findType \u003d\u003d ((TagListContainsKeywordsPredicate) other).findType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Converts a set of {@code Tag} to a string where each entry is followed by a space."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * This is the format used by {@code StringUtil} methods."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @param tags set of tags."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @return string representation of tags."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private String buildTagString(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            sb.append(tag.tagName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            sb.append(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 68
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/reminder/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Project\u0027s reminder in the project book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Guarantees: immutable; is valid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class Reminder implements Comparable\u003cReminder\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The constant REMINDER_MESSAGE_CONSTRAINTS."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String REMINDER_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \"Date and time of reminder cannot be earlier than current time\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The constant MESSAGE_CONSTRAINTS."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d DateTimeWrapper.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + REMINDER_MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String REMINDER_ICON \u003d \"\\ud83d\\udd14\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final Optional\u003cDateTimeWrapper\u003e dateTimeWrapper;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs an empty reminder."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Reminder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateTimeWrapper \u003d Optional.empty();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code Reminder}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param dateTime A valid dateTimeWrapper after current date and time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Reminder(String dateTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(DateTimeWrapper.isValid(dateTime), DateTimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        checkArgument(isValid(dateTime), REMINDER_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.dateTimeWrapper \u003d Optional.of(new DateTimeWrapper(dateTime));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the dateTimeWrapper is after current date and time, false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param dateTimeStr A string to be parsed as a dateTimeWrapper."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the isValid boolean"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static boolean isValid(String dateTimeStr) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateTimeWrapper dateTimeWrapper \u003d new DateTimeWrapper(dateTimeStr);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return dateTimeWrapper.compareTo(Clock.now()) \u003e 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the reminder is empty, false otherwise."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the isEmpty boolean"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateTimeWrapper.isEmpty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets dateTimeWrapper of a reminder."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the dateTimeWrapper"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws NoSuchElementException If there is no dateTimeWrapper."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper getDateTimeWrapper() throws NoSuchElementException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateTimeWrapper.get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets status of the reminder."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the status of the reminder."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return isEmpty() ? \"\" : REMINDER_ICON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets formatted reminder."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the formatted reminder."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String getFormattedReminder() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateTimeWrapper.map(DateTimeWrapper::getFormatted).orElse(\"No reminder set\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Remove the reminder."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the new reminder."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Reminder remove() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Reminder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Instant toInstant() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.getDateTimeWrapper().get().atZone(ZoneId.systemDefault()).toInstant();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert the dateTime in reminder to a date object."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the date object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Date toDate() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Date.from(toInstant());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.dateTimeWrapper.map(DateTimeWrapper::toString).orElse(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                || (other instanceof Reminder // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 this.dateTimeWrapper.equals(((Reminder) other).dateTimeWrapper)); // state check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(this.dateTimeWrapper);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public int compareTo(Reminder other) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (this.isEmpty() \u0026\u0026 other.isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else if (this.isEmpty() \u0026\u0026 !other.isEmpty()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else if (!this.isEmpty() \u0026\u0026 other.isEmpty()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            assert !this.isEmpty() \u0026\u0026 !other.isEmpty();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return this.dateTimeWrapper.get().compareTo(other.dateTimeWrapper.get());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 156
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/reminder/ReminderManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.VersionedProjectBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Manages the scheduling of reminders in the project book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ReminderManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String TASK_REMINDER \u003d \"Project: %s\\nTask: %s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String PROJECT_REMINDER \u003d \"Project: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ReminderManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    protected final VersionedProjectBook versionedProjectBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected Timer timer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final StringProperty currReminder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Instantiates a new Reminder manager."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * @param versionedProjectBook the project book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public ReminderManager(VersionedProjectBook versionedProjectBook) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.versionedProjectBook \u003d versionedProjectBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.currReminder \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.currReminder.set(EMPTY_STRING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Initialised reminder manager\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void resetTimer() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timer.cancel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Reschedule all reminders in the project book."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void rescheduleReminder() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Rescheduling all reminders\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        resetTimer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        versionedProjectBook.rescheduleReminder(this);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Reschedule the reminder of a {@code project} and its tasks."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project the project"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void rescheduleReminder(Project project) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!project.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.info(\"Rescheduling reminder for project:\" + project.getName() + \" at \" + project.getReminder());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            scheduleReminder(project);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        project.rescheduleReminder(this); // reschedule tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Reschedule the reminder of a {@code task}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project the project"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param task    the task"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void rescheduleReminder(Project project, Task task) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!task.getReminder().isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.info(\"Rescheduling reminder for task:\" + task.getName() + \" from project: \" + project.getName()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    + \" at \" + task.getReminder());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            scheduleReminder(project, task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Schedule the reminder of a {@code project}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project the project"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void scheduleReminder(Project project) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerTask timerTask \u003d new ReminderTimerTask(project);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timer.schedule(timerTask, project.getReminder().toDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Schedule the reminder of a {@code task}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project the project"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param task    the task"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void scheduleReminder(Project project, Task task) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerTask timerTask \u003d new ReminderTimerTask(task, project);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timer.schedule(timerTask, task.getReminder().toDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Update current reminder to be displayed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project the project"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param task    the task"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void updateCurrReminder(Project project, Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.currReminder.set(String.format(TASK_REMINDER, project.getName(), task.getName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Current reminder updated to:\" + currReminder);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Update current reminder to be displayed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param project the project"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void updateCurrReminder(Project project) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.currReminder.set(String.format(PROJECT_REMINDER, project.getName()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"Current reminder updated to:\" + currReminder);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the current reminder is empty, false otherwise."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public BooleanProperty isReminderEmpty() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        BooleanProperty booleanProperty \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        booleanProperty.set(this.currReminder.get() \u003d\u003d null || this.currReminder.get().isEmpty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return booleanProperty;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Removes the current reminder."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void removeReminder() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.currReminder.set(EMPTY_STRING);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"reminder removed\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Gets reminder."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the reminder."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public StringProperty getReminder() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this.currReminder;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!(obj instanceof ReminderManager)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ReminderManager other \u003d (ReminderManager) obj;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return versionedProjectBook.equals(other.versionedProjectBook)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 currReminder.get().equals(other.currReminder.get());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private class ReminderTimerTask extends TimerTask {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private final Project project;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private final Optional\u003cTask\u003e task;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private ReminderTimerTask(Project project) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.project \u003d project;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.task \u003d Optional.empty();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private ReminderTimerTask(Task task, Project project) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.project \u003d project;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.task \u003d Optional.of(task);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private Runnable getUpdateReminder() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return task.\u003cRunnable\u003emap(taskObj -\u003e () -\u003e updateCurrReminder(project, taskObj))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    .orElseGet(() -\u003e () -\u003e updateCurrReminder(project));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private Runnable getRemoveReminder() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            return task.\u003cRunnable\u003emap(taskObj -\u003e () -\u003e versionedProjectBook.removeReminder(project, taskObj))"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                    .orElseGet(() -\u003e () -\u003e versionedProjectBook.removeReminder(project));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void run() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.info(\"reminder running\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Platform.runLater(getUpdateReminder());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Platform.runLater(getRemoveReminder());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 196,
      "kkangs0226": 9
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a Tag in the project book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/TimerWrapper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a timerWrapper in momentum."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class TimerWrapper {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private DateTimeWrapper startDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private DateTimeWrapper stopDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private boolean isRunning;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a timerWrapper with default settings."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimerWrapper() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.startDateTime \u003d Clock.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.stopDateTime \u003d Clock.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.isRunning \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a timerWrapper with the provided data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param startDateTime The dateTimeWrapper when the timerWrapper was started."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param stopDateTime The dateTimeWrapper when the timerWrapper was stopped."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isRunning Whether the timerWrapper is running."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimerWrapper(DateTimeWrapper startDateTime, DateTimeWrapper stopDateTime, boolean isRunning) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.stopDateTime \u003d stopDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.isRunning \u003d isRunning;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Start the timerWrapper."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimerWrapper start() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert (!isRunning);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new TimerWrapper(Clock.now(), Clock.now(), true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Stop the timerWrapper."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimerWrapper stop() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert (isRunning);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new TimerWrapper(startDateTime, Clock.now(), false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper getStartTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assert (startDateTime !\u003d null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper getStopTime() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assert (stopDateTime !\u003d null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return stopDateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the length of dateTimeWrapper tracked in this timerWrapper, in (@code unit) units."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit The units for the length of dateTimeWrapper."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The length of dateTimeWrapper in the provided units."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public long getTimeBetween(ChronoUnit unit) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assert (!isRunning);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return unit.between(startDateTime.get(), stopDateTime.get());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean isRunning() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return isRunning;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper other \u003d (TimerWrapper) o;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return startDateTime.equals(other.startDateTime)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 Objects.equals(startDateTime, other.startDateTime)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u0026\u0026 Objects.equals(stopDateTime, other.stopDateTime)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 Objects.equals(isRunning, other.isRunning);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(startDateTime, stopDateTime, isRunning);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 64,
      "claracheong4": 37
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/UniqueDurationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DuplicateDurationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DurationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * A list of durations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * A duration is considered unique by comparing using {@code duration#isSameDuration(WorkDuration)}. As such, adding"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * and updating of durations uses WorkDuration#isSameDuration(WorkDuration) for equality so as to ensure that the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * duration being added is unique."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * @see WorkDuration#isSameDuration(WorkDuration)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class UniqueDurationList implements Iterable\u003cWorkDuration\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final ObservableList\u003cWorkDuration\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final ObservableList\u003cWorkDuration\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if the list contains an equivalent timerWrapper as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean contains(WorkDuration toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDuration);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Adds a timerWrapper to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The timerWrapper must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void add(WorkDuration toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DuplicateDurationException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Replaces the duration {@code target} in the list with {@code editedDuration}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The timerWrapper identity of {@code editedDuration} must not be the same as another"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * existing duration in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setDuration(WorkDuration target, WorkDuration editedDuration) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(target, editedDuration);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DurationNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!target.isSameDuration(editedDuration) \u0026\u0026 contains(editedDuration)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DuplicateDurationException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.set(index, editedDuration);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Removes the equivalent timerWrapper from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * The timerWrapper must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void remove(WorkDuration toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DurationNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setDurations(UniqueDurationList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Replaces the contents of this list with {@code WorkDurations}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * {@code durations} must not contain duplicate durations."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setDurations(List\u003cWorkDuration\u003e durations) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        requireAllNonNull(durations);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!timersAreUnique(durations)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new DuplicateDurationException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        internalList.setAll(durations);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ObservableList\u003cWorkDuration\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Iterator\u003cWorkDuration\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof UniqueDurationList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDurationList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private boolean timersAreUnique(List\u003cWorkDuration\u003e durations) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (int i \u003d 0; i \u003c durations.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            for (int j \u003d i + 1; j \u003c durations.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                if (durations.get(i).isSameDuration(durations.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 129,
      "claracheong4": 7
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/WorkDuration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a duration of dateTimeWrapper spent working on a project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class WorkDuration {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final DateTimeWrapper startDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final DateTimeWrapper stopDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code WorkDuration}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param startDateTime A valid start dateTimeWrapper."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param stopDateTime A valid stop dateTimeWrapper."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public WorkDuration(DateTimeWrapper startDateTime, DateTimeWrapper stopDateTime) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.stopDateTime \u003d stopDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper getStartTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public DateTimeWrapper getStopTime() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return stopDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the length of dateTimeWrapper tracked in this duration, in (@code unit) units."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param unit The units for the length of dateTimeWrapper."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return The length of dateTimeWrapper in the provided units."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public long getTimeBetween(ChronoUnit unit) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return unit.between(startDateTime.get(), stopDateTime.get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns true if both durations have the same start and stop dateTimeWrapper."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean isSameDuration(WorkDuration otherDuration) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (otherDuration \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return otherDuration !\u003d null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 otherDuration.getStartTime().equals(getStartTime())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 otherDuration.getStopTime().equals(getStopTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                || (other instanceof WorkDuration // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 isSameDuration((WorkDuration) other)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return Objects.hash(startDateTime, stopDateTime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 49,
      "claracheong4": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/exceptions/DuplicateDurationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Signals that the operation will result in duplicate Timers (Timers are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DuplicateDurationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public DuplicateDurationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(\"Operation would result in duplicate timers\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 11
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/timer/exceptions/DurationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.timer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Signals that the operation is unable to find the specified timerWrapper."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DurationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 5,
      "claracheong4": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains utility methods for populating {@code ProjectBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static Project[] getSampleProjects() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new Project[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Flver art commision\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new CompletionStatus(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new DateWrapper(\"2019-10-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2020-10-04\", new DateWrapper(\"2019-10-04\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Reminder(\"2022-06-22T01:01:21\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"flverr\", \"artcomm\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"XYZ startup web UI design\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new CompletionStatus().reverse(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new DateWrapper(\"2019-10-10\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2020-10-10\", \"01:01:21\", new DateWrapper(\"2019-10-10\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Reminder(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"important\", \"webdesign\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Blog design\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"For friend\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new CompletionStatus(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new DateWrapper(\"2019-06-22\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Reminder(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"webdesign\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Logo\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Description(\"Aunt Mary bakery\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new CompletionStatus().reverse(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new DateWrapper(\"2019-11-04\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2020-11-04\", \"08:10:21\", new DateWrapper(\"2019-11-04\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Reminder(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"otot\", \"logodesign\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Read up on new Illustrator Features\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    Description.EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new CompletionStatus().reverse(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new DateWrapper(\"2019-10-24\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(\"2024-10-24\", new DateWrapper(\"2019-10-24\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Reminder(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"selfimprovement\", \"important\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Project(new Name(\"Think of a new Project\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    Description.EMPTY_DESCRIPTION,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new CompletionStatus(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new DateWrapper(\"2019-01-04\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Deadline(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    new Reminder(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    getTagSet(\"brainstorming\"))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static ReadOnlyProjectBook getSampleProjectBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook sampleProjectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Project sampleProject : getSampleProjects()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            sampleProjectBook.addTrackedItem(sampleProject);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return sampleProjectBook;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns a UniqueDurationList containing the list of strings given."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static UniqueDurationList getDurationList(WorkDuration... durations) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList durationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durationList.setDurations(Arrays.asList(durations));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return durationList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 11,
      "pr4aveen": 4,
      "claracheong4": 56,
      "kkangs0226": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.TimeWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Jackson-friendly version of {@link Deadline}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "class JsonAdaptedDeadline {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String time;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeadline} with the given date and time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonAdaptedDeadline(@JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                               @JsonProperty(\"time\") String time) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts a given {@code Deadline} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonAdaptedDeadline(Deadline source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!source.isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.date \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (source.hasTime()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            this.time \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts this Jackson-friendly adapted duration object into the model\u0027s {@code Deadline} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDateWrapper the created date of the project."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted duration."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Deadline toModelType(DateWrapper createdDateWrapper) throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (this.date \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateWrapper.isValid(date)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Deadline(date, createdDateWrapper);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!TimeWrapper.isValid(time)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(TimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Deadline(date, time, createdDateWrapper);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 69
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedProject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "class JsonAdaptedProject {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final boolean completionStatus;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String createdDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final JsonAdaptedDeadline deadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final List\u003cJsonAdaptedWorkDuration\u003e durations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final JsonAdaptedTimer timer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Constructs a {@code JsonAdaptedProject} with the given project details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public JsonAdaptedProject(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              @JsonProperty(\"completionStatus\") boolean completionStatus,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              @JsonProperty(\"createdDateWrapper\") String createdDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              @JsonProperty(\"deadline\") JsonAdaptedDeadline deadline,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              @JsonProperty(\"reminder\") String reminder,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"durations\") List\u003cJsonAdaptedWorkDuration\u003e durations,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"timer\") JsonAdaptedTimer timer,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"taskList\") List\u003cJsonAdaptedTask\u003e taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (durations !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            this.durations.addAll(durations);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (taskList !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            this.taskList.addAll(taskList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedProject(String name,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              String description,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              boolean completionStatus,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              String createdDate,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              JsonAdaptedDeadline deadline,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                              String reminder,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              List\u003cJsonAdaptedWorkDuration\u003e durations,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              JsonAdaptedTimer timer) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (durations !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            this.durations.addAll(durations);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Converts a given {@code TrackedItem} into this class for Jackson use."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedProject(Project source) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        completionStatus \u003d source.getCompletionStatus().isCompleted();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        createdDate \u003d source.getCreatedDate().toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new JsonAdaptedDeadline(source.getDeadline());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminder \u003d source.getReminder().isEmpty() ? null : source.getReminder().toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durations.addAll(source.getDurationList().stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .map(JsonAdaptedWorkDuration::new)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timer \u003d new JsonAdaptedTimer(source.getTimer());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        taskList.addAll(source.getTaskList().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code TrackedItem} object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tracked item."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Project toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateWrapper modelCreatedDateWrapper \u003d JsonToModel.getModelCreatedDate(createdDate);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(JsonToModel.getModelName(name, MISSING_FIELD_MESSAGE_FORMAT),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelDescription(description),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelCompletionStatus(completionStatus),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                modelCreatedDateWrapper,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelDeadline(deadline, modelCreatedDateWrapper),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelReminder(reminder, modelCreatedDateWrapper),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelTags(tagged),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelDurations(durations),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelTimerWrapper(timer),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelTasks(taskList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 42,
      "pr4aveen": 9,
      "claracheong4": 36,
      "kkangs0226": 4,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Jackson-friendly version of {@link TrackedItem}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final boolean completionStatus;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String createdDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final JsonAdaptedDeadline deadline;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final String reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final List\u003cJsonAdaptedWorkDuration\u003e durations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final JsonAdaptedTimer timer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code Task} with the given project details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedTask(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                           @JsonProperty(\"completionStatus\") boolean completionStatus,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                           @JsonProperty(\"createdDateWrapper\") String createdDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                           @JsonProperty(\"deadline\") JsonAdaptedDeadline deadline,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                           @JsonProperty(\"reminder\") String reminder,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                           @JsonProperty(\"durations\") List\u003cJsonAdaptedWorkDuration\u003e durations,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                           @JsonProperty(\"timer\") JsonAdaptedTimer timer) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.createdDate \u003d createdDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (durations !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            this.durations.addAll(durations);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.timer \u003d timer;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedTask(TrackedItem source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        completionStatus \u003d source.getCompletionStatus().isCompleted();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        createdDate \u003d source.getCreatedDate().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        deadline \u003d new JsonAdaptedDeadline(source.getDeadline());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        reminder \u003d source.getReminder().isEmpty() ? null : source.getReminder().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durations.addAll(source.getDurationList().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .map(JsonAdaptedWorkDuration::new)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timer \u003d new JsonAdaptedTimer(source.getTimer());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts this Jackson-friendly adapted project object into the model\u0027s {@code TrackedItem} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tracked item."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateWrapper modelCreatedDateWrapper \u003d JsonToModel.getModelCreatedDate(createdDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Task(JsonToModel.getModelName(name, MISSING_FIELD_MESSAGE_FORMAT),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelDescription(description),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelCompletionStatus(completionStatus),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                modelCreatedDateWrapper,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelDeadline(deadline, modelCreatedDateWrapper),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelReminder(reminder, modelCreatedDateWrapper),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelTags(tagged),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelDurations(durations),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonToModel.getModelTimerWrapper(timer));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 78,
      "claracheong4": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedTimer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Jackson-friendly version of {@link TimerWrapper}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class JsonAdaptedTimer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Duration\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String stopTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Boolean isRunning;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code JsonAdaptedWorkDuration} with the given duration details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedTimer(@JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                   @JsonProperty(\"stopTime\") String stopTime,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                   @JsonProperty(\"isRunning\") Boolean isRunning) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.stopTime \u003d stopTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.isRunning \u003d isRunning;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts a given {@code WorkDuration} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonAdaptedTimer(TimerWrapper source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        startTime \u003d source.getStartTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        stopTime \u003d source.getStopTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        isRunning \u003d source.isRunning();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts this Jackson-friendly adapted duration object into the model\u0027s {@code TimerWrapper} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted duration."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public TimerWrapper toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTimeWrapper.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTimeWrapper.isValid(startTime)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTimeWrapper modelStartDateTime \u003d new DateTimeWrapper(startTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (stopTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTimeWrapper.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTimeWrapper.isValid(stopTime)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTimeWrapper modelStopDateTime \u003d new DateTimeWrapper(stopTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (isRunning \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isRunning\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new TimerWrapper(modelStartDateTime, modelStopDateTime, isRunning);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 58,
      "claracheong4": 20
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonAdaptedWorkDuration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Jackson-friendly version of {@link Project}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class JsonAdaptedWorkDuration {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Duration\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final String stopTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Constructs a {@code JsonAdaptedWorkDuration} with the given duration details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedWorkDuration(@JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                              @JsonProperty(\"stopTime\") String stopTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.stopTime \u003d stopTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts a given {@code WorkDuration} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public JsonAdaptedWorkDuration(WorkDuration source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        startTime \u003d source.getStartTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        stopTime \u003d source.getStopTime().get().format(DateTimeUtil.FORMAT_DATA);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Converts this Jackson-friendly adapted duration object into the model\u0027s {@code WorkDuration} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted duration."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public WorkDuration toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTimeWrapper.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTimeWrapper.isValid(startTime)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTimeWrapper modelStartDateTime \u003d new DateTimeWrapper(startTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (stopTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    DateTimeWrapper.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTimeWrapper.isValid(stopTime)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final DateTimeWrapper modelStopDateTime \u003d new DateTimeWrapper(stopTime);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new WorkDuration(modelStartDateTime, modelStopDateTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 56,
      "claracheong4": 15
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonProjectBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * A class to access ProjectBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonProjectBookStorage implements ProjectBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonProjectBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonProjectBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return readProjectBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Similar to {@link #readProjectBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Optional\u003cJsonSerializableProjectBook\u003e jsonProjectBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                filePath, JsonSerializableProjectBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!jsonProjectBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return Optional.of(jsonProjectBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        saveProjectBook(projectBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Similar to {@link #saveProjectBook(ReadOnlyProjectBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(projectBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableProjectBook(projectBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 80
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonSerializableProjectBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * An Immutable ProjectBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "@JsonRootName(value \u003d \"projectbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "class JsonSerializableProjectBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Projects list contains duplicate project(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Constructs a {@code JsonSerializableProjectBook} with the given projects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonSerializableProjectBook(@JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.projects.addAll(projects);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts a given {@code ReadOnlyProjectBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableProjectBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public JsonSerializableProjectBook(ReadOnlyProjectBook source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        projects.addAll(source.getTrackedItemList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                .stream().map(item -\u003e (Project) item).map(JsonAdaptedProject::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Converts this project book into the model\u0027s {@code ProjectBook} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (JsonAdaptedProject jsonAdaptedProject : projects) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            Project project \u003d jsonAdaptedProject.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            if (projectBook.hasTrackedItem(project)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            projectBook.addTrackedItem(project);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        projectBook.setOrder(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 2,
      "pr4aveen": 8,
      "claracheong4": 17,
      "kkangs0226": 2,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonToModel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.UniqueTrackedItemList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Contains methods that converts a json field to a model field."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonToModel {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json description to model description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param description the description."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static Description getModelDescription(String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Description(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json name to model name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param name      the name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param exception the exception message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the name is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static Name getModelName(String name, String exception) throws IllegalValueException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(String.format(exception, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json completion status to model completion status."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param completionStatus the completion status."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model completion status."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static CompletionStatus getModelCompletionStatus(boolean completionStatus) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (completionStatus) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new CompletionStatus().reverse();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new CompletionStatus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json created date to model created date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param createdDate the created date."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model created date."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the created date is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static DateWrapper getModelCreatedDate(String createdDate) throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateWrapper.isValid(createdDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new DateWrapper(createdDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json deadline to model deadline."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param deadline                the deadline."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param modelCreatedDateWrapper the model created date wrapper."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model deadline."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the deadline is invalid."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static Deadline getModelDeadline(JsonAdaptedDeadline deadline, DateWrapper modelCreatedDateWrapper)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return deadline \u003d\u003d null"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ? new Deadline()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                : deadline.toModelType(modelCreatedDateWrapper);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json reminder to model reminder."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminder                the reminder."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param modelCreatedDateWrapper the model created date wrapper."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model reminder."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the reminder is invalid."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static Reminder getModelReminder(String reminder, DateWrapper modelCreatedDateWrapper)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (reminder \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Reminder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!DateTimeWrapper.isValid(reminder)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new IllegalValueException(DateTimeWrapper.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (Reminder.isValid(reminder)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new Reminder(reminder);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Reminder();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json tags to model tags."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param tagged the tagged."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model tags."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the tag list is invalid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static Set\u003cTag\u003e getModelTags(List\u003cJsonAdaptedTag\u003e tagged) throws IllegalValueException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final List\u003cTag\u003e trackedItemTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            trackedItemTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new HashSet\u003c\u003e(trackedItemTags);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json timer to model timer."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param timer the timer."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model timer wrapper."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the timer is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static TimerWrapper getModelTimerWrapper(JsonAdaptedTimer timer) throws IllegalValueException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return timer \u003d\u003d null ? new TimerWrapper() : timer.toModelType();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json durations to model durations."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param durations the durations."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model durations."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the duration list is invalid."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static UniqueDurationList getModelDurations(List\u003cJsonAdaptedWorkDuration\u003e durations)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final List\u003cWorkDuration\u003e projectDurations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        for (JsonAdaptedWorkDuration duration : durations) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            projectDurations.add(duration.toModelType());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        UniqueDurationList modelDurations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        modelDurations.setDurations(projectDurations);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return modelDurations;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Convert json tasks to model tasks."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param taskList the task list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @return the model tasks."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IllegalValueException If the task list is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    protected static UniqueTrackedItemList getModelTasks(List\u003cJsonAdaptedTask\u003e taskList) throws IllegalValueException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final List\u003cTrackedItem\u003e projectTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        for (JsonAdaptedTask task : taskList) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            projectTasks.add(task.toModelType());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        UniqueTrackedItemList modelTasks \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        modelTasks.setTrackedItems(projectTasks);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        modelTasks.setOrder(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return modelTasks;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 182,
      "kkangs0226": 2
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/ProjectBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a storage for {@link ProjectBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface ProjectBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns ProjectBook data as a {@link ReadOnlyProjectBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see #getProjectBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cReadOnlyProjectBook\u003e readProjectBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Saves the given {@link ReadOnlyProjectBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param projectBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see #saveProjectBook(ReadOnlyProjectBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 46
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public interface Storage extends ProjectBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Path getProjectBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 32
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Manages storage of ProjectBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ProjectBookStorage projectBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ProjectBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public StorageManager(ProjectBookStorage projectBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBookStorage \u003d projectBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ProjectBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBookStorage.getProjectBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return readProjectBook(projectBookStorage.getProjectBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Optional\u003cReadOnlyProjectBook\u003e readProjectBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBookStorage.readProjectBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        saveProjectBook(projectBook, projectBookStorage.getProjectBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBookStorage.saveProjectBook(projectBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 22,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/momentum/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Represents a storage for {@link seedu.momentum.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Saves the given {@link seedu.momentum.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         * @see seedu.momentum.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/DurationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * An UI component that displays information of a {@code WorkDuration}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DurationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"DurationListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public final WorkDuration duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label stopTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code ProjectCode} with the given {@code WorkDuration} to display."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public DurationCard(WorkDuration duration, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        startTime.setText(\"Start: \" + duration.getStartTime().getFormatted());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        stopTime.setText(\"Stop: \" + duration.getStopTime().getFormatted());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!(other instanceof DurationCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        DurationCard card \u003d (DurationCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return duration.equals(card.duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 60,
      "claracheong4": 2
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/DurationListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class DurationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"DurationListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DurationListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ListView\u003cWorkDuration\u003e durationListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code DurationListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public DurationListPanel(ObservableList\u003cWorkDuration\u003e durationList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durationListView.setItems(durationList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durationListView.setCellFactory(listView -\u003e new DurationListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code WorkDuration} using a {@code DurationCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    class DurationListViewCell extends ListCell\u003cWorkDuration\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        protected void updateItem(WorkDuration duration, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            super.updateItem(duration, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (empty || duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(new DurationCard(duration, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 49
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t10-1.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "khoodehui": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.Theme;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticEntry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Theme theme;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private TrackedItemListPanel trackedItemListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ReminderDisplay reminderDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private TagsDisplay tagsDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private TimerListPanel timerListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StatListPanel statListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private MenuItem testStatMenuItem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private StackPane projectListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private StackPane reminderDisplayPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StackPane statListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private StackPane timerListPanelPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private StackPane infoDisplayPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setWindowDefaultSize(logic.getGuiWindowSettings());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setDefaultTheme(logic.getGuiThemeSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        initCommandBox();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        initResultDisplay();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        initProjectList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        initReminderDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        initTagDisplay();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        initTimerList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        initStatList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void initCommandBox() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void initResultDisplay() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void initProjectList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        trackedItemListPanel \u003d new TrackedItemListPanel(logic.getObservableFilteredTrackedItemList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        projectListPanelPlaceholder.getChildren().add(trackedItemListPanel.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void initReminderDisplayAndPlaceholder() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderDisplay \u003d new ReminderDisplay(logic.isReminderEmpty().get(), logic.getReminder().get());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderDisplayPlaceholder.getChildren().add(reminderDisplay.getRoot());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void hideReminder() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"hide reminder\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderDisplayPlaceholder.setVisible(false);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderDisplayPlaceholder.setMaxHeight(0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void showReminder() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logger.info(\"show reminder\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderDisplayPlaceholder.setVisible(true);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderDisplayPlaceholder.setMinHeight(primaryStage.getHeight() / 6);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void initReminderDisplayListeners() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logic.isReminderEmpty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            reminderDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (!newValue) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                showReminder();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                initReminderDisplayAndPlaceholder();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                hideReminder();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        });"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        logic.getReminder().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            reminderDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (newValue.length() \u003e 0) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                showReminder();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                initReminderDisplayAndPlaceholder();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                hideReminder();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        });"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void initReminderDisplay() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderDisplayPlaceholder.managedProperty().bind(reminderDisplayPlaceholder.visibleProperty());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        initReminderDisplayAndPlaceholder();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (logic.isReminderEmpty().get()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            hideReminder();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            showReminder();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        initReminderDisplayListeners();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void initTagDisplay() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        tagsDisplay \u003d new TagsDisplay(logic.getProjectBook().getTrackedItemTags());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        infoDisplayPlaceholder.getChildren().add(tagsDisplay.getRoot());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        // Add a listener to the project list that will update tags when there are changes made to the project list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        logic.getObservableFilteredTrackedItemList().get().addListener((ListChangeListener\u003cTrackedItem\u003e) c -\u003e {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            TagsDisplay newTagsDisplay \u003d new TagsDisplay(logic.getProjectBook().getTrackedItemTags());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            infoDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            infoDisplayPlaceholder.getChildren().add(newTagsDisplay.getRoot());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        });"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void initStatList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        ObservableList\u003cStatisticEntry\u003e stats \u003d logic.getStatistic().getTimePerProjectStatistic();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListPanel \u003d new StatListPanel(stats, logic.getStatisticTimeframeSettings().getStatTimeframe());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListPanelPlaceholder.getChildren().add(statListPanel.getRoot());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void initTimerList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timerListPanel \u003d new TimerListPanel(logic.getRunningTimers());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timerListPanelPlaceholder.getChildren().add(timerListPanel.getRoot());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Sets the default size based on {@code guiWindowSettings}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void setWindowDefaultSize(GuiWindowSettings guiWindowSettings) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        primaryStage.setHeight(guiWindowSettings.getWindowHeight());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        primaryStage.setWidth(guiWindowSettings.getWindowWidth());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (guiWindowSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            primaryStage.setX(guiWindowSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            primaryStage.setY(guiWindowSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Sets the default theme based on {@code guiThemeSetting}."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void setDefaultTheme(GuiThemeSettings guiThemeSettings) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.theme \u003d guiThemeSettings.getTheme();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(guiThemeSettings.getTheme().getStylesheet());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Updates the application theme with a {@code newTheme}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void updateTheme(Theme newTheme) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        primaryStage.getScene().getStylesheets().remove(this.theme.getStylesheet());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        primaryStage.getScene().getStylesheets().add(newTheme.getStylesheet());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.theme \u003d newTheme;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Updates the statistic list."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void updateStatList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StatListPanel newStatList \u003d new StatListPanel(logic.getStatistic().getTimePerProjectStatistic(),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            logic.getStatisticTimeframeSettings().getStatTimeframe());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListPanelPlaceholder.getChildren().add(newStatList.getRoot());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        GuiWindowSettings guiWindowSettings \u003d new GuiWindowSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        logic.setGuiWindowSettings(guiWindowSettings);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public TrackedItemListPanel getTrackedItemListPanel() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return trackedItemListPanel;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @see seedu.momentum.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 16,
      "pr4aveen": 4,
      "claracheong4": 63,
      "khoodehui": 86,
      "-": 165
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/ReminderDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * A UI component to display the current reminder that exist inside the project book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ReminderDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String FXML \u003d \"ReminderDisplay.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private boolean isEmpty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private String reminderStr;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private FlowPane reminderPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Creates a {@code ReminderDisplay}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param isEmpty     true if the reminder is empty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * @param reminderStr string representation of the reminder."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ReminderDisplay(boolean isEmpty, String reminderStr) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.isEmpty \u003d isEmpty;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminderStr \u003d reminderStr;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        fillReminder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void fillReminder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!isEmpty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            reminderPane.getChildren().add(new Label(reminderStr));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 38
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/StatCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * An UI component that displays information of a {@code StatisticEntry}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class StatCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String FXML \u003d \"StatCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public final StatisticEntry statisticEntry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Label statLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Label statValue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code StatCard} with the given {@code statisticEntry} to display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public StatCard(StatisticEntry statisticEntry) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.statisticEntry \u003d statisticEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statLabel.setText(statisticEntry.getLabel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statValue.setText(formatToString(statisticEntry.getValue()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private String formatToString(double value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        int hours \u003d (int) Math.floor(value / 60);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        int minutes \u003d (int) value % 60;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (hours \u003e 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            output +\u003d String.format(\"%d hr \", hours);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (minutes \u003e 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            output +\u003d String.format(\"%d min\", minutes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        if (!(other instanceof StatCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        StatCard card \u003d (StatCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return statisticEntry.equals(card.statisticEntry);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 19,
      "khoodehui": 46
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/StatListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.statistic.StatisticEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * Panel containing a list of time spent."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class StatListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String FXML \u003d \"StatListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ListView\u003cStatisticEntry\u003e statListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code StatListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public StatListPanel(ObservableList\u003cStatisticEntry\u003e statisticList, StatisticTimeframe timeframe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        title.setText(timeframe + \" Time Spent\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListView.setItems(statisticList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        statListView.setCellFactory(listView -\u003e new StatListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code StatisticEntry} using a {@code StatisticCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    class StatListViewCell extends ListCell\u003cStatisticEntry\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        protected void updateItem(StatisticEntry statisticEntry, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            super.updateItem(statisticEntry, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (empty || statisticEntry \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                setGraphic(new StatCard(statisticEntry).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 8,
      "khoodehui": 42
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/TagsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " * A UI component to display the current tags that exist inside the project book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "public class TagsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private static final String FXML \u003d \"TagsDisplay.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Set\u003cTag\u003e tagsSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code TagsDisplay}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @param tagsSet Set of tags in the project book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public TagsDisplay(Set\u003cTag\u003e tagsSet) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        this.tagsSet \u003d tagsSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        fillTags();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void fillTags() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        tagsSet.stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "khoodehui": 38
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/TimerCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * An UI component that displays information of a {@code TimerWrapper}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TimerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"TimerCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public final TrackedItem trackedItemEntry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label trackedItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code TimerCard} with the given {@code projectEntry} to display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public TimerCard(TrackedItem trackedItemEntry) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.trackedItemEntry \u003d trackedItemEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        trackedItem.setText(trackedItemEntry.getName().fullName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        startTime.setText(trackedItemEntry.getTimer().getStartTime().getFormatted());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!(other instanceof TimerCard)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TimerCard card \u003d (TimerCard) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return trackedItemEntry.equals(card.trackedItemEntry);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 48,
      "claracheong4": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/TimerListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Panel containing a list of running timers."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TimerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"TimerListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ListView\u003cTrackedItem\u003e timerListView;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code TimerListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public TimerListPanel(ObservableList\u003cTrackedItem\u003e projectList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timerListView.setItems(projectList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        timerListView.setCellFactory(listView -\u003e new TimerListViewCell());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code TimerWrapper} using a {@code TimerCard}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    class TimerListViewCell extends ListCell\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        protected void updateItem(TrackedItem trackedItem, boolean empty) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            super.updateItem(trackedItem, empty);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (empty || trackedItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(new TimerCard(trackedItem).getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 43,
      "claracheong4": 1
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/TrackedItemCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * An UI component that displays information of a {@code Project}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TrackedItemCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"TrackedItemListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String STYLE_TEXT \u003d \"-fx-text-fill: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String STYLE_COLOUR_RED \u003d \"-fx-red\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String STYLE_COLOUR_GREEN \u003d \"-fx-green\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String STYLE_COLOUR_YELLOW \u003d \"-fx-yellow\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final TrackedItem trackedItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Label completionStatus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Label reminderStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private Text id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private HBox description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private HBox createdDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private HBox deadline;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private HBox reminder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "     * Creates a {@code ProjectCard} with the given {@code Project} and index to display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public TrackedItemCard(TrackedItem trackedItem, int displayedIndex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.trackedItem \u003d trackedItem;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        name.setText(trackedItem.getName().fullName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        setDescriptionLabel(trackedItem);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        completionStatus.setText(\" \" + trackedItem.getCompletionStatus().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        setCompletionStatusStyle(completionStatus);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        reminderStatus.setText(\" \" + trackedItem.getReminder().getStatus());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        setReminderStatusStyle(reminderStatus);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        createdDate.getChildren().add(new Label(\"Created: \" + trackedItem.getCreatedDate().getFormatted()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Label deadlineLabel \u003d new Label(\"Due: \" + trackedItem.getDeadline().getFormattedDeadline());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        setDeadlineStyle(deadlineLabel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        deadline.getChildren().add(deadlineLabel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Label reminderLabel \u003d new Label(\"Reminder: \" + trackedItem.getReminder().getFormattedReminder());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminder.getChildren().add(reminderLabel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        setTagsPane(trackedItem);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setDescriptionLabel(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!trackedItem.getDescription().isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Label descLabel \u003d new Label(trackedItem.getDescription().value);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            descLabel.setWrapText(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            description.getChildren().add(descLabel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setTagsPane(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        trackedItem.getTags().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setCompletionStatusStyle(Label completionStatus) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String style \u003d STYLE_TEXT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (trackedItem.getCompletionStatus().isCompleted()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            style +\u003d STYLE_COLOUR_GREEN;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            style +\u003d STYLE_COLOUR_RED;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        completionStatus.setStyle(style);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void setReminderStatusStyle(Label reminderStatus) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderStatus.setStyle(STYLE_TEXT + STYLE_COLOUR_YELLOW);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    private void setDeadlineStyle(Label deadline) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String style \u003d STYLE_TEXT;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (trackedItem.getDeadline().isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            style +\u003d \"-fx-text-muted\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            long daysToDeadline \u003d trackedItem.getDeadline().daysToDeadline();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            if (daysToDeadline \u003e 7) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                style +\u003d STYLE_COLOUR_GREEN;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } else if (daysToDeadline \u003c 4) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                style +\u003d STYLE_COLOUR_RED;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                style +\u003d STYLE_COLOUR_YELLOW;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        deadline.setStyle(style);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        if (!(other instanceof TrackedItemCard)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItemCard card \u003d (TrackedItemCard) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u0026\u0026 trackedItem.equals(card.trackedItem);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 18,
      "pr4aveen": 1,
      "claracheong4": 53,
      "kkangs0226": 1,
      "khoodehui": 26,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/TrackedItemListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Panel containing the list of projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TrackedItemListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String FXML \u003d \"TrackedItemListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TrackedItemListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e sourceList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private ListView\u003cTrackedItem\u003e trackedItemListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Creates a {@code ProjectListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public TrackedItemListPanel(ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e trackedItemList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.sourceList \u003d trackedItemList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        trackedItemListView.setItems(sourceList.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        sourceList.addListener(observable -\u003e updateList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        trackedItemListView.setCellFactory(listView -\u003e new TrackedItemViewCell());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private void updateList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        trackedItemListView.setItems(sourceList.get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Project} using a {@code ProjectCard}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    class TrackedItemViewCell extends ListCell\u003cTrackedItem\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        protected void updateItem(TrackedItem trackedItem, boolean empty) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            super.updateItem(trackedItem, empty);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            if (empty || trackedItem \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                setGraphic(new TrackedItemCard(trackedItem, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 56
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    MainWindow getMainWindow();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "khoodehui": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public MainWindow getMainWindow() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        return mainWindow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "khoodehui": 4,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/momentum/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/data/defaultData.json",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  \"projects\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"name\" : \"Fiverr art commision\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"completionStatus\" : false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"deadline\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"date\" : \"2020-10-04\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"time\" : null"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"reminder\" : \"2022-06-22T01:01:21\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"tagged\" : [ \"fiverr\", \"artcomm\" ],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"durations\" : [ {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:26.379257\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:21:22.730034\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"timer\" : {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:26.379257\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:21:22.730034\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"isRunning\" : false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"taskList\" : [ {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Client Meeting\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : \"2020-12-31\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : \"2020-12-30T00:00\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"meeting\" ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T14:53:30.661056\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T14:56:46.863834\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-20T15:31:27.068668\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-20T16:00:05.235143\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      } ],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:31:27.068668\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T16:00:05.235143\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Brainstorming Ideas\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ ],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:21:49.932326\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T15:25:52.384358\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:28:41.865006\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T15:29:05.112899\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      } ],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:28:41.865006\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T15:29:05.112899\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Confirm Payment Details\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"He better make this worth it\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"money\", \"invoice\" ],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ ],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T14:42:20.161792\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T14:42:20.161798\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"createdDate\" : \"2019-10-04\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"name\" : \"XYZ startup web UI design\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"completionStatus\" : true,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"deadline\" : {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"date\" : \"2020-10-10\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"time\" : \"01:01:21\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"reminder\" : null,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"tagged\" : [ \"important\", \"webdesign\" ],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"durations\" : [ {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:27.646492\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:29:16.067364\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"timer\" : {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:27.646492\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:29:16.067364\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"isRunning\" : false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"taskList\" : [ {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Meet with Client\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"At ABC Building Level 4, Attire Smart Casual\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : \"2020-12-15\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : \"14:00\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"meeting\" ],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ ],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T14:33:44.142519\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T14:33:44.142527\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Request for Deadline Extension\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"To 2021 Aug\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"important\" ],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-20T15:32:55.917929\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-20T15:54:01.610962\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      } ],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:32:55.917929\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T15:34:01.610962\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"createdDate\" : \"2019-10-10\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"name\" : \"Blog design\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"description\" : \"For friend\","
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"completionStatus\" : false,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"deadline\" : {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"date\" : null,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"time\" : null"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"reminder\" : null,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"tagged\" : [ \"webdesign\" ],"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"durations\" : [ {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:28.882446\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:21:35.626358\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"timer\" : {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:28.882446\","
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:21:35.626358\","
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"isRunning\" : false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"taskList\" : [ {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Clarify blog requirements\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"What is he even talking about?\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"requirements\" ],"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ ],"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T14:36:43.492018\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T14:36:43.492031\","
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Discuss color scheme\","
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"\","
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : \"2020-11-30T20:00\","
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"UX\", \"UI\" ],"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ ],"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T14:36:48.984541\","
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T14:36:48.984568\","
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Fix Layout Issues\","
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"Banner image not in the right place\","
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : \"2020-12-11\","
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"layout\", \"UX\", \"UI\" ],"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:22:12.386672\","
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T16:00:19.222503\""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      } ],"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:22:12.386672\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T16:00:19.222503\","
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"createdDate\" : \"2019-06-22\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"name\" : \"Logo\","
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"description\" : \"Aunt Mary bakery\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"completionStatus\" : true,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"deadline\" : {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"date\" : \"2020-11-04\","
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"time\" : \"08:10:21\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"reminder\" : null,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"tagged\" : [ \"logodesign\", \"otot\" ],"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"durations\" : [ {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-20T14:39:30.353437\","
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-20T15:34:19.555833\""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"timer\" : {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-20T14:39:30.353437\","
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-20T15:34:19.555833\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"isRunning\" : false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"taskList\" : [ {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"See Aunt Mary\","
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"See the new logo in action\","
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : \"2020-12-15\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"meeting\" ],"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ ],"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-20T14:38:50.59557\","
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-20T14:38:50.595573\","
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Settle Payment Issue\","
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"Amount was not the same as what was agreed upon\","
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ \"important\", \"money\" ],"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-20T15:22:19.382267\","
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-20T16:00:55.517151\""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      } ],"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-20T15:22:19.382267\","
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-20T16:00:55.517151\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"createdDate\" : \"2019-11-04\""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"name\" : \"Read up on new Illustrator Features\","
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"completionStatus\" : true,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"deadline\" : {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"date\" : \"2024-10-24\","
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"time\" : null"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"reminder\" : null,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"tagged\" : [ \"selfimprovement\", \"important\" ],"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"durations\" : [ {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:31.844237\","
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T14:49:00.371296\""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:49:07.681395\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:59:46.746239\""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"timer\" : {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:49:07.681395\","
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:59:46.746239\","
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"isRunning\" : false"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"taskList\" : [ {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Check Website\","
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"https://helpx.adobe.com/sea/illustrator/using/whats-new.html?promoid\u003d4SC996PM\u0026mv\u003dother\","
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ ],"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:34:32.766752\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T16:00:33.12442\""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      } ],"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T15:34:32.766752\","
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T16:00:33.12442\","
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"name\" : \"Check out Udemy Course\","
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"description\" : \"\","
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"completionStatus\" : false,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"deadline\" : {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"date\" : null,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"time\" : null"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"reminder\" : null,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"tagged\" : [ ],"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"durations\" : [ ],"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"timer\" : {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"startTime\" : \"2020-10-29T14:40:25.718715\","
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"stopTime\" : \"2020-10-29T14:40:25.718718\","
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \"isRunning\" : false"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      },"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"createdDate\" : \"2020-10-29\""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"createdDate\" : \"2019-10-24\""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"name\" : \"Think of a new Project\","
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"completionStatus\" : false,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"deadline\" : {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"date\" : null,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"time\" : null"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"reminder\" : null,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"tagged\" : [ \"brainstorming\" ],"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"durations\" : [ {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:33.829615\","
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:59:52.112224\""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"timer\" : {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2020-10-29T14:39:33.829615\","
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2020-10-29T15:59:52.112224\","
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"isRunning\" : false"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    },"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"taskList\" : [ ],"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"createdDate\" : \"2019-01-04\""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 360
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "#filterField, #projectListPanel, #projectWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/DurationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cLabel fx:id\u003d\"startTime\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cLabel fx:id\u003d\"stopTime\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 33
    }
  },
  {
    "path": "src/main/resources/view/DurationListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cListView fx:id\u003d\"durationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/FontAndLayout.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/* JavaFX CSS native classes */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-font-family: \"American Typewriter\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-insets: -4 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-wrap-text: true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-area .content {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cursor: pointer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0 8 8;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".split-pane \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0 4;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".separator {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: -4;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".separator .line{"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-border-width: 0.5;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 1 8;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 8 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-insets: 0 -3 -3 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/* Custom classes */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".app-logo {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-font-size: 40;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".command-box {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0 8 0 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".result-box {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0 8 8 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".content-box-title {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-min-height: 40;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".project-list {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0 8 8 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".project-list #id, #name {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".project-list #name, #description {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0 8 0 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".projectCardContentBox {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 12 8;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 3 5;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".statLabel {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-padding: 0 8 0 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 116
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"1000.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Momentum\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cURL value\u003d\"@FontAndLayout.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003croot\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cmenus\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003citems\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/items\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Menu\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/menus\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cGridPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"33.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                      \u003cRowConstraints vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cGridPane prefHeight\u003d\"0.0\" prefWidth\u003d\"70.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"56.0\" valignment\u003d\"CENTER\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cStackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cLabel styleClass\u003d\"app-logo\" text\u003d\"Momentum\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cSplitPane fx:id\u003d\"sideBarSplitPane\" dividerPositions\u003d\"0.15, 0.3, 0.5\" orientation\u003d\"VERTICAL\" GridPane.rowIndex\u003d\"1\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                \u003citems\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"reminderDisplayPlaceholder\" styleClass\u003d\"reminder-box\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"infoDisplayPlaceholder\" styleClass\u003d\"content-box\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"timerListPanelPlaceholder\" styleClass\u003d\"content-box\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"timerList\" styleClass\u003d\"content-box\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                        \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"statListPanelPlaceholder\" styleClass\u003d\"content-box\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                       \u003cchildren\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                          \u003cVBox fx:id\u003d\"statList\" styleClass\u003d\"content-box\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                       \u003c/children\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                \u003c/items\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cGridPane prefHeight\u003d\"82.0\" prefWidth\u003d\"241.0\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"56.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints percentHeight\u003d\"15.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                            \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"command-box\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"result-box\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cVBox styleClass\u003d\"project-list\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"projectListPanelPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003c/VBox\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/root\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 4,
      "claracheong4": 3,
      "khoodehui": 79,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/MomentumDark.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /* Color palette */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-gray-5: #212932;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-gray-4: #343F4A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-gray-3: #414c58;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-gray-2: #55606c;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-gray-1: #5d6a79;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-gray-0: #9CA5B0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-white: #E3E6EB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-red: #E24440;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-yellow: #F1B028;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-green: #3CAF71;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-blue: #49A2E8;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-purple: #6040B0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-primary: -fx-white;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-muted: -fx-cool-gray-0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/* JavaFX CSS native classes */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-white;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-4;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".menu-button:hover, .menu-button:focused, .menu-button:showing, .menu-item:hover {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-blue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".menu-item {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-3;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-white;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-prompt-text-fill: -fx-cool-gray-0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-white;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-area .content {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-5;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".split-pane \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-5;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-2;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-3;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-2;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".separator .line{"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-border-color: -fx-cool-gray-0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-2;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-4;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-5;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/* Custom classes */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".app-logo {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-blue;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".content-box {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-2;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".content-box-title {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-gray-4;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-red;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".project-list #id {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-fill: -fx-white;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-purple;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khoodehui": 125
    }
  },
  {
    "path": "src/main/resources/view/MomentumLight.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "* {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    /* Color palette */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-white-5: #dae0e4;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-white-4: #e8ecef;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-white-3: #eff2f4;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-white-2: #f6f7f7;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-white-1: #fbfbfb;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-cool-white-0: #ffffff;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-gray: #c0c2c4;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-black: #000000;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-red: #E24440;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-yellow: #F1B028;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-green: #3CAF71;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-blue: #49A2E8;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-purple: #6040B0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-primary: -fx-black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-muted: -fx-gray;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-light: -fx-cool-white-0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/* JavaFX CSS native classes */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-text-primary;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-5;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".menu-button:hover, .menu-button:focused, .menu-button:showing, .menu-item:hover {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-blue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".menu-item {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-text-primary;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-prompt-text-fill: -fx-gray;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-area {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-text-primary;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".text-area .content {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".split-pane \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-4;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-2;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".separator .line{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-border-color: -fx-gray;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-5;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".corner {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "/* Custom classes */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".app-logo {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-blue;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".content-box {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-3;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".content-box-title {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-cool-white-5;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-red;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ".project-list #id {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-fill: -fx-text-primary;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-background-color: -fx-purple;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    -fx-text-fill: -fx-text-light;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "khoodehui": 128
    }
  },
  {
    "path": "src/main/resources/view/ReminderDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cVBox minWidth\u003d\"32.0\" styleClass\u003d\"content-box\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"content-box-title\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u003cLabel text\u003d\"Reminder\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        \u003cFlowPane fx:id\u003d\"reminderPane\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u003cInsets /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                \u003cInsets bottom\u003d\"8.0\" left\u003d\"24.0\" right\u003d\"24.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 29
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "      text\u003d\"Welcome to Momentum! If you are new, enter \u0026quot;help\u0026quot; for the user guide.\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "khoodehui": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cVBox prefWidth\u003d\"100.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cGridPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            \u003cLabel fx:id\u003d\"statLabel\" styleClass\u003d\"statLabel\" text\u003d\"Label\" wrapText\u003d\"true\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                   GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/GridPane.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cSeparator orientation\u003d\"VERTICAL\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            \u003cLabel fx:id\u003d\"statValue\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                   GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 4,
      "khoodehui": 29
    }
  },
  {
    "path": "src/main/resources/view/StatListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cVBox styleClass\u003d\"content-box\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"content-box-title\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$statListPanelTitle\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cListView fx:id\u003d\"statListView\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "khoodehui": 17
    }
  },
  {
    "path": "src/main/resources/view/TagsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "\u003cVBox minWidth\u003d\"32.0\" styleClass\u003d\"content-box\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"content-box-title\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cLabel text\u003d\"Tags\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cInsets bottom\u003d\"8.0\" left\u003d\"24.0\" right\u003d\"24.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "khoodehui": 27
    }
  },
  {
    "path": "src/main/resources/view/TestStatWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"TestStat\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cPieChart id\u003d\"piechart\" fx:id\u003d\"piechart\" layoutX\u003d\"10\" layoutY\u003d\"110\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 27
    }
  },
  {
    "path": "src/main/resources/view/TimerCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cVBox prefWidth\u003d\"100.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003cGridPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" percentWidth\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u003cLabel fx:id\u003d\"trackedItem\" text\u003d\"Label\" wrapText\u003d\"true\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                       GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cSeparator orientation\u003d\"VERTICAL\" prefHeight\u003d\"200.0\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                \u003cLabel fx:id\u003d\"startTime\" text\u003d\"Label\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                       GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 24,
      "pr4aveen": 4,
      "khoodehui": 1
    }
  },
  {
    "path": "src/main/resources/view/TimerListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cVBox styleClass\u003d\"content-box\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"content-box-title\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                \u003cLabel text\u003d\"Timers\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        \u003cListView fx:id\u003d\"timerListView\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 17
    }
  },
  {
    "path": "src/main/resources/view/TrackedItemListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.control.Separator?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "\u003cHBox fx:id\u003d\"trackedItemCardPane\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints percentWidth\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"4.0\" styleClass\u003d\"projectCardContentBox\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cText fx:id\u003d\"id\" fontSmoothingType\u003d\"LCD\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"1.\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                              \u003cInsets top\u003d\"1.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                           \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003c/Text\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$name\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        \u003cLabel fx:id\u003d\"reminderStatus\" text\u003d\"\\$reminderStatus\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        \u003cLabel fx:id\u003d\"completionStatus\" text\u003d\"\\$completionStatus\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox fx:id\u003d\"description\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                     \u003c/VBox.margin\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cInsets bottom\u003d\"16.0\" top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cSeparator orientation\u003d\"VERTICAL\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER\" spacing\u003d\"4.0\" styleClass\u003d\"projectCardContentBox\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox fx:id\u003d\"createdDate\" alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                  \u003cHBox fx:id\u003d\"reminder\" alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003cHBox fx:id\u003d\"deadline\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 2,
      "claracheong4": 7,
      "khoodehui": 45,
      "-": 17
    }
  },
  {
    "path": "src/main/resources/view/TrackedItemListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "  \u003cListView fx:id\u003d\"trackedItemListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 1,
      "khoodehui": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonProjectBookStorageTest/invalidAndValidProjectProjectBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  \"projects\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"name\": \"Valid Project\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"description\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"name\": \"Project With Invalid Name Field\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"description\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "kkangs0226": 4
    }
  },
  {
    "path": "src/test/data/JsonProjectBookStorageTest/invalidProjectProjectBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  \"projects\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"name\": \"Project with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"description\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "kkangs0226": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableProjectBookTest/duplicateProjectProjectBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  \"projects\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes coding\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": false,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2000-11-05\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": \"2030-12-02T01:21:31\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\": [ \"friends\" ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"description\": \"Likes coding\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": false,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2000-11-05\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": \"2030-12-02T01:21:31\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "claracheong4": 7,
      "kkangs0226": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableProjectBookTest/invalidProjectProjectBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\"projects\": [ {"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableProjectBookTest/typicalProjectsProjectBook.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  \"_comment\": \"ProjectBook save file which contains the same Project values as in TypicalProjects#getTypicalProjectBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "  \"projects\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Alice Pauline\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes coding\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2000-11-05\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": false,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"deadline\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"date\": \"2020-11-05\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"time\": \"11:11:11\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": null,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Benson Meier\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes dogs\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2000-11-05\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": true,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"deadline\": {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"date\": \"2020-11-05\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"time\": \"12:43:12\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": \"2030-12-02T01:21:31\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"tagged\" : [ \"owesMoney\", \"friends\" ],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"durations\" : [ {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2019-01-01T00:00:00.00000\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2019-01-02T00:00:00.00000\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    } ],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    \"timer\" : {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"startTime\" : \"2019-01-01T00:00:00.00000\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"stopTime\" : \"2019-01-02T00:00:00.00000\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "      \"isRunning\" : false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Carl Kurz\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes poodles\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2019-08-02\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": null,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes cats\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": false,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2019-05-21\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": null,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ \"friends\" ]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Elle Meyer\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes elephants\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": false,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2019-07-21\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": null,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"deadline\": {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"date\": \"2020-07-21\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"time\": null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    },"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"Fiona Kunz\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes starbucks\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": false,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2019-03-21\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": null,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"deadline\": {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"date\": \"2020-03-21\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "      \"time\": \"05:02:09\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    },"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\" : \"George Best\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    \"description\": \"Likes you\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"completionStatus\": true,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"reminder\": \"2021-12-05T02:45:23\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    \"createdDate\": \"2019-07-28\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 10,
      "pr4aveen": 1,
      "claracheong4": 38,
      "kkangs0226": 7,
      "-": 22
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \"guiWindowSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \"guiThemeSettings\" : {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \"theme\" : {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \"themeType\" : \"DARK\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \"statisticTimeframe\" : {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \"timeframe\" : \"WEEKLY\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  \"projectBookFilePath\" : \"projectbook.json\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "khoodehui": 9,
      "-": 11
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \"guiWindowSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \"guiThemeSettings\" : {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \"theme\" : {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "      \"themeType\" : \"DARK\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  },"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  \"statisticTimeframe\" : {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    \"timeframe\" : \"WEEKLY\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "  },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "  \"projectBookFilePath\" : \"projectbook.json\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "khoodehui": 9,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/momentum/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/ClockTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class ClockTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void advance_manual_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertDoesNotThrow(() -\u003e Clock.advance(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void advance_notManual_throwsAssertionError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e Clock.advance(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void reverse_manual_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertDoesNotThrow(() -\u003e Clock.reverse(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void reverse_notManual_throwsAssertionError() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e Clock.reverse(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_fixed_returnCorrectTime() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, Clock.now());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_manualStartTime_returnCorrectTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, Clock.now());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_manualAdvancedTime_returnCorrectTime() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.advance(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY_ADD_HOUR, Clock.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void now_manualReversedTime_returnCorrectTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY.plus(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reverse(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TypicalTimes.DAY, Clock.now());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 66
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/DateTimeWrapperTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateTimeWrapperTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d \"2020-09-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_LATER_DATE_TIME \u003d \"2020-10-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTimeWrapper((String) null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String invalidDateTime \u003d \"asfd\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTimeWrapper(invalidDateTime));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isValidDateTime() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTimeWrapper.isValid(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTimeWrapper.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTimeWrapper.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTimeWrapper.isValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTimeWrapper.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTimeWrapper.isValid(\"12/02/12*\")); // wrong format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateTimeWrapper.isValid(\"2020-30-23T16:55:12.83012\")); // not a real date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // valid time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(DateTimeWrapper.isValid(VALID_DATE_TIME)); // typical date time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateTimeWrapper dateTimeWrapper \u003d new DateTimeWrapper(\"2020-09-23T16:55:12.83012\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(dateTimeWrapper.get().format(DateTimeUtil.FORMAT_DATE_TIME_MEDIUM),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                dateTimeWrapper.getFormatted());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second TimeWrapper is later"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new DateTimeWrapper(VALID_DATE_TIME).compareTo(new DateTimeWrapper(VALID_LATER_DATE_TIME)), -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second TimeWrapper is earlier"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new DateTimeWrapper(VALID_LATER_DATE_TIME).compareTo(new DateTimeWrapper(VALID_DATE_TIME)), 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // both TimeWrapper same time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new DateTimeWrapper(VALID_DATE_TIME)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .compareTo(new DateTimeWrapper(\"2020-09-23T16:55:12.83012\")), 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 64
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/DateWrapperTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.DateUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DateWrapperTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2019-09-23\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_LATER_DATE \u003d \"2019-09-25\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateWrapper((String) null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String invalidDate \u003d \"asfd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateWrapper(invalidDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null date time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateWrapper.isValid(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid date time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateWrapper.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateWrapper.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateWrapper.isValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateWrapper.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateWrapper.isValid(\"12/02/12*\")); // wrong format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DateWrapper.isValid(\"2019-30-23\")); // not a real date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // valid date time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(DateWrapper.isValid(VALID_DATE)); // typical time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getFormattedDate_formatsCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        DateWrapper dateWrapper \u003d new DateWrapper(VALID_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(dateWrapper.get().format(DateUtil.FORMAT_DATE_MEDIUM), dateWrapper.getFormatted());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second Date is later"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new DateWrapper(VALID_DATE).compareTo(new DateWrapper(VALID_LATER_DATE)), -1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second Date is earlier"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new DateWrapper(VALID_LATER_DATE).compareTo(new DateWrapper(VALID_DATE)), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // both Date same date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new DateWrapper(VALID_DATE).compareTo(new DateWrapper(\"2019-09-23\")), 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 61
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/TimeWrapperTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.TimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class TimeWrapperTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"10:15:30\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_LATER_TIME \u003d \"10:15:35\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TimeWrapper((String) null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String invalidTime \u003d \"asfd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TimeWrapper(invalidTime));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null time time"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeWrapper.isValid(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid time time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(TimeWrapper.isValid(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(TimeWrapper.isValid(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(TimeWrapper.isValid(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(TimeWrapper.isValid(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(TimeWrapper.isValid(\"10:15:30*\")); // wrong format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(TimeWrapper.isValid(\"52:15:30\")); // not a real time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // valid time time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(TimeWrapper.isValid(VALID_TIME)); // typical time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getFormattedTime_formatsCorrectly() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimeWrapper timeWrapper \u003d new TimeWrapper(VALID_TIME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(timeWrapper.get().format(TimeUtil.FORMAT_TIME_MEDIUM), timeWrapper.getFormatted());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second TimeWrapper is later"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new TimeWrapper(VALID_TIME).compareTo(new TimeWrapper(VALID_LATER_TIME)), -1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second TimeWrapper is earlier"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new TimeWrapper(VALID_LATER_TIME).compareTo(new TimeWrapper(VALID_TIME)), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // both TimeWrapper same time"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new TimeWrapper(VALID_TIME).compareTo(new TimeWrapper(\"10:15:30\")), 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 61
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final Index fifthProjectIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(fifthProjectIndex.equals(fifthProjectIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(fifthProjectIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/momentum/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //---------------- Tests for containsPartialIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e StringUtil.containsPartialIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e StringUtil.containsPartialIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e StringUtil.containsPartialIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsPartialIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void containsPartialIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(StringUtil.containsPartialIgnoreCase(\"\", \"abc\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(StringUtil.containsPartialIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(StringUtil.containsPartialIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bBb ccc\", \"Bbb\"));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\"));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // extra spaces"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // word has spaces"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(StringUtil.containsPartialIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 76,
      "claracheong4": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonProjectBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage projectBookStorage \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new JsonProjectBookStorage(temporaryFolder.resolve(\"projectBook.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS_PROJECTS, model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Setup LogicManager with JsonProjectBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage projectBookStorage \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new JsonProjectBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionProjectBook.json\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StorageManager storage \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(AMY).withTags()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withEmptyDeadline()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withEmptyReminder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.addTrackedItem(expectedProject);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void getFilteredProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                logic.getObservableFilteredTrackedItemList().get().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static class JsonProjectBookIoExceptionThrowingStub extends JsonProjectBookStorage {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        private JsonProjectBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void saveProjectBook(ReadOnlyProjectBook projectBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 3,
      "pr4aveen": 3,
      "claracheong4": 36,
      "kkangs0226": 3,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_newProject_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().withName(\"TEST\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.addTrackedItem(validProject);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(new AddCommand(validProject), model,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, AddCommand.TEXT_PROJECT, validProject), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Tests if add command places project in correct order."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_addCommand_placesProjectInOrder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project dana \u003d new ProjectBuilder().withName(\"Dana\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        AddCommand addDanaCommand \u003d new AddCommand(dana);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // alphabetical order -\u003e Dana gets placed in between Carl and Daniel"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.addTrackedItem(dana);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(addDanaCommand, model,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, AddCommand.TEXT_PROJECT, dana), expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemInList \u003d model.getProjectBook().getTrackedItemList().get(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(new AddCommand(trackedItemInList), model, AddCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 5,
      "pr4aveen": 6,
      "claracheong4": 12,
      "kkangs0226": 17,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.VersionedProjectBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_projectAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ModelStubSetModelManager modelStub \u003d new ModelStubSetModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validProject).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, AddCommand.TEXT_PROJECT, validProject),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(validProject), modelStub.projectsAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProject_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project validProject \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validProject);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithProject(validProject);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PROJECT, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project alice \u003d new ProjectBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project bob \u003d new ProjectBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public GuiWindowSettings getGuiWindowSettings() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public void setGuiWindowSettings(GuiWindowSettings guiWindowSettings) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public GuiThemeSettings getGuiThemeSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public void setGuiThemeSettings(GuiThemeSettings guiThemeSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public StatisticTimeframeSettings getStatisticTimeframeSettings() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        public void setStatisticTimeframeSettings(StatisticTimeframeSettings statisticTimeframeSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public Path getProjectBookFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void setProjectBookFilePath(Path projectBookFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void addTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void setVersionedProjectBook(ReadOnlyProjectBook newData) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public ReadOnlyProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public boolean hasTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void deleteTrackedItem(TrackedItem target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public ObservableList\u003cTrackedItem\u003e getFilteredTrackedItemList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public ObjectProperty\u003cFilteredList\u003cTrackedItem\u003e\u003e getObservableFilteredTrackedItemList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void orderFilteredProjectList(SortType sortType, boolean isAscending,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                                             boolean isSortedByCompletionStatus) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public ObservableList\u003cTrackedItem\u003e getRunningTimers() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public void updateRunningTimers() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void rescheduleReminders() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public BooleanProperty isReminderEmpty() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public StringProperty getReminder() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public void removeReminder() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public ViewMode getViewMode() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return ViewMode.PROJECTS;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public void viewTasks(Project project) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void setTrackedItem(TrackedItem target, TrackedItem editedTrackedItem) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public void updateFilteredProjectList(Predicate\u003cTrackedItem\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public void viewProjects() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public Project getCurrentProject() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public void viewAll() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        public void resetView() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public boolean canUndoCommand() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public boolean canRedoCommand() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void commitToHistory() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void undoCommand() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void resetUi(ViewMode viewMode, Project project) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void redoCommand() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * A Model stub that contains a single project."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private class ModelStubWithProject extends ModelStub {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        private final Project project;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ModelStubWithProject(Project project) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(project);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            this.project \u003d project;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public boolean hasTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(trackedItem);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return this.project.isSameTrackedItem(trackedItem);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * A Model stub that always accept the project being added."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private class ModelStubAcceptingProjectAdded extends ModelStub {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public final ArrayList\u003cTrackedItem\u003e projectsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public boolean hasTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(trackedItem);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            return projectsAdded.stream().anyMatch(trackedItem::isSameTrackedItem);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public void addTrackedItem(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            requireNonNull(trackedItem);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            projectsAdded.add(trackedItem);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        public ReadOnlyProjectBook getProjectBook() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return new ProjectBook();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * A Model stub that resets {@code ModelManager}."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private class ModelStubSetModelManager extends ModelStubAcceptingProjectAdded {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        private ViewMode viewMode \u003d ViewMode.PROJECTS;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        private Project currentProject \u003d null;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        private final VersionedProjectBook versionedProjectBook \u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new VersionedProjectBook(new ProjectBook(), viewMode, currentProject);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        public void commitToHistory() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            versionedProjectBook.commit(viewMode, currentProject);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 51,
      "pr4aveen": 37,
      "claracheong4": 38,
      "kkangs0226": 53,
      "khoodehui": 25,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void execute_emptyProjectBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS_ALL, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void execute_nonEmptyProjectBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setVersionedProjectBook(new ProjectBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS_ALL, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 2,
      "claracheong4": 29,
      "kkangs0226": 3
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.EditTrackedItemDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"Loves coffee\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"Hates coffee\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final CompletionStatus VALID_COMPLETION_STATUS_AMY \u003d new CompletionStatus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final CompletionStatus VALID_COMPLETION_STATUS_BOB \u003d new CompletionStatus().reverse();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_CREATED_DATE_AMY \u003d \"2019-12-02\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_CREATED_DATE_BOB \u003d \"2019-10-02\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_DEADLINE_DATE_AMY \u003d \"2030-12-02\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_DEADLINE_DATE_BOB \u003d \"2030-10-02\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_DEADLINE_TIME_AMY \u003d \"11:42:53\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_REMINDER_AMY \u003d \"2030-06-22T05:42:53\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String COMPLETION_STATUS_DESC_BOB \u003d \" \" + PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEADLINE_DATE_DESC_AMY \u003d \" \" + PREFIX_DEADLINE_DATE + VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEADLINE_DATE_DESC_BOB \u003d \" \" + PREFIX_DEADLINE_DATE + VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEADLINE_TIME_DESC_AMY \u003d \" \" + PREFIX_DEADLINE_TIME + VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String REMINDER_DESC_AMY \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String INVALID_DEADLINE_DATE_DESC \u003d \" \" + PREFIX_DEADLINE_DATE + \"2020-91-64\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String INVALID_DEADLINE_TIME_DESC \u003d \" \" + PREFIX_DEADLINE_TIME + \"09:91:12\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String INVALID_REMINDER_DESC \u003d \" \" + PREFIX_REMINDER + VALID_DEADLINE_DATE_AMY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + VALID_DEADLINE_TIME_AMY; // \u0027T\u0027 is required to separate date and time"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INVALID_SORT_TYPE \u003d \" \" + SORT_TYPE + \"nomnom\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String INVALID_SORT_ORDER \u003d \" \" + SORT_ORDER + \"can you not\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_ASCENDING_SORT_ORDER \u003d \" \" + SORT_ORDER + \"asc\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String VALID_DESCENDING_SORT_ORDER \u003d \" \" + SORT_ORDER + \"dsc\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_ALPHA_SORT_TYPE \u003d \" \" + SORT_TYPE + SortCommand.INPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_DEADLINE_SORT_TYPE \u003d \" \" + SORT_TYPE + SortCommand.INPUT_DEADLINE_TYPE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String VALID_CREATED_DATE_SORT_TYPE \u003d \" \" + SORT_TYPE + SortCommand.INPUT_CREATED_TYPE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            + \" \" + PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final EditCommand.EditTrackedItemDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final EditCommand.EditTrackedItemDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        DESC_AMY \u003d new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY, VALID_CREATED_DATE_AMY)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withReminder(VALID_REMINDER_AMY)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        DESC_BOB \u003d new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCompletionStatus(VALID_COMPLETION_STATUS_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (ParseException | CommandException ce) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * - the project book, filtered project list and selected project in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook expectedProjectBook \u003d new ProjectBook(actualModel.getProjectBook());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cTrackedItem\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedProjectBook, actualModel.getProjectBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the project at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * {@code model}\u0027s project book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static void showProjectAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTrackedItemList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItem \u003d model.getFilteredTrackedItemList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        final String[] splitName \u003d trackedItem.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            new NameContainsKeywordsPredicate(FindType.ANY, Collections.singletonList(splitName[0])));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(1, model.getFilteredTrackedItemList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 7,
      "pr4aveen": 12,
      "claracheong4": 51,
      "kkangs0226": 12,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemToDelete \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PROJECT_SUCCESS, trackedItemToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedModel.deleteTrackedItem(trackedItemToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTrackedItemList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemToDelete \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PROJECT_SUCCESS, trackedItemToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedModel.deleteTrackedItem(trackedItemToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showNoProject(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getTrackedItemList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private void showNoProject(Model model) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        model.updateFilteredProjectList(p -\u003e false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(model.getFilteredTrackedItemList().isEmpty());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 7,
      "pr4aveen": 17,
      "claracheong4": 16,
      "kkangs0226": 2,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand.EditTrackedItemDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.EditTrackedItemDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedProject \u003d new ProjectBuilder().withCompletionStatus(CompletionStatus.COMPLETED).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptor \u003d new EditTrackedItemDescriptorBuilder(editedProject).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(model.getFilteredTrackedItemList().get(0), editedProject);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Index indexLastTrackedItem \u003d Index.fromOneBased(model.getFilteredTrackedItemList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem lastTrackedItem \u003d model.getFilteredTrackedItemList().get(indexLastTrackedItem.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ProjectBuilder projectInList \u003d new ProjectBuilder(lastTrackedItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedProject \u003d projectInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTrackedItem, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedProject);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(lastTrackedItem, editedProject);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, new EditTrackedItemDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem editedTrackedItem \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedTrackedItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(editedTrackedItem, editedTrackedItem);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem trackedItemInFilteredList \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem editedTrackedItem \u003d new ProjectBuilder(trackedItemInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PROJECT_SUCCESS, editedTrackedItem);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ProjectBook(model.getProjectBook()), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(model.getFilteredTrackedItemList().get(0), editedTrackedItem);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProjectUnfilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem firstTrackedItem \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        EditTrackedItemDescriptor descriptor \u003d new EditTrackedItemDescriptorBuilder(firstTrackedItem).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PROJECT, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_duplicateProjectFilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // edit project in filtered list into a duplicate in project book"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TrackedItem trackedItemInList \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            model.getProjectBook().getTrackedItemList().get(INDEX_SECOND_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PROJECT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new EditTrackedItemDescriptorBuilder(trackedItemInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PROJECT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_invalidProjectIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTrackedItemList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditTrackedItemDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * but smaller than size of project book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_invalidProjectIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getTrackedItemList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PROJECT, DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditTrackedItemDescriptor copyDescriptor \u003d new EditTrackedItemDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PROJECT, copyDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PROJECT, DESC_AMY)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PROJECT, DESC_BOB)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 17,
      "pr4aveen": 35,
      "claracheong4": 35,
      "kkangs0226": 8,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/EditTrackedItemDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_COMPLETION_STATUS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.EditTrackedItemDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class EditTrackedItemDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditCommand.EditTrackedItemDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new EditTrackedItemDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        editedAmy \u003d new EditTrackedItemDescriptorBuilder(DESC_AMY).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different completion status -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAmy \u003d new EditTrackedItemDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCompletionStatus(VALID_COMPLETION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAmy \u003d new EditTrackedItemDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_AMY).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DESC_AMY.equals((editedAmy)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different reminder -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAmy \u003d new EditTrackedItemDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withReminder(VALID_DEADLINE_DATE_BOB + \"T\" + VALID_DEADLINE_TIME_AMY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(DESC_AMY.equals((editedAmy)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        editedAmy \u003d new EditTrackedItemDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 4,
      "pr4aveen": 4,
      "claracheong4": 25,
      "kkangs0226": 4,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_PROJECTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.FindCommandParser.FIND_ARGUMENT_DELIMITER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.DANIEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ELLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.FIONA;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.GEORGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.predicates.CompletionStatusPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.TagListContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String TEST_NAMES \u003d \"Kurz Elle Kunz\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String TEST_DESCRIPTIONS \u003d \"starbucks elephants cats\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final String TEST_TAGS \u003d \"friends owesMoney\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void execute_zeroKeywords_noProjectFound() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ANY, \" \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void anyMatch_multipleNameKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ANY, TEST_NAMES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleNameKeywords_noProjectsFound() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ALL, TEST_NAMES);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleNameKeywords_oneProjectsFound() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(FindType.ALL, \"CA rL Ku Rz\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.singletonList(CARL), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void anyMatch_multipleDescriptionKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                prepareDescriptionPredicate(FindType.ANY, TEST_DESCRIPTIONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(DANIEL, ELLE, FIONA), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleDescriptionKeywords_noProjectsFound() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                prepareDescriptionPredicate(FindType.ALL, TEST_DESCRIPTIONS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleDescriptionKeywords_oneProjectFound() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                prepareDescriptionPredicate(FindType.ALL, \"likes star bucks\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.singletonList(FIONA), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void anyMatch_singleCompletionStatusKeyword_multipleProjectsFound() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        CompletionStatusPredicate predicate \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                prepareCompletionStatusPredicate(FindType.ANY, CompletionStatusPredicate.COMPLETED_KEYWORD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(Arrays.asList(BENSON, CARL, GEORGE), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void anyMatch_multipleTagKeywords_multipleProjectsFound() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate predicate \u003d prepareTagListPredicate(FindType.ANY, TEST_TAGS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, BENSON, DANIEL), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void allMatch_multipleTagKeywords_oneProjectFound() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PROJECTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate predicate \u003d prepareTagListPredicate(FindType.ALL, TEST_TAGS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedModel.updateFilteredProjectList(predicate);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.singletonList(BENSON), model.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(FindType findType, String userInput) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new NameContainsKeywordsPredicate(findType, Arrays.asList(userInput.split(FIND_ARGUMENT_DELIMITER)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private DescriptionContainsKeywordsPredicate prepareDescriptionPredicate(FindType findType, String userInput) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(findType,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                Arrays.asList(userInput.split(FIND_ARGUMENT_DELIMITER)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Parses {@code userInput} into a {@code CompletionStatusPredicate}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private CompletionStatusPredicate prepareCompletionStatusPredicate(FindType findType, String userInput) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new CompletionStatusPredicate(findType,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Arrays.asList(userInput.split(FIND_ARGUMENT_DELIMITER)));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses {@code userInput} into a {@code TagListContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private TagListContainsKeywordsPredicate prepareTagListPredicate(FindType findType, String userInput) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return new TagListContainsKeywordsPredicate(findType,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                Arrays.asList(userInput.split(FIND_ARGUMENT_DELIMITER)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 117,
      "claracheong4": 33,
      "kkangs0226": 10,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS_PROJECTS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS_PROJECTS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 2,
      "pr4aveen": 1,
      "claracheong4": 10,
      "kkangs0226": 2,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/ShowComponentCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.ShowComponentCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ShowComponentCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ShowComponentCommand(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void execute_showComponent_throwsCommandException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ShowComponentCommand showComponentCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new ShowComponentCommand(ShowComponentCommandParser.ComponentType.REMINDER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertCommandFailure(showComponentCommand, model, ShowComponentCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 27
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.MESSAGE_SORT_SUCCESS_PROJECTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_ASCENDING_ORDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_CREATED_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_DEADLINE_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_DEFAULT_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.OUTPUT_DESCENDING_ORDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_DESCENDING_COMMAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.CREATED_DATE_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.CREATED_DATE_DESCENDING_COMMAND_WITH_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEADLINE_ASCENDING_COMMAND_WITH_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEADLINE_DESCENDING_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEFAULT_SORT_COMMAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String EMPTY_STRING \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Model expectedModel \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .equals(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        SortCommand alphaAscending \u003d new SortCommand(SortType.ALPHA, true, false, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS.equals(alphaAscending));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both default -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // DEFAULT_SORT sort type is set to SortType.ALPHA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        SortCommand defaultSort \u003d new SortCommand(SortType.ALPHA, true, true, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(DEFAULT_SORT_COMMAND.equals(defaultSort));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // one default, one not default"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS.equals(DEFAULT_SORT_COMMAND));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different sort types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .equals(DEADLINE_ASCENDING_COMMAND_WITH_COMPLETION_STATUS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different sort orders -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS.equals(ALPHA_DESCENDING_COMMAND));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_defaultSort_sortedInDefaultOrder() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS_PROJECTS, EMPTY_STRING, OUTPUT_DEFAULT_TYPE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(DEFAULT_SORT_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_alphabeticalAscending_sortedInAlphabeticalAscendingOrder() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                String.format(MESSAGE_SORT_SUCCESS_PROJECTS, OUTPUT_ALPHA_TYPE, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertCommandSuccess(ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_alphabeticalDescending_sortedInAlphabeticalDescendingOrder() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.ALPHA, false, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                String.format(MESSAGE_SORT_SUCCESS_PROJECTS, OUTPUT_ALPHA_TYPE, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(ALPHA_DESCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_deadlineAscending_sortedInDeadlineAscendingOrder() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.DEADLINE, true, true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                String.format(MESSAGE_SORT_SUCCESS_PROJECTS, OUTPUT_DEADLINE_TYPE, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertCommandSuccess(DEADLINE_ASCENDING_COMMAND_WITH_COMPLETION_STATUS, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_deadlineDescending_sortedInDeadlineDescendingOrder() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.DEADLINE, false, false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                String.format(MESSAGE_SORT_SUCCESS_PROJECTS, OUTPUT_DEADLINE_TYPE, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(DEADLINE_DESCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_createdDateAscending_sortedInCreatedDateAscendingOrder() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.CREATED, true, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                String.format(MESSAGE_SORT_SUCCESS_PROJECTS, OUTPUT_CREATED_TYPE, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(CREATED_DATE_ASCENDING_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_createdDateDescending_sortedInCreatedDateDescendingOrder() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.CREATED, false, true);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                String.format(MESSAGE_SORT_SUCCESS_PROJECTS, OUTPUT_CREATED_TYPE, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertCommandSuccess(CREATED_DATE_DESCENDING_COMMAND_WITH_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_nullSortTypeAscendingNonDefault_sortedInCurrentSortTypeAscendingOrder() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model.orderFilteredProjectList(SortType.DEADLINE, false, true);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.DEADLINE, true, true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS_PROJECTS, EMPTY_STRING, OUTPUT_ASCENDING_ORDER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void execute_nullSortTypeDescendingNonDefault_sortedInCurrentSortTypeDscendingOrder() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        model.orderFilteredProjectList(SortType.CREATED, true, true);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedModel.orderFilteredProjectList(SortType.CREATED, false, true);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SORT_SUCCESS_PROJECTS, EMPTY_STRING, OUTPUT_DESCENDING_ORDER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertCommandSuccess(NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(model.getFilteredTrackedItemList(), expectedModel.getFilteredTrackedItemList());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 9,
      "claracheong4": 31,
      "kkangs0226": 125
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/StartCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Contains unit tests for {@code StartCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StartCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemToStart \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem startedTrackedItem \u003d trackedItemToStart.startTimer();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(trackedItemToStart, startedTrackedItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                String.format(StartCommand.MESSAGE_START_TIMER_SUCCESS, INDEX_FIRST_PROJECT.getOneBased())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                + startedTrackedItem.getTimer().getStartTime().getFormatted();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTrackedItemList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(startCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_alreadyRunning_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemToStart \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.setTrackedItem(trackedItemToStart, trackedItemToStart.startTimer());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(startCommand, model, StartCommand.MESSAGE_EXISTING_TIMER_ERROR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemToStart \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem startedTrackedItem \u003d trackedItemToStart.startTimer();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(trackedItemToStart, startedTrackedItem);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                String.format(StartCommand.MESSAGE_START_TIMER_SUCCESS, INDEX_FIRST_PROJECT.getOneBased())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        + startedTrackedItem.getTimer().getStartTime().getFormatted();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(expectedModel, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(startCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getTrackedItemList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startCommand \u003d new StartCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(startCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startFirstCommand \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startSecondCommand \u003d new StartCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(startFirstCommand.equals(startFirstCommand));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand startFirstCommandCopy \u003d new StartCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(startFirstCommand.equals(startFirstCommandCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(startFirstCommand.equals(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(startFirstCommand.equals(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(startFirstCommand.equals(startSecondCommand));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 117,
      "pr4aveen": 2,
      "kkangs0226": 6
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/commands/StopCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.showProjectAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Contains unit tests for {@code StartCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StopCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemToStop \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem startedTrackedItem \u003d trackedItemToStop.startTimer();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(trackedItemToStop, startedTrackedItem);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(StopCommand.MESSAGE_STOP_TIMER_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                INDEX_FIRST_PROJECT.getOneBased(), 60);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.setTrackedItem(trackedItemToStop, startedTrackedItem);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.advance(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem stoppedTrackedItem \u003d startedTrackedItem.stopTimer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(startedTrackedItem, stoppedTrackedItem);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(stopCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTrackedItemList().size() + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(stopCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_noTimer_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(stopCommand, model, StopCommand.MESSAGE_NO_TIMER_ERROR);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initManual(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem trackedItemToStop \u003d model.getFilteredTrackedItemList().get(INDEX_FIRST_PROJECT.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(StopCommand.MESSAGE_STOP_TIMER_SUCCESS,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                INDEX_FIRST_PROJECT.getOneBased(), 60);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem startedTrackedItem \u003d trackedItemToStop.startTimer();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(trackedItemToStop, startedTrackedItem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        model.setTrackedItem(trackedItemToStop, startedTrackedItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.advance(1, ChronoUnit.HOURS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        TrackedItem stoppedTrackedItem \u003d startedTrackedItem.stopTimer();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.setTrackedItem(startedTrackedItem, stoppedTrackedItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedModel.commitToHistory();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(expectedModel, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandSuccess(stopCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.reset();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        showProjectAtIndex(model, INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of project book list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getProjectBook().getTrackedItemList().size());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopCommand \u003d new StopCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertCommandFailure(stopCommand, model, Messages.MESSAGE_INVALID_PROJECT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopFirstCommand \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopSecondCommand \u003d new StopCommand(INDEX_SECOND_PROJECT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(stopFirstCommand.equals(stopFirstCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand stopFirstCommandCopy \u003d new StopCommand(INDEX_FIRST_PROJECT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(stopFirstCommand.equals(stopFirstCommandCopy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(stopFirstCommand.equals(1));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(stopFirstCommand.equals(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(stopFirstCommand.equals(stopSecondCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 125,
      "pr4aveen": 2,
      "kkangs0226": 8
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.COMPLETION_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_TIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_REMINDER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.REMINDER_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_REMINDER_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withReminder(VALID_REMINDER_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + COMPLETION_STATUS_DESC_BOB + DEADLINE_DATE_DESC_BOB + REMINDER_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + COMPLETION_STATUS_DESC_BOB + DEADLINE_DATE_DESC_BOB + REMINDER_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_AMY + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + COMPLETION_STATUS_DESC_BOB + DEADLINE_DATE_DESC_BOB + REMINDER_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // multiple completion status"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + COMPLETION_STATUS_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + COMPLETION_STATUS_DESC_BOB + DEADLINE_DATE_DESC_BOB + REMINDER_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // multiple deadlines - last deadline accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + DEADLINE_DATE_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + COMPLETION_STATUS_DESC_BOB + DEADLINE_DATE_DESC_BOB + REMINDER_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // multiple reminders, last reminder accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + DEADLINE_DATE_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + COMPLETION_STATUS_DESC_BOB + DEADLINE_DATE_DESC_BOB + REMINDER_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + REMINDER_DESC_AMY,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project expectedProjectMultipleTags \u003d new ProjectBuilder(BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withReminder(VALID_REMINDER_AMY)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + COMPLETION_STATUS_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + DEADLINE_DATE_DESC_BOB + REMINDER_DESC_AMY + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new AddCommand(expectedProjectMultipleTags), model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // no description"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project expectedProject \u003d new ProjectBuilder(AMY).withEmptyDescription().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DEADLINE_DATE_DESC_AMY + DEADLINE_TIME_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + REMINDER_DESC_AMY + TAG_DESC_FRIEND, new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // no deadline"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(AMY).withEmptyDeadline().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DESCRIPTION_DESC_AMY + REMINDER_DESC_AMY + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // no time in deadline"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(AMY).withDeadline(VALID_DEADLINE_DATE_AMY, VALID_CREATED_DATE_AMY)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DESCRIPTION_DESC_AMY + DEADLINE_DATE_DESC_AMY + REMINDER_DESC_AMY"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // no reminder"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(AMY).withCurrentCreatedDate().withEmptyReminder().build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                NAME_DESC_AMY + DESCRIPTION_DESC_AMY + DEADLINE_DATE_DESC_AMY + DEADLINE_TIME_DESC_AMY"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + TAG_DESC_FRIEND, new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProject \u003d new ProjectBuilder(AMY).withTags().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + DESCRIPTION_DESC_AMY + DEADLINE_DATE_DESC_AMY"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + DEADLINE_TIME_DESC_AMY + REMINDER_DESC_AMY, new AddCommand(expectedProject), model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_DESCRIPTION_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                expectedMessage, model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid deadline with invalid date"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + INVALID_DEADLINE_DATE_DESC"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DateWrapper.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid deadline with invalid time"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + INVALID_DEADLINE_DATE_DESC + INVALID_DEADLINE_TIME_DESC"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, DateWrapper.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid deadline with invalid date and time"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + INVALID_DEADLINE_DATE_DESC"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        + INVALID_DEADLINE_TIME_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                DateWrapper.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // invalid reminder"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB + INVALID_REMINDER_DESC,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                DateTimeWrapper.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + DESCRIPTION_DESC_BOB + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + DESCRIPTION_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 11,
      "claracheong4": 112,
      "kkangs0226": 12,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand, Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            Command command \u003d parser.parse(userInput, model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage, Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            parser.parse(userInput, model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 5,
      "claracheong4": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PROJECT), model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 8,
      "claracheong4": 6,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.COMPLETION_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DEADLINE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_DEADLINE_TIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_REMINDER_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.REMINDER_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_COMPLETION_STATUS_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_REMINDER_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.TimeWrapper;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.EditTrackedItemDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT, model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT, model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS, model); // invalid name"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DEADLINE_DATE_DESC,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                DateWrapper.MESSAGE_CONSTRAINTS, model); // invalid date in deadline"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, \"1\" + DEADLINE_DATE_DESC_AMY + INVALID_DEADLINE_TIME_DESC,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                TimeWrapper.MESSAGE_CONSTRAINTS, model); // invalid time in deadline"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, \"1\" + DEADLINE_DATE_DESC_AMY + INVALID_REMINDER_DESC,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                DateTimeWrapper.MESSAGE_CONSTRAINTS, model); // invalid reminder"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS, model); // invalid tag"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Project} being edited,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PROJECT;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND + NAME_DESC_AMY + DESCRIPTION_DESC_AMY"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + COMPLETION_STATUS_DESC_BOB + DEADLINE_DATE_DESC_AMY + DEADLINE_TIME_DESC_AMY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + REMINDER_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withCompletionStatus(VALID_COMPLETION_STATUS_AMY)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY, VALID_CREATED_DATE_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withReminder(VALID_REMINDER_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand.EditTrackedItemDescriptor descriptor \u003d new EditProjectDescriptorBuilder()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new EditTrackedItemDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor \u003d new EditTrackedItemDescriptorBuilder().withDescription(VALID_DESCRIPTION_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // completion status"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COMPLETION_STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor \u003d new EditTrackedItemDescriptorBuilder().withCompletionStatus(new CompletionStatus()).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // deadline with date"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DATE_DESC_BOB;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor \u003d new EditTrackedItemDescriptorBuilder()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_BOB).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // deadline with date and time"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DEADLINE_DATE_DESC_BOB + DEADLINE_TIME_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor \u003d new EditTrackedItemDescriptorBuilder()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_DEADLINE_TIME_AMY, VALID_CREATED_DATE_AMY).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // reminder"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMINDER_DESC_AMY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor \u003d new EditTrackedItemDescriptorBuilder().withReminder(VALID_REMINDER_AMY).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor \u003d new EditTrackedItemDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                + DESCRIPTION_DESC_AMY + TAG_DESC_FRIEND + DESCRIPTION_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptor \u003d new EditTrackedItemDescriptorBuilder()"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        // no other valid values specified"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        Index targetIndex \u003d INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand.EditTrackedItemDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //                new EditProjectDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        // other valid values specified"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        descriptor \u003d new EditProjectDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //              .build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PROJECT;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptor \u003d new EditTrackedItemDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand, model);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 8,
      "pr4aveen": 68,
      "claracheong4": 72,
      "kkangs0226": 20,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.FIND_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.predicates.CompletionStatusPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.TagListContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME + \"         \","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // invalid match type"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, FIND_TYPE + \"fail\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // non empty preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"preamble \" + PREFIX_NAME + \"name\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // prefixes (other than /match) missing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, FIND_TYPE + \"all\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // \u003e 1 keyword for completion status"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, String.format(\"%s %s %s %s %s\", FIND_TYPE, \"any\", PREFIX_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                CompletionStatusPredicate.COMPLETED_KEYWORD, CompletionStatusPredicate.INCOMPLETE_KEYWORD),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        String userInput \u003d \" %sfirst second  \" + FIND_TYPE + \"all\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // no leading and trailing whitespaces (name)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(FindType.ALL, keywords));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, String.format(userInput, PREFIX_NAME), expectedFindCommand, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // no leading and trailing whitespaces (desc)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new FindCommand(new DescriptionContainsKeywordsPredicate(FindType.ALL, keywords));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, String.format(userInput, PREFIX_DESCRIPTION), expectedFindCommand, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // no leading and trailing whitespaces (tag)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new FindCommand(new TagListContainsKeywordsPredicate(FindType.ALL, keywords));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, String.format(userInput, PREFIX_TAG), expectedFindCommand, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + \"\\nfirst \\nsecond \" + FIND_TYPE + \"\\nall\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            expectedFindCommand, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 53,
      "claracheong4": 12,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2021-42-12\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DEADLINE_DATE \u003d \"1000-09-12\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_REMINDER \u003d \"3000-12-1202:31:23\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_TIME \u003d \"42:12:12\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Loves to eat\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2021-12-12\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"12:12:12\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_REMINDER \u003d \"2025-12-23T13:21:25\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final DateWrapper VALID_CREATED_DATE_WRAPPER \u003d new DateWrapper(VALID_DATE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(INDEX_FIRST_PROJECT, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(INDEX_FIRST_PROJECT, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDeadline_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(INVALID_DATE), Optional.empty(), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(INVALID_DATE), Optional.of(INVALID_TIME), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // deadline is before created date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(INVALID_DEADLINE_DATE), Optional.empty(), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDeadline("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(INVALID_DEADLINE_DATE), Optional.of(VALID_TIME), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDeadline_validValueWithoutWhitespace_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DATE, VALID_CREATED_DATE_WRAPPER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadline,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ParserUtil.parseDeadline(Optional.of(VALID_DATE), Optional.empty(), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedDeadline \u003d new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadline,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ParserUtil.parseDeadline(Optional.of(VALID_DATE), Optional.of(VALID_TIME), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDeadline_validValueWithWhitespace_returnsTrimmedDeadline() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String timeWithWhitespace \u003d WHITESPACE + VALID_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadline,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ParserUtil.parseDeadline(Optional.of(dateWithWhitespace),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        Optional.of(timeWithWhitespace),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                        VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseReminder_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReminder("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(VALID_DATE), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReminder("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(VALID_TIME), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseReminder("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                Optional.of(INVALID_REMINDER), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseReminder_validValueWithoutWhitespace_returnsReminder() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Reminder expectedReminder \u003d new Reminder(VALID_REMINDER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedReminder,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ParserUtil.parseReminder(Optional.of(VALID_REMINDER), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedReminder \u003d new Reminder();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedReminder, ParserUtil.parseReminder(Optional.empty(), VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseReminder_validValueWithWhitespace_returnsTrimmedReminder() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String reminderWithWhiteSpace \u003d WHITESPACE + VALID_REMINDER + WHITESPACE;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Reminder expectedReminder \u003d new Reminder(VALID_REMINDER);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedReminder, ParserUtil.parseReminder(Optional.of(reminderWithWhiteSpace),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "claracheong4": 86,
      "kkangs0226": 18,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/ProjectBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.SortCommand.INPUT_ALPHA_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_ORDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.SORT_TYPE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ShowComponentCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.EditTrackedItemDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBookParser parser \u003d new ProjectBookParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project project \u003d new ProjectBuilder().withCurrentCreatedDate().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ProjectUtil.getAddCommand(project), model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new AddCommand(project), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD, model) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\", model) instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased(), model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        EditCommand.EditTrackedItemDescriptor descriptor \u003d new EditTrackedItemDescriptorBuilder(project).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + INDEX_FIRST_PROJECT.getOneBased() + \" \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            + ProjectUtil.getEditProjectDescriptorDetails(descriptor), model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PROJECT, descriptor), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD, model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\", model) instanceof ExitCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + String.join(\" \", keywords), model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(FindType.ANY, keywords)), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD, model) instanceof SortCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        SortCommand command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + SORT_ORDER + SortCommand.INPUT_ASCENDING_ORDER + \" \" + SORT_TYPE + INPUT_ALPHA_TYPE + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + PREFIX_COMPLETION_STATUS, model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new SortCommand(SortType.ALPHA, true, false, false), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD, model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\", model) instanceof HelpCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD, model) instanceof ListCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\", model) instanceof ListCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parseCommand_start() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StartCommand command \u003d (StartCommand) parser.parseCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                StartCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased(), model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(new StartCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parseCommand_stop() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StopCommand command \u003d (StopCommand) parser.parseCommand("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                StopCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PROJECT.getOneBased(), model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(new StopCommand(INDEX_FIRST_PROJECT), command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parseCommand_showComponent() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ShowComponentCommand command \u003d (ShowComponentCommand) parser.parseCommand("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ShowComponentCommand.COMMAND_WORD + \" \" + PREFIX_REMINDER, model);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new ShowComponentCommand(ShowComponentCommandParser.ComponentType.REMINDER), command);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e parser.parseCommand(\"\", model));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\", model));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 16,
      "pr4aveen": 30,
      "claracheong4": 35,
      "kkangs0226": 11,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/ShowComponentCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.ShowComponentCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ShowComponentCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ShowComponentCommandParser parser \u003d new ShowComponentCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parse_validArgs_returnsShowComponentCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ShowComponentCommand.COMMAND_WORD + \" \" + PREFIX_REMINDER,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new ShowComponentCommand(ShowComponentCommandParser.ComponentType.REMINDER),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ShowComponentCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 33
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_SORT_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.INVALID_SORT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_ALPHA_SORT_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_ASCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_SORT_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_SORT_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.ALPHA_DESCENDING_COMMAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.CREATED_DATE_ASCENDING_COMMAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.DEADLINE_ASCENDING_COMMAND_WITH_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.SortCommandUtil.NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String MESSAGE_INVALID_SORT_TYPE_OR_ORDER \u003d String.format("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_INVALID_SORT_TYPE_OR_ORDER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String MESSAGE_NON_EMPTY_PREAMBLE_FAILURE \u003d String.format("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final SortCommand DEFAULT_SORT_COMMAND \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.NULL, true, true, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_emptyArg_returnsDefaultSortCommand() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, \" \", DEFAULT_SORT_COMMAND, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_missingSortType_returnsOrderedSortCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Ascending order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, VALID_ASCENDING_SORT_ORDER, NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND, model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Descending order"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, VALID_DESCENDING_SORT_ORDER, NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND, model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_missingSortOrder_returnsTypedAscendingSortCommand() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Alphabetical type"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, VALID_ALPHA_SORT_TYPE, ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Deadline type"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertParseSuccess(parser, VALID_DEADLINE_SORT_TYPE, DEADLINE_ASCENDING_COMMAND_WITH_COMPLETION_STATUS, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Created date type"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, VALID_CREATED_DATE_SORT_TYPE, CREATED_DATE_ASCENDING_COMMAND, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_allFieldsSpecified_returnsSortCommand() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String userInput \u003d VALID_ALPHA_SORT_TYPE + VALID_DESCENDING_SORT_ORDER + \" \" + PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, userInput, ALPHA_DESCENDING_COMMAND, model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_invalidSortType_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, INVALID_SORT_TYPE, MESSAGE_INVALID_SORT_TYPE_OR_ORDER, model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_invalidSortOrder_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, INVALID_SORT_ORDER, MESSAGE_INVALID_SORT_TYPE_OR_ORDER, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_nonEmptyPreambleNoArguments_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble without sort type and sort order"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        String userInput \u003d PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE, model);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble with valid sort type and sort order"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d PREAMBLE_NON_EMPTY + VALID_ALPHA_SORT_TYPE + VALID_ASCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE, model);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble with valid sort type"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d PREAMBLE_NON_EMPTY + VALID_ALPHA_SORT_TYPE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // Non-empty preamble with valid sort order"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        userInput \u003d PREAMBLE_NON_EMPTY + VALID_ASCENDING_SORT_ORDER;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NON_EMPTY_PREAMBLE_FAILURE, model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 16,
      "claracheong4": 7,
      "kkangs0226": 91
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/StartCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StartCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StartCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private StartCommandParser parser \u003d new StartCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_validArgs_returnsStartCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StartCommand(INDEX_FIRST_PROJECT), model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            StartCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 22,
      "pr4aveen": 8
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/parser/StopCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalIndexes.INDEX_FIRST_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.logic.commands.StopCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StopCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private StopCommandParser parser \u003d new StopCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_validArgs_returnsStopCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StopCommand(INDEX_FIRST_PROJECT), model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopCommand.MESSAGE_USAGE), model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 22,
      "pr4aveen": 8
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/PeriodicTotalTimeStatisticTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_WEEKLY_TIME_PER_PROJECT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class PeriodicTotalTimeStatisticTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void constructor_nullPeriod_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new PeriodicTotalTimeStatistic(null, ChronoUnit.MINUTES));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void constructor_nullUnits_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                new PeriodicTotalTimeStatistic(new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY), null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void calculate_typicalProjects_correctData() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY_ADD_DAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic stat \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                new PeriodicTotalTimeStatistic(new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        stat.calculate(TEST_MODEL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TEST_WEEKLY_TIME_PER_PROJECT, stat);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void calculate_notInPeriod_correctData() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY_ADD_YEAR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic stat \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                new PeriodicTotalTimeStatistic(new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        stat.calculate(TEST_MODEL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        PeriodicTotalTimeStatistic expectedStat \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                new PeriodicTotalTimeStatistic(new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                    ChronoUnit.MINUTES,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        FXCollections.observableArrayList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Alpha\", 0),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Beta\", 0),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Charlie\", 0),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                                new StatisticEntry(\"Delta\", 0)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                        ));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedStat, stat);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 53,
      "khoodehui": 8
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/StatisticEntryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StatisticEntryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void constructor_nullLabel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new StatisticEntry(null, 0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void getLabel() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry entry \u003d new StatisticEntry(\"Label\", 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(\"Label\", entry.getLabel());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry entry \u003d new StatisticEntry(\"Label\", 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(1, entry.getValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toStringTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry entry \u003d new StatisticEntry(\"Label\", 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expected \u003d String.format(\"(%s, %f)\", \"Label\", 0.0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expected, entry.toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label1value1 \u003d new StatisticEntry(\"Label1\", 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label1value2 \u003d new StatisticEntry(\"Label1\", 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label2value1 \u003d new StatisticEntry(\"Label2\", 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticEntry label2value2 \u003d new StatisticEntry(\"Label2\", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Same object, returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(label1value1.equals(label1value1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Same label, same value, returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(label1value1.equals(new StatisticEntry(\"Label1\", 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Same label, different value, returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(label1value1.equals(label1value2));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Different label, same value, returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(label1value1.equals(label2value1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // Different label, different value, returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(label1value1.equals(label2value2));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 59
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/StatisticManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_MODEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_STATISTICS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.logic.statistic.StatisticTestUtil.TEST_WEEKLY_TIME_PER_PROJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalTimes.DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "class StatisticManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Clock.initFixed(DAY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void updateStatistics() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticGenerator statisticGenerator \u003d new StatisticManager(TEST_MODEL);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statisticGenerator.updateStatistics();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TEST_STATISTICS, statisticGenerator);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    void getWeeklyTimePerProjectStatistic() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        StatisticGenerator statisticGenerator \u003d new StatisticManager(TEST_MODEL);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        statisticGenerator.updateStatistics();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(TEST_WEEKLY_TIME_PER_PROJECT.getDisplayList(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                statisticGenerator.getTimePerProjectStatistic());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 36,
      "khoodehui": 1
    }
  },
  {
    "path": "src/test/java/seedu/momentum/logic/statistic/StatisticTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.logic.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalWorkDuration.DURATION_ONE_HOUR;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Dummy data used for testing statistic generation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " * Contains pre-calculated \"correct\" statistics to be compared to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class StatisticTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    //Projects"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project ALPHA \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Alpha\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Alpha Project\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withTags(\"CompanyA\", \"CompanyB\", \"CompanyC\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(DURATION_ONE_HOUR)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project BETA \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Beta\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project CHARLIE \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Charlie\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(DURATION_ONE_HOUR)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Project DELTA \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withName(\"Delta\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Delta Project\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(DURATION_ONE_HOUR)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Model TEST_MODEL \u003d new ModelManager(getTypicalProjectBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    // Statistics"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final PeriodicTotalTimeStatistic TEST_WEEKLY_TIME_PER_PROJECT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            new PeriodicTotalTimeStatistic(new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "                ChronoUnit.MINUTES,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    FXCollections.observableArrayList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Alpha\", 60),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Beta\", 0),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Charlie\", 60),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                            new StatisticEntry(\"Delta\", 60)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    ));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final Statistic[] TEST_STATISTIC_LIST \u003d {TEST_WEEKLY_TIME_PER_PROJECT};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final StatisticGenerator TEST_STATISTICS \u003d new StatisticManager(TEST_MODEL, TEST_STATISTIC_LIST);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static ProjectBook getTypicalProjectBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            projectBook.addTrackedItem(project);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cProject\u003e getTypicalProjects() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALPHA, BETA, CHARLIE, DELTA));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 68,
      "pr4aveen": 1,
      "khoodehui": 3
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.model.Model.PREDICATE_SHOW_ALL_TRACKED_ITEMS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.FindType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(new GuiWindowSettings(), modelManager.getGuiWindowSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new ProjectBook(), new ProjectBook(modelManager.getProjectBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(Paths.get(\"momentum/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        userPrefs.setGuiWindowSettings(new GuiWindowSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(Paths.get(\"new/momentum/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiWindowSettings_nullGuiWindowSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiWindowSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiWindowSettings_validGuiWindowSettings_setsGuiWindowSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        GuiWindowSettings guiWindowSettings \u003d new GuiWindowSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        modelManager.setGuiWindowSettings(guiWindowSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(guiWindowSettings, modelManager.getGuiWindowSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setProjectBookFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath_validPath_setsProjectBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Path path \u003d Paths.get(\"momentum/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        modelManager.setProjectBookFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(path, modelManager.getProjectBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void hasProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTrackedItem(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectNotInProjectBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(modelManager.hasTrackedItem(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectInProjectBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        modelManager.addTrackedItem(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(modelManager.hasTrackedItem(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void getFilteredProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTrackedItemList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBookBuilder().withProject(ALICE).withProject(BENSON).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook differentProjectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        modelManager \u003d new ModelManager(projectBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(projectBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different projectBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentProjectBook, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        modelManager.updateFilteredProjectList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        modelManager.updateFilteredProjectList(PREDICATE_SHOW_ALL_TRACKED_ITEMS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        differentUserPrefs.setProjectBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(projectBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 13,
      "claracheong4": 26,
      "khoodehui": 9,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/ProjectBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_REMINDER_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjectsOrders.getOrderedProjectBookByDeadlineAscending;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.exceptions.DuplicateTrackableItemException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(Collections.emptyList(), projectBook.getTrackedItemList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectBook.resetData(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData_withValidReadOnlyProjectBook_replacesData() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook newData \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(newData, projectBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void resetData_withDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Two projects with the same identity fields"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        List\u003cProject\u003e newProjects \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBookStub newData \u003d new ProjectBookStub(newProjects);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(DuplicateTrackableItemException.class, () -\u003e projectBook.resetData(newData));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_withSortTypeNull_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectBook.setOrder(null, true, true));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_withValidSortType_ordersProjectBook() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ProjectBook unorderedProjectBook \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        ProjectBook orderedProjectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        orderedProjectBook.setTrackedItems(getOrderedProjectBookByDeadlineAscending());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        unorderedProjectBook.setOrder(SortType.DEADLINE, true, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(orderedProjectBook, unorderedProjectBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e projectBook.hasTrackedItem(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectNotInProjectBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(projectBook.hasTrackedItem(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectInProjectBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectBook.addTrackedItem(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(projectBook.hasTrackedItem(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasProject_projectWithSameIdentityFieldsInProjectBook_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectBook.addTrackedItem(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(projectBook.hasTrackedItem(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getProjectList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e projectBook.getTrackedItemList().remove(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void removeReminder() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withReminder(VALID_REMINDER_AMY).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d editedAlice.removeReminder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook.addTrackedItem(editedAlice);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook expectedProjectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedProjectBook.addTrackedItem(new ProjectBuilder(ALICE).withEmptyReminder().build());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(expectedProjectBook.equals(projectBook));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * A stub ReadOnlyProjectBook whose projects list can violate interface constraints."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static class ProjectBookStub implements ReadOnlyProjectBook {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        private final ObservableList\u003cTrackedItem\u003e trackedItems \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        ProjectBookStub(Collection\u003cProject\u003e trackedItems) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            this.trackedItems.setAll(trackedItems);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public ObservableList\u003cTrackedItem\u003e getTrackedItemList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            return trackedItems;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "khoodehui"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        public Set\u003cTag\u003e getTrackedItemTags() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            getTrackedItemList().forEach(project -\u003e tags.addAll(project.getTags()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 19,
      "claracheong4": 97,
      "kkangs0226": 14,
      "khoodehui": 8
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "    public void setGuiWindowSettings_nullGuiWindowSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiWindowSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void setProjectBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setProjectBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "khoodehui": 2,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/CompletionStatusTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class CompletionStatusTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final CompletionStatus incomplete \u003d new CompletionStatus();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final CompletionStatus completed \u003d incomplete.reverse();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isCompleted() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(incomplete.isCompleted());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(completed.isCompleted());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void reverse() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(incomplete.reverse(), completed);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(completed.reverse(), incomplete);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 24
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"10:15:30\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2019-09-23\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_LATER_TIME \u003d \"10:15:35\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_LATER_DATE \u003d \"2019-09-25\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_TIME \u003d \"10:86:30\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2019-97-23\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DEADLINE_DATE \u003d \"1900-12-10\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final DateWrapper VALID_CREATED_DATE_WRAPPER \u003d new DateWrapper(\"2000-01-01\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Deadline emptyDeadline \u003d new Deadline();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Deadline deadlineWithDate \u003d new Deadline(VALID_DATE, new DateWrapper(VALID_DATE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Deadline deadlineWithDateAndTime \u003d new Deadline(VALID_DATE, VALID_TIME,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            VALID_CREATED_DATE_WRAPPER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(VALID_DATE, null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, null, VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(VALID_DATE, null, VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(null, VALID_TIME, VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(VALID_DATE, VALID_TIME, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidDeadline_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(\"\", VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(INVALID_DATE, INVALID_TIME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(INVALID_DATE, VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new Deadline(INVALID_DEADLINE_DATE, VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Deadline(INVALID_DEADLINE_DATE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_TIME, VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isEmpty() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(emptyDeadline.isEmpty());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(deadlineWithDate.isEmpty());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(deadlineWithDateAndTime.isEmpty());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void hasTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(emptyDeadline.hasTime());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(deadlineWithDate.hasTime());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(deadlineWithDateAndTime.hasTime());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getFormattedDeadline_formatsCorrectly() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        assertEquals(\"No deadline set\", emptyDeadline.getFormattedDeadline());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadlineWithDate.getDate().getFormatted(), deadlineWithDate.getFormattedDeadline());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedDeadlineStr \u003d deadlineWithDateAndTime.getDate().getFormatted()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + \" \" + deadlineWithDateAndTime.getTime().getFormatted();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadlineStr, deadlineWithDateAndTime.getFormattedDeadline());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(\"\", emptyDeadline.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadlineWithDate.getDate().toString(), deadlineWithDate.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedDeadlineStr \u003d deadlineWithDateAndTime.getDate().toString()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                + deadlineWithDateAndTime.getTime().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDeadlineStr, deadlineWithDateAndTime.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has later date -\u003e returns -1"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_CREATED_DATE_WRAPPER).compareTo(new Deadline(VALID_LATER_DATE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE_WRAPPER)), -1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has earlier date -\u003e returns 1"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_LATER_DATE, VALID_CREATED_DATE_WRAPPER).compareTo(new Deadline(VALID_DATE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE_WRAPPER)), 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first and second Deadline have same date -\u003e returns 0"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_CREATED_DATE_WRAPPER).compareTo(new Deadline(\"2019-09-23\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE_WRAPPER)), 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, later time -\u003e returns -1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER).compareTo("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new Deadline(VALID_DATE, VALID_LATER_TIME, VALID_CREATED_DATE_WRAPPER)), -1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, earlier time -\u003e returns 1"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_LATER_TIME, VALID_CREATED_DATE_WRAPPER).compareTo("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER)), 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, SAME time -\u003e returns 0"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER).compareTo("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new Deadline(\"2019-09-23\", \"10:15:30\", VALID_CREATED_DATE_WRAPPER)), 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void sameDateCompare_returnsCorrectValue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, later time -\u003e returns -1"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER).compareTo("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new Deadline(VALID_DATE, VALID_LATER_TIME, VALID_CREATED_DATE_WRAPPER)), -1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, earlier time -\u003e returns 1"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_LATER_TIME, VALID_CREATED_DATE_WRAPPER).compareTo("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER)), 1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second Deadline has same date, SAME time -\u003e returns 0"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER).compareTo("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new Deadline(\"2019-09-23\", \"10:15:30\", VALID_CREATED_DATE_WRAPPER)), 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 97,
      "kkangs0226": 26,
      "khoodehui": 1
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 12
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name aaa \u003d new Name(\"AAA\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name bbb \u003d new Name(\"bbb\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Name aaaLower \u003d new Name(\"aaa\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second name alphabetically later"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(aaa.compareTo(bbb) \u003c 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second name alphabetically earlier"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(bbb.compareTo(aaa) \u003e 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // names are same alphabetically"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(aaa.compareTo(aaaLower) \u003d\u003d 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "kkangs0226": 18,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/ProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_COMPLETION_STATUS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project project \u003d new ProjectBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e project.getTags().remove(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void isSameProject() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(ALICE.isSameTrackedItem(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(ALICE.isSameTrackedItem(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALICE.isSameTrackedItem(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(ALICE.isSameTrackedItem(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different completion status -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withCompletionStatus(VALID_COMPLETION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(ALICE.isSameTrackedItem(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different created date -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withCreatedDate(VALID_CREATED_DATE_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(ALICE.isSameTrackedItem(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(ALICE.isSameTrackedItem(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Project editedBob \u003d new ProjectBuilder(BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY, VALID_CREATED_DATE_AMY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(BOB.isSameTrackedItem(editedBob));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project aliceCopy1 \u003d new ProjectBuilder(ALICE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        Project aliceCopy2 \u003d new ProjectBuilder(ALICE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(aliceCopy1.equals(aliceCopy2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different completion status -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withCompletionStatus(VALID_COMPLETION_STATUS_BOB).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different deadline -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_BOB).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 10,
      "pr4aveen": 15,
      "claracheong4": 36,
      "kkangs0226": 6,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/UniqueTrackedItemListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.exceptions.DuplicateTrackableItemException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.exceptions.TrackableItemNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.TypicalProjectsOrders;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class UniqueTrackedItemListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private final UniqueTrackedItemList uniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTrackedItemList.contains(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_projectNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(uniqueTrackedItemList.contains(ALICE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_projectInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(uniqueTrackedItemList.contains(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void contains_projectWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(uniqueTrackedItemList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void add_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTrackedItemList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void add_duplicateProject_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(DuplicateTrackableItemException.class, () -\u003e uniqueTrackedItemList.add(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_nullTargetProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTrackedItemList.setTrackedItem(null, ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_nullEditedProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTrackedItemList.setTrackedItem(ALICE, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_targetProjectNotInList_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(TrackableItemNotFoundException.class, () -\u003e uniqueTrackedItemList.setTrackedItem(ALICE, ALICE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectIsSameProject_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.setTrackedItem(ALICE, ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueTrackedItemList, uniqueTrackedItemList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        Project editedAlice \u003d new ProjectBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.setTrackedItem(ALICE, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueTrackedItemList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueTrackedItemList, uniqueTrackedItemList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.setTrackedItem(ALICE, BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueTrackedItemList.add(BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueTrackedItemList, uniqueTrackedItemList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProject_editedProjectHasNonUniqueIdentity_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(BOB);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(DuplicateTrackableItemException.class, () -\u003e uniqueTrackedItemList.setTrackedItem(ALICE, BOB));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove_nullProject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTrackedItemList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove_projectDoesNotExist_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(TrackableItemNotFoundException.class, () -\u003e uniqueTrackedItemList.remove(ALICE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void remove_existingProject_removesProject() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.remove(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueTrackedItemList, uniqueTrackedItemList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_nullUniqueProjectList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.setTrackedItems((UniqueTrackedItemList) null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_uniqueProjectList_replacesOwnListWithProvidedUniqueProjectList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueTrackedItemList.add(BOB);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.setTrackedItems(expectedUniqueTrackedItemList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueTrackedItemList, uniqueTrackedItemList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTrackedItemList.setTrackedItems((List\u003cTrackedItem\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        uniqueTrackedItemList.add(ALICE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cTrackedItem\u003e trackedItemList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueTrackedItemList.setTrackedItems(trackedItemList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        expectedUniqueTrackedItemList.add(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(expectedUniqueTrackedItemList, uniqueTrackedItemList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void setProjects_listWithDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cTrackedItem\u003e listWithDuplicateProjects \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(DuplicateTrackableItemException.class, () -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.setTrackedItems(listWithDuplicateProjects));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_nullSortType_throwsNullPointerException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTrackedItemList.setOrder(null, true, true));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_alphabeticalAscendingSortType_sortsListAlphabeticallyAscending() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.add(p);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        uniqueTrackedItemList.setOrder(SortType.ALPHA, true, false);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByAlphabeticalAscending());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(uniqueTrackedItemList, expectedUniqueTrackedItemList);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_alphabeticalDescendingSortType_sortsListAlphabeticallyDescending() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.add(p);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        uniqueTrackedItemList.setOrder(SortType.ALPHA, false, false);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByAlphabeticalDescending());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(uniqueTrackedItemList, expectedUniqueTrackedItemList);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_deadlineAscendingSortType_sortsListDeadlineAscending() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.add(p);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        uniqueTrackedItemList.setOrder(SortType.DEADLINE, true, false);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByDeadlineAscending());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(uniqueTrackedItemList, expectedUniqueTrackedItemList);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_deadlineDescendingSortType_sortsListDeadlineDescending() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.add(p);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        uniqueTrackedItemList.setOrder(SortType.DEADLINE, false, false);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByDeadlineDescending());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(uniqueTrackedItemList, expectedUniqueTrackedItemList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_createdDateAscendingSortType_sortsListCreatedDateAscending() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.add(p);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        uniqueTrackedItemList.setOrder(SortType.CREATED, true, false);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByCreatedDateAscending());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(uniqueTrackedItemList, expectedUniqueTrackedItemList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void setOrder_createdDateDescendingSortType_sortsListCreatedDateDescending() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        for (Project p : getTypicalProjects()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.add(p);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        uniqueTrackedItemList.setOrder(SortType.CREATED, false, false);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList expectedUniqueTrackedItemList \u003d TypicalProjectsOrders"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .getUniqueProjectList(TypicalProjectsOrders.getOrderedProjectBookByCreatedDateDescending());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertEquals(uniqueTrackedItemList, expectedUniqueTrackedItemList);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            -\u003e uniqueTrackedItemList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 4,
      "pr4aveen": 175,
      "claracheong4": 13,
      "kkangs0226": 57
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/comparators/CreatedDateWrapperCompareTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Tests if the {@code Project}\u0027s date created can be compared to another {@code Project}\u0027s date created correctly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class CreatedDateWrapperCompareTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ANCIENT_DATE_PROJECT \u003d new ProjectBuilder().withName(\"Egyptian Pyramid\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"0001-01-01\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project FUTURE_DATE_PROJECT \u003d new ProjectBuilder().withName(\"UFO\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"3000-01-01\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_CREATED_DATE_NAME_ALPHABETICALLY_EARLIER \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2000-11-05\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_CREATED_DATE_NAME_ALPHABETICALLY_LATER \u003d new ProjectBuilder().withName(\"ZZZ\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2000-11-05\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_CREATED_DATE_NAME_ALPHABETICALLY_SAME \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2000-11-05\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final CreatedDateCompare CREATED_DATE_COMPARATOR \u003d new CreatedDateCompare();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void test_compare() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has later created date -\u003e returns -1"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(CREATED_DATE_COMPARATOR.compare(ALICE, FUTURE_DATE_PROJECT), -1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has earlier created date -\u003e returns 1"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(CREATED_DATE_COMPARATOR.compare(ALICE, ANCIENT_DATE_PROJECT), 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically later -\u003e returns negative number"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(CREATED_DATE_COMPARATOR.compare(ALICE, SAME_CREATED_DATE_NAME_ALPHABETICALLY_LATER) \u003c 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically earlier -\u003e returns positive number"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(CREATED_DATE_COMPARATOR.compare(ALICE, SAME_CREATED_DATE_NAME_ALPHABETICALLY_EARLIER) \u003e 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically same -\u003e returns 0"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(CREATED_DATE_COMPARATOR.compare(ALICE, SAME_CREATED_DATE_NAME_ALPHABETICALLY_SAME), 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 4,
      "kkangs0226": 51
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/comparators/DeadlineCompareTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Tests if the {@code Project}\u0027s deadline can be compared to another {@code Project}\u0027s deadline created correctly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class DeadlineCompareTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DeadlineCompare DEADLINE_COMPARATOR \u003d new DeadlineCompare();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ANCIENT_DEADLINE_PROJECT \u003d new ProjectBuilder().withName(\"Egyptian Pyramid\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"0001-01-01\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"0001-02-02\", \"0001-01-01\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project FUTURE_DEADLINE_PROJECT \u003d new ProjectBuilder().withName(\"UFO\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"3000-01-01\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"3000-02-02\", \"3000-01-01\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_CREATED_DATE \u003d \"2000-11-05\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DEADLINE_DATE \u003d \"2020-11-05\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DEADLINE_TIME \u003d \"11:11:11\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DATE_NO_TIME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE, VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DATE_EARLIER_TIME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE, \"01:01:01\", VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DATE_LATER_TIME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE, \"23:23:23\", VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DEADLINE_NAME_ALPHABETICALLY_EARLIER \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE, VALID_DEADLINE_TIME, VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DEADLINE_NAME_ALPHABETICALLY_LATER \u003d new ProjectBuilder().withName(\"ZZZ\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE, VALID_DEADLINE_TIME, VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_DEADLINE_NAME_ALPHABETICALLY_SAME \u003d new ProjectBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE, VALID_DEADLINE_TIME, VALID_CREATED_DATE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void test_compare() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has later deadline date -\u003e returns -1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FUTURE_DEADLINE_PROJECT.getNullOrDeadline()), -1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has earlier deadline date -\u003e returns 1"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ANCIENT_DEADLINE_PROJECT.getNullOrDeadline()), 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first project has no time, second project has time -\u003e returns -1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(SAME_DATE_NO_TIME.getNullOrDeadline(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE.getNullOrDeadline()), -1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first project has time, second project has no time -\u003e returns 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DATE_NO_TIME.getNullOrDeadline()), 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have time and second project has later time -\u003e returns -1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(), SAME_DATE_LATER_TIME.getNullOrDeadline()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                -1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have time and second project has earlier time -\u003e returns 1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DATE_EARLIER_TIME.getNullOrDeadline()), 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have same date and time and second project name is alphabetically later"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // -\u003e returns negative number"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DEADLINE_NAME_ALPHABETICALLY_LATER.getNullOrDeadline()) \u003c 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have same date and time and second project name is alphabetically earlier"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // -\u003e returns positive number"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DEADLINE_NAME_ALPHABETICALLY_EARLIER.getNullOrDeadline()) \u003e 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // both projects have same date and time name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // -\u003e returns zero"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(DEADLINE_COMPARATOR.compare(ALICE.getNullOrDeadline(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                SAME_DEADLINE_NAME_ALPHABETICALLY_SAME.getNullOrDeadline()), 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 21,
      "kkangs0226": 80
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/comparators/NameCompareTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.model.project.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.testutil.ProjectBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " * Tests if the {@code Project}\u0027s name can be compared to another {@code Project}\u0027s name correctly."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class NameCompareTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project AAA_NAME \u003d new ProjectBuilder().withName(\"AAA\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ZZZ_NAME \u003d new ProjectBuilder().withName(\"ZZZ\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project SAME_NAME \u003d new ProjectBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .withCreatedDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final NameCompare NAME_COMPARATOR \u003d new NameCompare();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public void test_compare() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project name is alphabetically later -\u003e returns negative number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(NAME_COMPARATOR.compare(ALICE, ZZZ_NAME) \u003c 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // second project has same created date but alphabetically earlier -\u003e returns positive number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertTrue(NAME_COMPARATOR.compare(ALICE, AAA_NAME) \u003e 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        // first and second project have same name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertEquals(NAME_COMPARATOR.compare(ALICE, SAME_NAME), 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kkangs0226": 41
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/predicates/CompletionStatusPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class CompletionStatusPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final List\u003cString\u003e COMPLETED_KEYWORD \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Collections.singletonList(CompletionStatusPredicate.COMPLETED_KEYWORD);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final List\u003cString\u003e INCOMPLETE_KEYWORD \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Collections.singletonList(CompletionStatusPredicate.INCOMPLETE_KEYWORD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(CompletionStatusPredicate.COMPLETED_KEYWORD,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            CompletionStatusPredicate.INCOMPLETE_KEYWORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final List\u003cString\u003e NO_MATCHING_KEYWORD \u003d Arrays.asList(\"asfsfd\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final CompletionStatusPredicate isCompletedPredicateAny \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new CompletionStatusPredicate(FindType.ANY, COMPLETED_KEYWORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final CompletionStatusPredicate isCompletedPredicateAll \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new CompletionStatusPredicate(FindType.ALL, COMPLETED_KEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final CompletionStatusPredicate isIncompletePredicateAny \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new CompletionStatusPredicate(FindType.ANY, INCOMPLETE_KEYWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final CompletionStatusPredicate isIncompletePredicateAll \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new CompletionStatusPredicate(FindType.ALL, INCOMPLETE_KEYWORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_assertionError() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Multiple keywords -\u003e assertion error"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new CompletionStatusPredicate(FindType.ANY,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                MULTIPLE_KEYWORDS));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isCompletedPredicateAny.equals(isCompletedPredicateAny));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isIncompletePredicateAll.equals(isIncompletePredicateAll));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // same keywords -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isCompletedPredicateAny.equals(isCompletedPredicateAll));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isIncompletePredicateAll.equals(isIncompletePredicateAny));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(isCompletedPredicateAny.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(isIncompletePredicateAll.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(isIncompletePredicateAny.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(isCompletedPredicateAll.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(isCompletedPredicateAll.equals(isIncompletePredicateAll));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(isCompletedPredicateAny.equals(isIncompletePredicateAny));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void test() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isIncompletePredicateAll.test(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(isCompletedPredicateAny.test(ALICE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // No matching keyword -\u003e return false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        CompletionStatusPredicate noMatchingKeywordsPredicate \u003d new CompletionStatusPredicate(FindType.ANY,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                NO_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(noMatchingKeywordsPredicate.test(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 74
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/predicates/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_KEYWORD \u003d Collections.singletonList(\"coding\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(\"likes\", \"coding\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONE_MATCHING_KEYWORD \u003d Arrays.asList(\"coding\", \"starbucks\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MIXED_CASE_KEYWORDS \u003d Arrays.asList(\"lIkEs\", \"cOdiNg\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e NO_MATCHING_KEYWORDS \u003d Arrays.asList(\"nothing\", \"matches\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_NAME \u003d Arrays.asList(\"Alice\", \"Pauline\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_TAG \u003d Collections.singletonList(\"friends\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAnyPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondAnyPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAllPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondAllPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAnyPredicateCopy \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicateCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstAllPredicateCopy \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(secondAnyPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(secondAllPredicate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_descriptionContainsKeywords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (Any)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (Any)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (Any)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (Any)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (All)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (All)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (All)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (All)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (Any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ANY, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match description (Any)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match description (Any)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (All)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        DescriptionContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(FindType.ALL, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match description (All)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match description (All)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new DescriptionContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 127,
      "claracheong4": 1
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/predicates/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_KEYWORD \u003d Collections.singletonList(\"Alice\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(\"Alice\", \"Pauline\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONE_MATCHING_KEYWORD \u003d Arrays.asList(\"Alice\", \"Bob\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MIXED_CASE_KEYWORDS \u003d Arrays.asList(\"AlIcE\", \"PaUlInE\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e NO_MATCHING_KEYWORDS \u003d Arrays.asList(\"nothing\", \"matches\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_DESCRIPTION \u003d Arrays.asList(\"Likes\", \"Coding\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_TAG \u003d Collections.singletonList(\"friends\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAnyPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate secondAnyPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAllPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate secondAllPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAnyPredicateCopy \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicateCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate firstAllPredicateCopy \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(secondAnyPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(secondAllPredicate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_nameContainsKeywords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (Any)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (Any)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (Any)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (Any)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (All)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (All)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (All)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (All)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (Any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ANY, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match name (Any)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match name (Any)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new NameContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(ALICE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (All)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        NameContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new NameContainsKeywordsPredicate(FindType.ALL, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match name (All)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match tag, but does not match name (All)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new NameContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_TAG);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(ALICE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 91,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/project/predicates/TagListContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "package seedu.momentum.model.project.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class TagListContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e SINGLE_KEYWORD \u003d Collections.singletonList(\"friends\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MULTIPLE_KEYWORDS \u003d Arrays.asList(\"friends\", \"owesMoney\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONE_MATCHING_KEYWORD \u003d Arrays.asList(\"dogs\", \"owesMoney\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e MIXED_CASE_KEYWORDS \u003d Arrays.asList(\"fRiEnDs\", \"oWeSmOneY\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e NO_MATCHING_KEYWORDS \u003d Arrays.asList(\"nothing\", \"matches\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_NAME \u003d Arrays.asList(\"Benson\", \"Meier\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private static final List\u003cString\u003e ONLY_MATCHES_DESCRIPTION \u003d Collections.singletonList(\"dogs\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAnyPredicate \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate secondAnyPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAllPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate secondAllPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, secondPredicateKeywordList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAnyPredicateCopy \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAnyPredicate.equals(firstAnyPredicateCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate firstAllPredicateCopy \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, firstPredicateKeywordList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(firstAllPredicate.equals(firstAllPredicateCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAnyPredicate.equals(secondAnyPredicate));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(firstAllPredicate.equals(secondAllPredicate));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_tagListContainsKeywords() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (Any)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (Any)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (Any)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (Any)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // One keyword (All)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, SINGLE_KEYWORD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Multiple keywords (All)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, MULTIPLE_KEYWORDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Only one matching keyword (All)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, ONE_MATCHING_KEYWORD);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Mixed-case keywords (All)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, MIXED_CASE_KEYWORDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertTrue(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void test_tagListDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (Any)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate anyPredicate \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ANY, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match tags (Any)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match tags (Any)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        anyPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ANY, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(anyPredicate.test(BENSON));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Non-matching keyword (All)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        TagListContainsKeywordsPredicate allPredicate \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "                new TagListContainsKeywordsPredicate(FindType.ALL, NO_MATCHING_KEYWORDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match name, but does not match tags (All)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_NAME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        // Keywords match description, but does not match tags (All)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        allPredicate \u003d new TagListContainsKeywordsPredicate(FindType.ALL, ONLY_MATCHES_DESCRIPTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        assertFalse(allPredicate.test(BENSON));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 128
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/reminder/ReminderManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.BooleanProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.SimpleBooleanProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.VersionedProjectBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.ViewMode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ReminderManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private final ProjectBook projectBookUnmodified \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final VersionedProjectBook versionedProjectBook \u003d new VersionedProjectBook("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "            projectBookUnmodified, ViewMode.PROJECTS, null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private final ReminderManager reminderManagerUnmodified \u003d new ReminderManager(versionedProjectBook);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ProjectBook projectBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ReminderManager reminderManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private BiFunction\u003cBooleanProperty, BooleanProperty, Boolean\u003e isBooleanPropertyEquals \u003d (booleanProperty,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         booleanProperty2) -\u003e booleanProperty.getValue() \u003d\u003d booleanProperty2.getValue();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private BiFunction\u003cStringProperty, StringProperty, Boolean\u003e isStringPropertyEquals \u003d (stringProperty,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         stringProperty2) -\u003e stringProperty.getValue().equals(stringProperty2.getValue());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void resetProjectBookAndReminderManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        VersionedProjectBook versionedProjectBook \u003d new VersionedProjectBook(projectBook, ViewMode.PROJECTS, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        reminderManager \u003d new ReminderManager(versionedProjectBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void updateCurrReminder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        resetProjectBookAndReminderManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.updateCurrReminder(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StringProperty expectedReminder \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedReminder.set(String.format(ReminderManager.PROJECT_REMINDER, ALICE.getName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isStringPropertyEquals.apply(expectedReminder, reminderManager.getReminder()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isReminderEmpty() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        resetProjectBookAndReminderManager();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        BooleanProperty expectedBoolean \u003d new SimpleBooleanProperty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedBoolean.set(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isBooleanPropertyEquals.apply(expectedBoolean, reminderManagerUnmodified.isReminderEmpty()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedBoolean.set(false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.updateCurrReminder(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isBooleanPropertyEquals.apply(expectedBoolean, reminderManager.isReminderEmpty()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void removeReminder() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        resetProjectBookAndReminderManager();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.updateCurrReminder(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.removeReminder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(reminderManager.isReminderEmpty().get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getReminder() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        resetProjectBookAndReminderManager();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StringProperty expectedStringProperty \u003d new SimpleStringProperty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedStringProperty.set(String.format(ReminderManager.PROJECT_REMINDER, ALICE.getName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.updateCurrReminder(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(isStringPropertyEquals.apply(expectedStringProperty, reminderManager.getReminder()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        resetProjectBookAndReminderManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(reminderManager.equals(reminderManagerUnmodified));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(reminderManager.equals(reminderManager));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(reminderManager.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(reminderManager.equals(5));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different project book -\u003e return false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        assertFalse(reminderManager.equals(new ReminderManager("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                new VersionedProjectBook(new ProjectBook(), ViewMode.PROJECTS, null))));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // different currReminder"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminderManager.updateCurrReminder(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(reminderManager.equals(reminderManagerUnmodified));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 92,
      "kkangs0226": 9
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/reminder/ReminderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.reminder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d \"2019-09-23T10:15:30\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_LATER_DATE \u003d \"2019-09-25T10:15:35\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_LATER_TIME \u003d \"2019-09-23T16:15:35\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"2019-97-23 10:86:30\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final DateTimeWrapper NOW \u003d new DateTimeWrapper(\"2010-09-23T10:15:30\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static Reminder emptyReminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static Reminder reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static Reminder laterDateReminder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static Reminder laterTimeReminder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void init() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(NOW);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        emptyReminder \u003d new Reminder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminder \u003d new Reminder(VALID_DATE_TIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        laterDateReminder \u003d new Reminder(VALID_LATER_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        laterTimeReminder \u003d new Reminder(VALID_LATER_TIME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reminder(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void constructor_invalidReminder_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Reminder(\"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Reminder(INVALID_DATE_TIME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Reminder(\"2000-10-10T12:12:12\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isEmpty() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertTrue(emptyReminder.isEmpty());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(reminder.isEmpty());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getDateTimeWrapper() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new DateTimeWrapper(VALID_DATE_TIME), reminder.getDateTimeWrapper());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getDateTimeWrapper_emptyReminder_throwsNoSuchElementException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NoSuchElementException.class, () -\u003e emptyReminder.getDateTimeWrapper());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getStatus() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(\"\", emptyReminder.getStatus());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(\"\\ud83d\\udd14\", reminder.getStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getFormattedReminder_formatsCorrectly() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(\"No reminder set\", emptyReminder.getFormattedReminder());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(reminder.getDateTimeWrapper().getFormatted(), reminder.getFormattedReminder());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void remove() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(emptyReminder, reminder.remove());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Instant instant \u003d reminder.getDateTimeWrapper().get().atZone(ZoneId.systemDefault()).toInstant();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Date expectedDate \u003d Date.from(instant);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedDate, reminder.toDate());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(\"\", emptyReminder.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(reminder.getDateTimeWrapper().toString(), reminder.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void compareTo_returnsCorrectValue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        init();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // both reminders are empty -\u003e returns 0"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(emptyReminder.compareTo(emptyReminder), 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // first reminder is empty -\u003e returns 1"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(emptyReminder.compareTo(reminder), 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second reminder is empty -\u003e returns -1"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(reminder.compareTo(emptyReminder), -1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second reminder has later date -\u003e returns -1"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(reminder.compareTo(laterDateReminder), -1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second reminder has earlier date -\u003e returns 1"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(laterDateReminder.compareTo(reminder), 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // first and second reminder have same date and time -\u003e returns 0"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(new Reminder(VALID_DATE_TIME).compareTo(reminder), 0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second reminder has same date, later time -\u003e returns -1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(reminder.compareTo(laterTimeReminder), -1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // second reminder has same date, earlier time -\u003e returns 1"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(laterDateReminder.compareTo(reminder), 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 135
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/timer/TimerWrapperTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.TypicalTimes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class TimerWrapperTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void start_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper \u003d new TimerWrapper().start();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper expectedTimerWrapper \u003d new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedTimerWrapper, timerWrapper);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isRunning_timerStarted_true() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper \u003d new TimerWrapper().start();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper expectedTimerWrapper \u003d new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedTimerWrapper.isRunning(), timerWrapper.isRunning());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void isRunning_timerNotStarted_false() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper \u003d new TimerWrapper();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper expectedTimerWrapper \u003d new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedTimerWrapper.isRunning(), timerWrapper.isRunning());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void stop_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper \u003d new TimerWrapper().start().stop();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper expectedTimerWrapper \u003d new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(expectedTimerWrapper, timerWrapper);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getStartTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper \u003d new TimerWrapper().start();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(TypicalTimes.DAY, timerWrapper.getStartTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getStopTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper \u003d new TimerWrapper().start().stop();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(TypicalTimes.DAY, timerWrapper.getStopTime());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Clock.initFixed(TypicalTimes.DAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper1 \u003d new TimerWrapper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper timerWrapper2 \u003d new TimerWrapper();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(timerWrapper1, timerWrapper1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(timerWrapper1, timerWrapper2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper differentStart \u003d new TimerWrapper(TypicalTimes.DAY_ADD_DAY, TypicalTimes.DAY, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertNotEquals(timerWrapper1, differentStart);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper differentEnd \u003d new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY_ADD_WEEK, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertNotEquals(timerWrapper1, differentEnd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper differentIsRunning \u003d new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertNotEquals(timerWrapper1, differentIsRunning);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 78
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/timer/UniqueDurationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DuplicateDurationException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.exceptions.DurationNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalWorkDuration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class UniqueDurationListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private final UniqueDurationList uniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void contains_nullDuration_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void contains_durationNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(uniqueDurationList.contains(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void contains_durationInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(uniqueDurationList.contains(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void add_nullDuration_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void add_duplicateDuration_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(DuplicateDurationException.class, () -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void remove_projectDoesNotExist_throwsProjectNotFoundException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(DurationNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.remove(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void remove_existingProject_removesProject() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.remove(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList expectedUniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedUniqueDurationList, uniqueDurationList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_nullUniqueProjectList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.setDurations((UniqueDurationList) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_uniqueProjectList_replacesOwnListWithProvidedUniqueProjectList() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList expectedUniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedUniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_MONTH);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.setDurations(expectedUniqueDurationList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedUniqueDurationList, uniqueDurationList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDurationList.setDurations((List\u003cWorkDuration\u003e) null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cWorkDuration\u003e durationList \u003d Collections.singletonList(TypicalWorkDuration.DURATION_ONE_MONTH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        uniqueDurationList.setDurations(durationList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        UniqueDurationList expectedUniqueDurationList \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        expectedUniqueDurationList.add(TypicalWorkDuration.DURATION_ONE_MONTH);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertEquals(expectedUniqueDurationList, uniqueDurationList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void setProjects_listWithDuplicateProjects_throwsDuplicateProjectException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cWorkDuration\u003e listWithDuplicateDurations \u003d Arrays.asList(TypicalWorkDuration.DURATION_ONE_DAY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(DuplicateDurationException.class, () -\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.setDurations(listWithDuplicateDurations));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                uniqueDurationList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 108
    }
  },
  {
    "path": "src/test/java/seedu/momentum/model/timer/WorkDurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.model.project;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalWorkDuration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class WorkDurationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void isSameDuration() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        new ProjectBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        Project editedAlice \u003d editedAlice \u003d new ProjectBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertFalse(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        editedAlice \u003d new ProjectBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        //        assertTrue(ALICE.isSameProject(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        WorkDuration durationCopy \u003d new WorkDuration(TypicalWorkDuration.DURATION_ONE_DAY.getStartTime(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                TypicalWorkDuration.DURATION_ONE_DAY.getStopTime());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(durationCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertTrue(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(TypicalWorkDuration.DURATION_ONE_DAY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different project -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(TypicalWorkDuration.DURATION_ONE_MONTH));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different startTime -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        WorkDuration diffStart \u003d new WorkDuration(new DateTimeWrapper(LocalDateTime.now()),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                TypicalWorkDuration.DURATION_ONE_DAY.getStopTime());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(diffStart));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        // different stopTime -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        WorkDuration diffEnd \u003d new WorkDuration(TypicalWorkDuration.DURATION_ONE_DAY.getStartTime(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new DateTimeWrapper(LocalDateTime.now()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertFalse(TypicalWorkDuration.DURATION_ONE_DAY.isSameDuration(diffEnd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 61,
      "claracheong4": 3
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedDeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.TimeWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonAdaptedDeadlineTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-42-99\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_TIME \u003d \"65:21:02\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_DATE \u003d \"2020-02-09\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_TIME \u003d \"05:21:02\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final DateWrapper VALID_CREATED_DATE_WRAPPER \u003d new DateWrapper(\"2000-02-09\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_validDeadlineDetails_returnsDeadline() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(VALID_DATE, null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline expectedDeadline \u003d new Deadline(VALID_DATE, VALID_CREATED_DATE_WRAPPER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadline.toModelType(VALID_CREATED_DATE_WRAPPER), expectedDeadline);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new JsonAdaptedDeadline(VALID_DATE, VALID_TIME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedDeadline \u003d new Deadline(VALID_DATE, VALID_TIME, VALID_CREATED_DATE_WRAPPER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(deadline.toModelType(VALID_CREATED_DATE_WRAPPER), expectedDeadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final JsonAdaptedDeadline deadline \u003d new JsonAdaptedDeadline(INVALID_DATE, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            deadline.toModelType(VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final JsonAdaptedDeadline deadline2 \u003d new JsonAdaptedDeadline(VALID_DATE, INVALID_TIME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedMessage \u003d TimeWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            deadline2.toModelType(VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        final JsonAdaptedDeadline deadline3 \u003d new JsonAdaptedDeadline(INVALID_DATE, INVALID_TIME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        expectedMessage \u003d DateWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            deadline3.toModelType(VALID_CREATED_DATE_WRAPPER));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 49
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedProjectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.storage.JsonAdaptedProject.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class JsonAdaptedProjectTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_CREATED_DATE \u003d \"2019-42-99\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DEADLINE_DATE \u003d \"2020-42-99\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_DEADLINE_TIME \u003d \"65:21:02\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String INVALID_REMINDER \u003d \"2102-01-12T65:21:02\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_START_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_STOP_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BENSON.getDescription().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final boolean VALID_COMPLETION_STATUS \u003d BENSON.getCompletionStatus().isCompleted();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_CREATED_DATE \u003d BENSON.getCreatedDate().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final JsonAdaptedDeadline VALID_DEADLINE \u003d new JsonAdaptedDeadline(BENSON.getDeadline());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final String VALID_REMINDER \u003d BENSON.getReminder().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final List\u003cJsonAdaptedWorkDuration\u003e VALID_DURATIONS \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            BENSON.getDurationList().stream().map(JsonAdaptedWorkDuration::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final JsonAdaptedTimer VALID_TIMER \u003d new JsonAdaptedTimer(BENSON.getTimer());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public void toModelType_validProjectDetails_returnsProject() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(BENSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(BENSON, project.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(INVALID_NAME, VALID_DESCRIPTION, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE, VALID_DEADLINE, VALID_REMINDER, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(null, VALID_DESCRIPTION, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE, VALID_DEADLINE, VALID_REMINDER, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_invalidCreatedDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                INVALID_CREATED_DATE, VALID_DEADLINE, VALID_REMINDER, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_invalidDeadline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedDeadline invalidJsonAdaptedDeadline \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new JsonAdaptedDeadline(INVALID_DEADLINE_DATE, INVALID_DEADLINE_TIME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                INVALID_CREATED_DATE, invalidJsonAdaptedDeadline, VALID_REMINDER, VALID_TAGS, VALID_DURATIONS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_TIMER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_invalidReminder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE, VALID_DEADLINE, INVALID_REMINDER, VALID_TAGS, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTimeWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, project::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE, VALID_DEADLINE, VALID_REMINDER, invalidTags, VALID_DURATIONS, VALID_TIMER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, project::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidDurations_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        List\u003cJsonAdaptedWorkDuration\u003e invalidDurations \u003d new ArrayList\u003c\u003e(VALID_DURATIONS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        invalidDurations.add(new JsonAdaptedWorkDuration(INVALID_START_TIME, INVALID_STOP_TIME));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonAdaptedProject project \u003d new JsonAdaptedProject(VALID_NAME, VALID_DESCRIPTION, VALID_COMPLETION_STATUS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                VALID_CREATED_DATE, VALID_DEADLINE, VALID_REMINDER, VALID_TAGS, invalidDurations, VALID_TIMER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, project::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 14,
      "pr4aveen": 2,
      "claracheong4": 56,
      "kkangs0226": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedTimerWrapperTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.storage.JsonAdaptedWorkDuration.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonAdaptedTimerWrapperTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String VALID_TIME \u003d \"2020-09-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_validTimerDetails_returnsTimer() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, VALID_TIME, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        TimerWrapper expectedTimerWrapper \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                new TimerWrapper(new DateTimeWrapper(VALID_TIME), new DateTimeWrapper(VALID_TIME), false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(timer.toModelType(), expectedTimerWrapper);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(INVALID_TIME, VALID_TIME, false);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTimeWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(null, VALID_TIME, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTimeWrapper.class.getSimpleName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, INVALID_TIME, false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTimeWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, null, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTimeWrapper.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullIsRunning_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedTimer timer \u003d new JsonAdaptedTimer(VALID_TIME, VALID_TIME, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"isRunning\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, timer::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 54,
      "claracheong4": 10
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonAdaptedWorkDurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.storage.JsonAdaptedWorkDuration.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.testutil.TypicalWorkDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class JsonAdaptedWorkDurationTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String VALID_TIME \u003d \"2020-09-23T16:55:12.83012\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final String INVALID_TIME \u003d \"as;dlkfj\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private static final List\u003cJsonAdaptedWorkDuration\u003e VALID_DURATIONS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            BENSON.getDurationList().stream().map(JsonAdaptedWorkDuration::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_validDurationDetails_returnsDuration() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d new JsonAdaptedWorkDuration(TypicalWorkDuration.DURATION_ONE_DAY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(TypicalWorkDuration.DURATION_ONE_DAY.getStartTime().get().getSecond(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                duration.toModelType().getStartTime().get().getSecond());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(TypicalWorkDuration.DURATION_ONE_DAY.getStopTime().get().getSecond(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                duration.toModelType().getStopTime().get().getSecond());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new JsonAdaptedWorkDuration(INVALID_TIME, VALID_TIME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTimeWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d new JsonAdaptedWorkDuration(null, VALID_TIME);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTimeWrapper.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_invalidStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new JsonAdaptedWorkDuration(VALID_TIME, INVALID_TIME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d DateTimeWrapper.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public void toModelType_nullStopTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        JsonAdaptedWorkDuration duration \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                new JsonAdaptedWorkDuration(VALID_TIME, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTimeWrapper.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, duration::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 56,
      "claracheong4": 9
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonProjectBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonProjectBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonProjectBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void readProjectBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readProjectBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private java.util.Optional\u003cReadOnlyProjectBook\u003e readProjectBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new JsonProjectBookStorage(Paths.get(filePath)).readProjectBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertFalse(readProjectBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readProjectBook(\"notJsonFormatProjectBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    public void readProjectBook_invalidProjectProjectBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        assertThrows(DataConversionException.class, () -\u003e readProjectBook(\"invalidProjectProjectBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    public void readProjectBook_invalidAndValidProjectProjectBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        assertThrows(DataConversionException.class,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //              () -\u003e readProjectBook(\"invalidAndValidProjectProjectBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void readAndSaveProjectBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempProjectBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook original \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        original.setOrder(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage jsonProjectBookStorage \u003d new JsonProjectBookStorage(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        jsonProjectBookStorage.saveProjectBook(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ReadOnlyProjectBook readBack \u003d jsonProjectBookStorage.readProjectBook(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        original.addTrackedItem(HOON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        original.removeTrackedItem(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        original.setOrder(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        jsonProjectBookStorage.saveProjectBook(original, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        readBack \u003d jsonProjectBookStorage.readProjectBook(filePath).get();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(readBack));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        original.addTrackedItem(IDA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        original.setOrder(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        jsonProjectBookStorage.saveProjectBook(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        readBack \u003d jsonProjectBookStorage.readProjectBook().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook_nullProjectBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProjectBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Saves {@code projectBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private void saveProjectBook(ReadOnlyProjectBook projectBook, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new JsonProjectBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                    .saveProjectBook(projectBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void saveProjectBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveProjectBook(new ProjectBook(), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 2,
      "claracheong4": 109,
      "kkangs0226": 4
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonSerializableProjectBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.testutil.TypicalProjects;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class JsonSerializableProjectBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableProjectBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path TYPICAL_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalProjectsProjectBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static final Path DUPLICATE_PROJECT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateProjectProjectBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_typicalProjectsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonSerializableProjectBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PROJECT_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonSerializableProjectBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook typicalProjectsProjectBook \u003d TypicalProjects.getTypicalProjectBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        typicalProjectsProjectBook.setOrder(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(projectBookFromFile, typicalProjectsProjectBook);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    public void toModelType_invalidProjectFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        JsonSerializableProjectBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PROJECT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //                JsonSerializableProjectBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void toModelType_duplicateProjects_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonSerializableProjectBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PROJECT_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                JsonSerializableProjectBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableProjectBook.MESSAGE_DUPLICATE_PROJECT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 46,
      "kkangs0226": 2
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiThemeSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.StatisticTimeframeSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.Theme;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        userPrefs.setGuiWindowSettings(new GuiWindowSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        userPrefs.setProjectBookFilePath(Paths.get(\"projectbook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        original.setGuiWindowSettings(new GuiWindowSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        original.setGuiThemeSettings(new GuiThemeSettings(new Theme(Theme.ThemeType.DARK)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        original.setStatisticTimeframeSettings(new StatisticTimeframeSettings("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        original.setGuiWindowSettings(new GuiWindowSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        original.setGuiThemeSettings(new GuiThemeSettings(new Theme(Theme.ThemeType.LIGHT)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        original.setStatisticTimeframeSettings(new StatisticTimeframeSettings("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "            new StatisticTimeframe(StatisticTimeframe.Timeframe.WEEKLY)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 5,
      "khoodehui": 14,
      "-": 114
    }
  },
  {
    "path": "src/test/java/seedu/momentum/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.getTypicalProjectBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "import seedu.momentum.commons.core.GuiWindowSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ReadOnlyProjectBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        JsonProjectBookStorage projectBookStorage \u003d new JsonProjectBookStorage(getTempFilePath(\"pb\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        storageManager \u003d new StorageManager(projectBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "khoodehui"
        },
        "content": "        original.setGuiWindowSettings(new GuiWindowSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void projectBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         * {@link JsonProjectBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonProjectBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook original \u003d getTypicalProjectBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        original.setOrder(SortType.ALPHA, true, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        storageManager.saveProjectBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ReadOnlyProjectBook retrieved \u003d storageManager.readProjectBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertEquals(original, new ProjectBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public void getProjectBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        assertNotNull(storageManager.getProjectBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 16,
      "kkangs0226": 2,
      "khoodehui": 2,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/EditTrackedItemDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class to help with building EditTrackedItemDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class EditTrackedItemDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private EditCommand.EditTrackedItemDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor \u003d new EditCommand.EditTrackedItemDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder(EditCommand.EditTrackedItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditTrackedItemDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Returns an {@code EditTrackedItemDescriptor} with fields containing {@code trackedItem}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder(TrackedItem trackedItem) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor \u003d new EditCommand.EditTrackedItemDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor.setName(trackedItem.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setCompletionStatus(trackedItem.getCompletionStatus());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor.setDescription(trackedItem.getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor.setDeadline(trackedItem.getDeadline());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setReminder(trackedItem.getReminder());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        descriptor.setTags(trackedItem.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the {@code Name} of the {@code EditTrackedItemDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTrackedItemDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code CompletionStatus} of the {@code EditTrackedItemDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public EditTrackedItemDescriptorBuilder withCompletionStatus(CompletionStatus completionStatus) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setCompletionStatus(completionStatus);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditTrackedItemDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder withDeadline(String date, String createdDate) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setDeadline(new Deadline(date, new DateWrapper(createdDate)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the {@code Deadline} of the {@code EditTrackedItemDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder withDeadline(String date, String time, String createDate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setDeadline(new Deadline(date, time, new DateWrapper(createDate)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Reminder} of the {@code EditTrackedItemDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public EditTrackedItemDescriptorBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.setReminder(new Reminder(dateTime));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTrackedItemDescriptor}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public EditTrackedItemDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public EditCommand.EditTrackedItemDescriptor build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 15,
      "pr4aveen": 46,
      "claracheong4": 38,
      "kkangs0226": 7
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/ProjectBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * A utility class to help with building ProjectBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " *     {@code ProjectBook projectBook \u003d new ProjectBookBuilder().withProject(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "public class ProjectBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private ProjectBook projectBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBookBuilder(ProjectBook projectBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.projectBook \u003d projectBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Adds a new {@code Project} to the {@code ProjectBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBookBuilder withProject(Project project) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        projectBook.addTrackedItem(project);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 1,
      "claracheong4": 33
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/ProjectBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.Clock;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.UniqueDurationList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class to help with building Project objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Likes coding\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEFAULT_CREATED_DATE \u003d \"2000-11-05\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEFAULT_DEADLINE_DATE \u003d \"2020-11-05\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final String DEFAULT_DEADLINE_TIME \u003d \"11:11:11\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private CompletionStatus completionStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private DateWrapper createdDateWrapper;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private Reminder reminder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    private UniqueDurationList durations;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private TimerWrapper timerWrapper;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Creates a {@code ProjectBuilder} with the default details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectBuilder() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        completionStatus \u003d new CompletionStatus();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        createdDateWrapper \u003d new DateWrapper(DEFAULT_CREATED_DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE_DATE, DEFAULT_DEADLINE_TIME, createdDateWrapper);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        timerWrapper \u003d new TimerWrapper();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Initializes the ProjectBuilder with the data of {@code projectToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder(TrackedItem trackedItemToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        name \u003d trackedItemToCopy.getName();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        description \u003d trackedItemToCopy.getDescription();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        completionStatus \u003d trackedItemToCopy.getCompletionStatus();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        createdDateWrapper \u003d trackedItemToCopy.getCreatedDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        deadline \u003d trackedItemToCopy.getDeadline();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        reminder \u003d trackedItemToCopy.getReminder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(trackedItemToCopy.getTags());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        durations \u003d new UniqueDurationList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        for (WorkDuration duration : trackedItemToCopy.getDurationList()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            durations.add(duration);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        timerWrapper \u003d trackedItemToCopy.getTimer();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Sets the {@code Name} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectBuilder withName(String name) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the {@code Description} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public ProjectBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code CompletionStatus} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withCompletionStatus(CompletionStatus completionStatus) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.completionStatus \u003d completionStatus;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     * Sets the {@code Description} of the {@code Project} that we are building to an empty string."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withEmptyDescription() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        this.description \u003d Description.EMPTY_DESCRIPTION;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code createdDateWrapper} of the {@code Project} that we are building with current date."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withCurrentCreatedDate() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDateWrapper \u003d new DateWrapper(Clock.now().getDate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code CreatedDate} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withCreatedDate(String createdDate) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.createdDateWrapper \u003d new DateWrapper(createdDate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building with an empty deadline."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withEmptyDeadline() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d new Deadline();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withDeadline(String date, String createdDate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d new Deadline(date, new DateWrapper(createdDate));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withDeadline(String date, String time, String createdDate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.deadline \u003d new Deadline(date, time, new DateWrapper(createdDate));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Reminder} of the {@code Project} that we are building with an empty reminder."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withEmptyReminder() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminder \u003d new Reminder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Sets the {@code Reminder} of the {@code Project} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.reminder \u003d new Reminder(dateTime);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Project} that we are building."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public ProjectBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * Parses the {@code durations} into a {@code UniqueDurationList} and set it to the {@code Project} that we"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public ProjectBuilder withDurations(WorkDuration... durations) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        this.durations \u003d SampleDataUtil.getDurationList(durations);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Parses the {@code timerWrapper} into a {@code TimerWrapper} and set it to the {@code Project} that we"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public ProjectBuilder withTimer(TimerWrapper timerWrapper) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        this.timerWrapper \u003d timerWrapper;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Builds a {@code Project}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public Project build() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new Project(name, description, completionStatus, createdDateWrapper, deadline, reminder, tags, durations,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                timerWrapper);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 23,
      "pr4aveen": 47,
      "claracheong4": 107,
      "kkangs0226": 19
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/ProjectUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_COMPLETION_STATUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DEADLINE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.reminder.Reminder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class for Project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class ProjectUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static String getDeadlineString(Project project) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Deadline deadline \u003d project.getDeadline();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!deadline.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            str +\u003d PREFIX_DEADLINE_DATE + deadline.getDate().toString() + \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (deadline.hasTime()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                str +\u003d PREFIX_DEADLINE_TIME + deadline.getTime().toString() + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static String getDeadlineString(EditCommand.EditTrackedItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        String str \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (descriptor.getDeadline().isPresent() \u0026\u0026 !descriptor.getDeadline().get().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Deadline deadline \u003d descriptor.getDeadline().get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            str +\u003d PREFIX_DEADLINE_DATE + deadline.getDate().toString() + \" \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (deadline.hasTime()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                str +\u003d PREFIX_DEADLINE_TIME + deadline.getTime().toString() + \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return str;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static String getReminderString(Project project) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        Reminder reminder \u003d project.getReminder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (!reminder.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return PREFIX_REMINDER + reminder.toString() + \" \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static String getReminderString(EditCommand.EditTrackedItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (descriptor.getReminder().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Reminder reminder \u003d descriptor.getReminder().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            return PREFIX_REMINDER + reminder.toString() + \" \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static String getTagsString(Project project) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        project.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private static String getTagsString(EditCommand.EditTrackedItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns an add command string for adding the {@code project}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static String getAddCommand(Project project) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getProjectDetails(project);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the part of command string for the given {@code project}\u0027s details."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static String getProjectDetails(Project project) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        sb.append(PREFIX_NAME + project.getName().fullName + \" \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + project.getDescription().value + \" \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        if (project.getCompletionStatus().isCompleted()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            sb.append(PREFIX_COMPLETION_STATUS + \" \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(getDeadlineString(project));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(getReminderString(project));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(getTagsString(project));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the part of command string for the given {@code EditTrackedItemDescriptor}\u0027s details."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static String getEditProjectDescriptorDetails(EditCommand.EditTrackedItemDescriptor descriptor) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION).append(description.value)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        descriptor.getCompletionStatus().ifPresent(editedCompletionStatus -\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            sb.append(PREFIX_COMPLETION_STATUS).append(\" \"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(getDeadlineString(descriptor));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(getReminderString(descriptor));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        sb.append(getTagsString(descriptor));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 11,
      "claracheong4": 95,
      "kkangs0226": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/SortCommandUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import seedu.momentum.model.project.SortType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class SortCommandUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand DEFAULT_SORT_COMMAND \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.NULL, true, true, true);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final SortCommand ALPHA_ASCENDING_COMMAND_WITH_COMPLETION_STATUS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.ALPHA, true, false, true);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand ALPHA_DESCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.ALPHA, false, false, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final SortCommand DEADLINE_ASCENDING_COMMAND_WITH_COMPLETION_STATUS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.DEADLINE, true, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand DEADLINE_DESCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.DEADLINE, false, false, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand CREATED_DATE_ASCENDING_COMMAND \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.CREATED, true, false, false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final SortCommand CREATED_DATE_DESCENDING_COMMAND_WITH_COMPLETION_STATUS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.CREATED, false, false, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand NULL_SORT_TYPE_ASCENDING_NON_DEFAULT_COMMAND \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.NULL, true, false, true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final SortCommand NULL_SORT_TYPE_DESCENDING_NON_DEFAULT_COMMAND \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new SortCommand(SortType.NULL, false, false, true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 12,
      "kkangs0226": 22
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the middle index of the project in the {@code model}\u0027s project list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTrackedItemList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the last index of the project in the {@code model}\u0027s project list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTrackedItemList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "     * Returns the project in the {@code model}\u0027s project list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static TrackedItem getProject(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return model.getFilteredTrackedItemList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 2,
      "pr4aveen": 6,
      "claracheong4": 3,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Index INDEX_FIRST_PROJECT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Index INDEX_SECOND_PROJECT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Index INDEX_THIRD_PROJECT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pr4aveen": 3,
      "claracheong4": 2,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalProjects.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_COMPLETION_STATUS_BOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_CREATED_DATE_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_DATE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DEADLINE_TIME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_REMINDER_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.ProjectBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.CompletionStatus;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.project.Project;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": " * A utility class containing a list of {@code Project} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "public class TypicalProjects {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project ALICE \u003d new ProjectBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Likes coding\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2000-11-05\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"11:11:11\", \"2000-11-05\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project BENSON \u003d new ProjectBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDescription(\"Likes dogs\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2000-11-05\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCompletionStatus(CompletionStatus.COMPLETED)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-11-05\", \"12:43:12\", \"2000-11-05\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withReminder(\"2030-12-02T01:21:31\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withDurations(TypicalWorkDuration.DURATION_ONE_DAY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            .withTimer(TypicalTimers.DAY).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project CARL \u003d new ProjectBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes poodles\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCompletionStatus(CompletionStatus.COMPLETED)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-08-02\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project DANIEL \u003d new ProjectBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes cats\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-05-21\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project ELLE \u003d new ProjectBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes elephants\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-07-21\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-07-21\", \"2019-07-21\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project FIONA \u003d new ProjectBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes starbucks\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-03-21\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(\"2020-03-21\", \"05:02:09\", \"2019-03-21\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    public static final Project GEORGE \u003d new ProjectBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(\"Likes you\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCompletionStatus(CompletionStatus.COMPLETED)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(\"2019-07-28\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withEmptyDeadline()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withReminder(\"2021-12-05T02:45:23\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project HOON \u003d new ProjectBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project IDA \u003d new ProjectBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    // Manually added - Project\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project AMY \u003d new ProjectBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE_AMY)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE_AMY, VALID_DEADLINE_TIME_AMY, VALID_CREATED_DATE_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withReminder(VALID_REMINDER_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static final Project BOB \u003d new ProjectBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCompletionStatus(VALID_COMPLETION_STATUS_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withCreatedDate(VALID_CREATED_DATE_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withDeadline(VALID_DEADLINE_DATE_BOB, VALID_CREATED_DATE_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    private TypicalProjects() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "     * Returns an {@code ProjectBook} with all the typical projects."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static ProjectBook getTypicalProjectBook() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        ProjectBook projectBook \u003d new ProjectBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        for (Project project : getTypicalProjects()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            projectBook.addTrackedItem(project);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return projectBook;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "    public static List\u003cProject\u003e getTypicalProjects() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 5,
      "pr4aveen": 14,
      "claracheong4": 59,
      "kkangs0226": 7,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalProjectsOrders.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import static seedu.momentum.testutil.TypicalProjects.GEORGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.project.TrackedItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "import seedu.momentum.model.project.UniqueTrackedItemList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "public class TypicalProjectsOrders {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByAlphabeticalAscending() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByAlphabeticalDescending() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByDeadlineAscending() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByDeadlineDescending() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByCreatedDateAscending() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                CARL));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByCreatedDateDescending() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                GEORGE,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByReminderAscending() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                GEORGE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                FIONA));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claracheong4"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static List\u003cTrackedItem\u003e getOrderedProjectBookByReminderDescending() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                FIONA,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ELLE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                DANIEL,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                CARL,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                ALICE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                BENSON,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "                GEORGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static UniqueTrackedItemList getUniqueProjectList(List\u003cTrackedItem\u003e trackedItems) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        UniqueTrackedItemList uniqueTrackedItemList \u003d new UniqueTrackedItemList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "        for (TrackedItem p : trackedItems) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "            uniqueTrackedItemList.add(p);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pr4aveen"
        },
        "content": "        return uniqueTrackedItemList;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kkangs0226"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 9,
      "pr4aveen": 4,
      "claracheong4": 34,
      "kkangs0226": 69
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalTimers.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.model.timer.TimerWrapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TypicalTimers {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final TimerWrapper DAY \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY_ADD_DAY, false);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final TimerWrapper HOUR \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY_ADD_HOUR, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final TimerWrapper WEEK \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new TimerWrapper(TypicalTimes.DAY, TypicalTimes.DAY_ADD_WEEK, false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 5,
      "claracheong4": 7
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalTimes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.commons.core.DateTimeWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TypicalTimes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeWrapper DAY \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTimeWrapper(LocalDateTime.of(2019, 1, 1, 0, 0));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeWrapper DAY_ADD_HOUR \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTimeWrapper(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.HOURS));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeWrapper DAY_ADD_DAY \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTimeWrapper(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.DAYS));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeWrapper DAY_ADD_WEEK \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTimeWrapper(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.WEEKS));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeWrapper DAY_ADD_MONTH \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTimeWrapper(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.MONTHS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "    public static final DateTimeWrapper DAY_ADD_YEAR \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "            new DateTimeWrapper(LocalDateTime.of(2019, 1, 1, 0, 0)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "                    .plus(1, ChronoUnit.YEARS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 13,
      "claracheong4": 13
    }
  },
  {
    "path": "src/test/java/seedu/momentum/testutil/TypicalWorkDuration.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "package seedu.momentum.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "import seedu.momentum.model.timer.WorkDuration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "public class TypicalWorkDuration {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_DAY \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_DAY);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_HOUR \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_HOUR);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_WEEK \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_WEEK);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_MONTH \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_MONTH);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "    public static final WorkDuration DURATION_ONE_YEAR \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "            new WorkDuration(TypicalTimes.DAY, TypicalTimes.DAY_ADD_YEAR);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "boundtotheearth"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "boundtotheearth": 17
    }
  },
  {
    "path": "src/test/java/seedu/momentum/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/momentum/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "package seedu.momentum.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import static seedu.momentum.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "import seedu.momentum.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003c?import seedu.momentum.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claracheong4"
        },
        "content": "\u003cfx:root type\u003d\"seedu.momentum.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "claracheong4": 1,
      "-": 5
    }
  }
]
